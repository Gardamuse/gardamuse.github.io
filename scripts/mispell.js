var mispell =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/compromise/builds/compromise.js":
/*!******************************************************!*\
  !*** ./node_modules/compromise/builds/compromise.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {var require;var require;(function(f){if(true){module.exports=f()}else { var g; }})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return require(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(_dereq_,module,exports){\n(function (global){\n/* efrt trie-compression v2.0.3  github.com/nlp-compromise/efrt  - MIT */\n!function(r){if(\"object\"==typeof exports&&\"undefined\"!=typeof module)module.exports=r();else if(\"function\"==typeof define&&define.amd)define([],r);else{var e;e=\"undefined\"!=typeof window?window:\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:this,e.unpack=r()}}(function(){return function r(e,n,o){function t(u,f){if(!n[u]){if(!e[u]){var s=\"function\"==typeof _dereq_&&_dereq_;if(!f&&s)return s(u,!0);if(i)return i(u,!0);var a=new Error(\"Cannot find module '\"+u+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var c=n[u]={exports:{}};e[u][0].call(c.exports,function(r){var n=e[u][1][r];return t(n?n:r)},c,c.exports,r,e,n,o)}return n[u].exports}for(var i=\"function\"==typeof _dereq_&&_dereq_,u=0;u<o.length;u++)t(o[u]);return t}({1:[function(r,e,n){\"use strict\";var o=36,t=\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\",i=t.split(\"\").reduce(function(r,e,n){return r[e]=n,r},{}),u=function(r){if(void 0!==t[r])return t[r];for(var e=1,n=o,i=\"\";r>=n;r-=n,e++,n*=o);for(;e--;){var u=r%o;i=String.fromCharCode((u<10?48:55)+u)+i,r=(r-u)/o}return i},f=function(r){if(void 0!==i[r])return i[r];for(var e=0,n=1,t=o,u=1;n<r.length;e+=t,n++,t*=o);for(var f=r.length-1;f>=0;f--,u*=o){var s=r.charCodeAt(f)-48;s>10&&(s-=7),e+=s*u}return e};e.exports={toAlphaCode:u,fromAlphaCode:f}},{}],2:[function(r,e,n){\"use strict\";var o=r(\"./unpack\");e.exports=function(r){var e=r.split(\"|\").reduce(function(r,e){var n=e.split(\"¦\");return r[n[0]]=n[1],r},{}),n={};return Object.keys(e).forEach(function(r){var t=o(e[r]);\"true\"===r&&(r=!0);for(var i=0;i<t.length;i++){var u=t[i];n.hasOwnProperty(u)===!0?Array.isArray(n[u])===!1?n[u]=[n[u],r]:n[u].push(r):n[u]=r}}),n}},{\"./unpack\":4}],3:[function(r,e,n){\"use strict\";var o=r(\"../encoding\");e.exports=function(r){for(var e=new RegExp(\"([0-9A-Z]+):([0-9A-Z]+)\"),n=0;n<r.nodes.length;n++){var t=e.exec(r.nodes[n]);if(!t){r.symCount=n;break}r.syms[o.fromAlphaCode(t[1])]=o.fromAlphaCode(t[2])}r.nodes=r.nodes.slice(r.symCount,r.nodes.length)}},{\"../encoding\":1}],4:[function(r,e,n){\"use strict\";var o=r(\"./symbols\"),t=r(\"../encoding\"),i=function(r,e,n){var o=t.fromAlphaCode(e);return o<r.symCount?r.syms[o]:n+o+1-r.symCount},u=function(r){var e=[],n=function n(o,t){var u=r.nodes[o];\"!\"===u[0]&&(e.push(t),u=u.slice(1));for(var f=u.split(/([A-Z0-9,]+)/g),s=0;s<f.length;s+=2){var a=f[s],c=f[s+1];if(a){var d=t+a;if(\",\"!==c&&void 0!==c){var p=i(r,c,o);n(p,d)}else e.push(d)}}};return n(0,\"\"),e},f=function(r){var e={nodes:r.split(\";\"),syms:[],symCount:0};return r.match(\":\")&&o(e),u(e)};e.exports=f},{\"../encoding\":1,\"./symbols\":3}]},{},[2])(2)}),function(r){if(\"object\"==typeof exports&&\"undefined\"!=typeof module)module.exports=r();else if(\"function\"==typeof define&&define.amd)define([],r);else{var e;e=\"undefined\"!=typeof window?window:\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:this,e.unpack=r()}}(function(){return function r(e,n,o){function t(u,f){if(!n[u]){if(!e[u]){var s=\"function\"==typeof _dereq_&&_dereq_;if(!f&&s)return s(u,!0);if(i)return i(u,!0);var a=new Error(\"Cannot find module '\"+u+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var c=n[u]={exports:{}};e[u][0].call(c.exports,function(r){var n=e[u][1][r];return t(n?n:r)},c,c.exports,r,e,n,o)}return n[u].exports}for(var i=\"function\"==typeof _dereq_&&_dereq_,u=0;u<o.length;u++)t(o[u]);return t}({1:[function(r,e,n){\"use strict\";var o=36,t=\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\",i=t.split(\"\").reduce(function(r,e,n){return r[e]=n,r},{}),u=function(r){if(void 0!==t[r])return t[r];for(var e=1,n=o,i=\"\";r>=n;r-=n,e++,n*=o);for(;e--;){var u=r%o;i=String.fromCharCode((u<10?48:55)+u)+i,r=(r-u)/o}return i},f=function(r){if(void 0!==i[r])return i[r];for(var e=0,n=1,t=o,u=1;n<r.length;e+=t,n++,t*=o);for(var f=r.length-1;f>=0;f--,u*=o){var s=r.charCodeAt(f)-48;s>10&&(s-=7),e+=s*u}return e};e.exports={toAlphaCode:u,fromAlphaCode:f}},{}],2:[function(r,e,n){\"use strict\";var o=r(\"./unpack\");e.exports=function(r){var e=r.split(\"|\").reduce(function(r,e){var n=e.split(\"¦\");return r[n[0]]=n[1],r},{}),n={};return Object.keys(e).forEach(function(r){var t=o(e[r]);\"true\"===r&&(r=!0);for(var i=0;i<t.length;i++){var u=t[i];n.hasOwnProperty(u)===!0?Array.isArray(n[u])===!1?n[u]=[n[u],r]:n[u].push(r):n[u]=r}}),n}},{\"./unpack\":4}],3:[function(r,e,n){\"use strict\";var o=r(\"../encoding\");e.exports=function(r){for(var e=new RegExp(\"([0-9A-Z]+):([0-9A-Z]+)\"),n=0;n<r.nodes.length;n++){var t=e.exec(r.nodes[n]);if(!t){r.symCount=n;break}r.syms[o.fromAlphaCode(t[1])]=o.fromAlphaCode(t[2])}r.nodes=r.nodes.slice(r.symCount,r.nodes.length)}},{\"../encoding\":1}],4:[function(r,e,n){\"use strict\";var o=r(\"./symbols\"),t=r(\"../encoding\"),i=function(r,e,n){var o=t.fromAlphaCode(e);return o<r.symCount?r.syms[o]:n+o+1-r.symCount},u=function(r){var e=[],n=function n(o,t){var u=r.nodes[o];\"!\"===u[0]&&(e.push(t),u=u.slice(1));for(var f=u.split(/([A-Z0-9,]+)/g),s=0;s<f.length;s+=2){var a=f[s],c=f[s+1];if(a){var d=t+a;if(\",\"!==c&&void 0!==c){var p=i(r,c,o);n(p,d)}else e.push(d)}}};return n(0,\"\"),e},f=function(r){var e={nodes:r.split(\";\"),syms:[],symCount:0};return r.match(\":\")&&o(e),u(e)};e.exports=f},{\"../encoding\":1,\"./symbols\":3}]},{},[2])(2)}),function(r){if(\"object\"==typeof exports&&\"undefined\"!=typeof module)module.exports=r();else if(\"function\"==typeof define&&define.amd)define([],r);else{var e;e=\"undefined\"!=typeof window?window:\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:this,e.unpack=r()}}(function(){return function r(e,n,o){function t(u,f){if(!n[u]){if(!e[u]){var s=\"function\"==typeof _dereq_&&_dereq_;if(!f&&s)return s(u,!0);if(i)return i(u,!0);var a=new Error(\"Cannot find module '\"+u+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var c=n[u]={exports:{}};e[u][0].call(c.exports,function(r){var n=e[u][1][r];return t(n?n:r)},c,c.exports,r,e,n,o)}return n[u].exports}for(var i=\"function\"==typeof _dereq_&&_dereq_,u=0;u<o.length;u++)t(o[u]);return t}({1:[function(r,e,n){\"use strict\";var o=36,t=\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\",i=t.split(\"\").reduce(function(r,e,n){return r[e]=n,r},{}),u=function(r){if(void 0!==t[r])return t[r];for(var e=1,n=o,i=\"\";r>=n;r-=n,e++,n*=o);for(;e--;){var u=r%o;i=String.fromCharCode((u<10?48:55)+u)+i,r=(r-u)/o}return i},f=function(r){if(void 0!==i[r])return i[r];for(var e=0,n=1,t=o,u=1;n<r.length;e+=t,n++,t*=o);for(var f=r.length-1;f>=0;f--,u*=o){var s=r.charCodeAt(f)-48;s>10&&(s-=7),e+=s*u}return e};e.exports={toAlphaCode:u,fromAlphaCode:f}},{}],2:[function(r,e,n){\"use strict\";var o=r(\"./unpack\");e.exports=function(r){var e=r.split(\"|\").reduce(function(r,e){var n=e.split(\"¦\");return r[n[0]]=n[1],r},{}),n={};return Object.keys(e).forEach(function(r){var t=o(e[r]);\"true\"===r&&(r=!0);for(var i=0;i<t.length;i++){var u=t[i];n.hasOwnProperty(u)===!0?Array.isArray(n[u])===!1?n[u]=[n[u],r]:n[u].push(r):n[u]=r}}),n}},{\"./unpack\":4}],3:[function(r,e,n){\"use strict\";var o=r(\"../encoding\");e.exports=function(r){for(var e=new RegExp(\"([0-9A-Z]+):([0-9A-Z]+)\"),n=0;n<r.nodes.length;n++){var t=e.exec(r.nodes[n]);if(!t){r.symCount=n;break}r.syms[o.fromAlphaCode(t[1])]=o.fromAlphaCode(t[2])}r.nodes=r.nodes.slice(r.symCount,r.nodes.length)}},{\"../encoding\":1}],4:[function(r,e,n){\"use strict\";var o=r(\"./symbols\"),t=r(\"../encoding\"),i=function(r,e,n){var o=t.fromAlphaCode(e);return o<r.symCount?r.syms[o]:n+o+1-r.symCount},u=function(r){var e=[],n=function n(o,t){var u=r.nodes[o];\"!\"===u[0]&&(e.push(t),u=u.slice(1));for(var f=u.split(/([A-Z0-9,]+)/g),s=0;s<f.length;s+=2){var a=f[s],c=f[s+1];if(a){var d=t+a;if(\",\"!==c&&void 0!==c){var p=i(r,c,o);n(p,d)}else e.push(d)}}};return n(0,\"\"),e},f=function(r){var e={nodes:r.split(\";\"),syms:[],symCount:0};return r.match(\":\")&&o(e),u(e)};e.exports=f},{\"../encoding\":1,\"./symbols\":3}]},{},[2])(2)}),function(r){if(\"object\"==typeof exports&&\"undefined\"!=typeof module)module.exports=r();else if(\"function\"==typeof define&&define.amd)define([],r);else{var e;e=\"undefined\"!=typeof window?window:\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:this,e.unpack=r()}}(function(){return function r(e,n,o){function t(u,f){if(!n[u]){if(!e[u]){var s=\"function\"==typeof _dereq_&&_dereq_;if(!f&&s)return s(u,!0);if(i)return i(u,!0);var a=new Error(\"Cannot find module '\"+u+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var c=n[u]={exports:{}};e[u][0].call(c.exports,function(r){var n=e[u][1][r];return t(n?n:r)},c,c.exports,r,e,n,o)}return n[u].exports}for(var i=\"function\"==typeof _dereq_&&_dereq_,u=0;u<o.length;u++)t(o[u]);return t}({1:[function(r,e,n){\"use strict\";var o=36,t=\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\",i=t.split(\"\").reduce(function(r,e,n){return r[e]=n,r},{}),u=function(r){if(void 0!==t[r])return t[r];for(var e=1,n=o,i=\"\";r>=n;r-=n,e++,n*=o);for(;e--;){var u=r%o;i=String.fromCharCode((u<10?48:55)+u)+i,r=(r-u)/o}return i},f=function(r){if(void 0!==i[r])return i[r];for(var e=0,n=1,t=o,u=1;n<r.length;e+=t,n++,t*=o);for(var f=r.length-1;f>=0;f--,u*=o){var s=r.charCodeAt(f)-48;s>10&&(s-=7),e+=s*u}return e};e.exports={toAlphaCode:u,fromAlphaCode:f}},{}],2:[function(r,e,n){\"use strict\";var o=r(\"./unpack\");e.exports=function(r){var e=r.split(\"|\").reduce(function(r,e){var n=e.split(\"¦\");return r[n[0]]=n[1],r},{}),n={};return Object.keys(e).forEach(function(r){var t=o(e[r]);\"true\"===r&&(r=!0);for(var i=0;i<t.length;i++){var u=t[i];n.hasOwnProperty(u)===!0?Array.isArray(n[u])===!1?n[u]=[n[u],r]:n[u].push(r):n[u]=r}}),n}},{\"./unpack\":4}],3:[function(r,e,n){\"use strict\";var o=r(\"../encoding\");e.exports=function(r){for(var e=new RegExp(\"([0-9A-Z]+):([0-9A-Z]+)\"),n=0;n<r.nodes.length;n++){var t=e.exec(r.nodes[n]);if(!t){r.symCount=n;break}r.syms[o.fromAlphaCode(t[1])]=o.fromAlphaCode(t[2])}r.nodes=r.nodes.slice(r.symCount,r.nodes.length)}},{\"../encoding\":1}],4:[function(r,e,n){\"use strict\";var o=r(\"./symbols\"),t=r(\"../encoding\"),i=function(r,e,n){var o=t.fromAlphaCode(e);return o<r.symCount?r.syms[o]:n+o+1-r.symCount},u=function(r){var e=[],n=function n(o,t){var u=r.nodes[o];\"!\"===u[0]&&(e.push(t),u=u.slice(1));for(var f=u.split(/([A-Z0-9,]+)/g),s=0;s<f.length;s+=2){var a=f[s],c=f[s+1];if(a){var d=t+a;if(\",\"!==c&&void 0!==c){var p=i(r,c,o);n(p,d)}else e.push(d)}}};return n(0,\"\"),e},f=function(r){var e={nodes:r.split(\";\"),syms:[],symCount:0};return r.match(\":\")&&o(e),u(e)};e.exports=f},{\"../encoding\":1,\"./symbols\":3}]},{},[2])(2)}),function(r){if(\"object\"==typeof exports&&\"undefined\"!=typeof module)module.exports=r();else if(\"function\"==typeof define&&define.amd)define([],r);else{var e;e=\"undefined\"!=typeof window?window:\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:this,e.unpack=r()}}(function(){return function r(e,n,o){function t(u,f){if(!n[u]){if(!e[u]){var s=\"function\"==typeof _dereq_&&_dereq_;if(!f&&s)return s(u,!0);if(i)return i(u,!0);var a=new Error(\"Cannot find module '\"+u+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var c=n[u]={exports:{}};e[u][0].call(c.exports,function(r){var n=e[u][1][r];return t(n?n:r)},c,c.exports,r,e,n,o)}return n[u].exports}for(var i=\"function\"==typeof _dereq_&&_dereq_,u=0;u<o.length;u++)t(o[u]);return t}({1:[function(r,e,n){\"use strict\";var o=36,t=\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\",i=t.split(\"\").reduce(function(r,e,n){return r[e]=n,r},{}),u=function(r){if(void 0!==t[r])return t[r];for(var e=1,n=o,i=\"\";r>=n;r-=n,e++,n*=o);for(;e--;){var u=r%o;i=String.fromCharCode((u<10?48:55)+u)+i,r=(r-u)/o}return i},f=function(r){if(void 0!==i[r])return i[r];for(var e=0,n=1,t=o,u=1;n<r.length;e+=t,n++,t*=o);for(var f=r.length-1;f>=0;f--,u*=o){var s=r.charCodeAt(f)-48;s>10&&(s-=7),e+=s*u}return e};e.exports={toAlphaCode:u,fromAlphaCode:f}},{}],2:[function(r,e,n){\"use strict\";var o=r(\"./unpack\");e.exports=function(r){var e=r.split(\"|\").reduce(function(r,e){var n=e.split(\"¦\");return r[n[0]]=n[1],r},{}),n={};return Object.keys(e).forEach(function(r){var t=o(e[r]);\"true\"===r&&(r=!0);for(var i=0;i<t.length;i++){var u=t[i];n.hasOwnProperty(u)===!0?Array.isArray(n[u])===!1?n[u]=[n[u],r]:n[u].push(r):n[u]=r}}),n}},{\"./unpack\":4}],3:[function(r,e,n){\"use strict\";var o=r(\"../encoding\");e.exports=function(r){for(var e=new RegExp(\"([0-9A-Z]+):([0-9A-Z]+)\"),n=0;n<r.nodes.length;n++){var t=e.exec(r.nodes[n]);if(!t){r.symCount=n;break}r.syms[o.fromAlphaCode(t[1])]=o.fromAlphaCode(t[2])}r.nodes=r.nodes.slice(r.symCount,r.nodes.length)}},{\"../encoding\":1}],4:[function(r,e,n){\"use strict\";var o=r(\"./symbols\"),t=r(\"../encoding\"),i=function(r,e,n){var o=t.fromAlphaCode(e);return o<r.symCount?r.syms[o]:n+o+1-r.symCount},u=function(r){var e=[],n=function n(o,t){var u=r.nodes[o];\"!\"===u[0]&&(e.push(t),u=u.slice(1));for(var f=u.split(/([A-Z0-9,]+)/g),s=0;s<f.length;s+=2){var a=f[s],c=f[s+1];if(a){var d=t+a;if(\",\"!==c&&void 0!==c){var p=i(r,c,o);n(p,d)}else e.push(d)}}};return n(0,\"\"),e},f=function(r){var e={nodes:r.split(\";\"),syms:[],symCount:0};return r.match(\":\")&&o(e),u(e)};e.exports=f},{\"../encoding\":1,\"./symbols\":3}]},{},[2])(2)}),function(r){if(\"object\"==typeof exports&&\"undefined\"!=typeof module)module.exports=r();else if(\"function\"==typeof define&&define.amd)define([],r);else{var e;e=\"undefined\"!=typeof window?window:\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:this,e.unpack=r()}}(function(){return function r(e,n,o){function t(u,f){if(!n[u]){if(!e[u]){var s=\"function\"==typeof _dereq_&&_dereq_;if(!f&&s)return s(u,!0);if(i)return i(u,!0);var a=new Error(\"Cannot find module '\"+u+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var c=n[u]={exports:{}};e[u][0].call(c.exports,function(r){var n=e[u][1][r];return t(n?n:r)},c,c.exports,r,e,n,o)}return n[u].exports}for(var i=\"function\"==typeof _dereq_&&_dereq_,u=0;u<o.length;u++)t(o[u]);return t}({1:[function(r,e,n){\"use strict\";var o=36,t=\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\",i=t.split(\"\").reduce(function(r,e,n){return r[e]=n,r},{}),u=function(r){if(void 0!==t[r])return t[r];for(var e=1,n=o,i=\"\";r>=n;r-=n,e++,n*=o);for(;e--;){var u=r%o;i=String.fromCharCode((u<10?48:55)+u)+i,r=(r-u)/o}return i},f=function(r){if(void 0!==i[r])return i[r];for(var e=0,n=1,t=o,u=1;n<r.length;e+=t,n++,t*=o);for(var f=r.length-1;f>=0;f--,u*=o){var s=r.charCodeAt(f)-48;s>10&&(s-=7),e+=s*u}return e};e.exports={toAlphaCode:u,fromAlphaCode:f}},{}],2:[function(r,e,n){\"use strict\";var o=r(\"./unpack\");e.exports=function(r){var e=r.split(\"|\").reduce(function(r,e){var n=e.split(\"¦\");return r[n[0]]=n[1],r},{}),n={};return Object.keys(e).forEach(function(r){var t=o(e[r]);\"true\"===r&&(r=!0);for(var i=0;i<t.length;i++){var u=t[i];n.hasOwnProperty(u)===!0?Array.isArray(n[u])===!1?n[u]=[n[u],r]:n[u].push(r):n[u]=r}}),n}},{\"./unpack\":4}],3:[function(r,e,n){\"use strict\";var o=r(\"../encoding\");e.exports=function(r){for(var e=new RegExp(\"([0-9A-Z]+):([0-9A-Z]+)\"),n=0;n<r.nodes.length;n++){var t=e.exec(r.nodes[n]);if(!t){r.symCount=n;break}r.syms[o.fromAlphaCode(t[1])]=o.fromAlphaCode(t[2])}r.nodes=r.nodes.slice(r.symCount,r.nodes.length)}},{\"../encoding\":1}],4:[function(r,e,n){\"use strict\";var o=r(\"./symbols\"),t=r(\"../encoding\"),i=function(r,e,n){var o=t.fromAlphaCode(e);return o<r.symCount?r.syms[o]:n+o+1-r.symCount},u=function(r){var e=[],n=function n(o,t){var u=r.nodes[o];\"!\"===u[0]&&(e.push(t),u=u.slice(1));for(var f=u.split(/([A-Z0-9,]+)/g),s=0;s<f.length;s+=2){var a=f[s],c=f[s+1];if(a){var d=t+a;if(\",\"!==c&&void 0!==c){var p=i(r,c,o);n(p,d)}else e.push(d)}}};return n(0,\"\"),e},f=function(r){var e={nodes:r.split(\";\"),syms:[],symCount:0};return r.match(\":\")&&o(e),u(e)};e.exports=f},{\"../encoding\":1,\"./symbols\":3}]},{},[2])(2)});\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],2:[function(_dereq_,module,exports){\nmodule.exports={\n  \"author\": \"Spencer Kelly <spencermountain@gmail.com> (http://spencermounta.in)\",\n  \"name\": \"compromise\",\n  \"description\": \"natural language processing in the browser\",\n  \"version\": \"11.13.2\",\n  \"main\": \"./builds/compromise.js\",\n  \"unpkg\": \"./builds/compromise.min.js\",\n  \"types\": \"./compromise.d.ts\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/nlp-compromise/compromise.git\"\n  },\n  \"scripts\": {\n    \"test\": \"tape \\\"./test/unit/**/*.test.js\\\" | tap-dancer\",\n    \"test:spec\": \"tape \\\"./test/unit/**/*.test.js\\\" | tap-spec\",\n    \"testb\": \"TESTENV=prod tape \\\"./test/unit/**/*.test.js\\\" | tap-spec\",\n    \"buildTest\": \"TESTENV=prod node ./scripts/test.js\",\n    \"test:types\": \"tsc --project test/types\",\n    \"browserTest\": \"node ./scripts/browserTest.js\",\n    \"benchmark\": \"node ./scripts/benchmark.js\",\n    \"build\": \"node ./scripts/build/index.js\",\n    \"pack\": \"node ./scripts/pack.js\",\n    \"prepublishOnly\": \"node ./scripts/prepublish\",\n    \"postpublish\": \"node ./scripts/postpublish\",\n    \"watch\": \"amble ./scratch.js\",\n    \"filesize\": \"node ./scripts/lib/filesize.js\",\n    \"coverage\": \"node ./scripts/postpublish/coverage.js\",\n    \"lint\": \"node ./scripts/prepublish/linter.js\"\n  },\n  \"files\": [\n    \"builds/\",\n    \"docs/\",\n    \"compromise.d.ts\"\n  ],\n  \"dependencies\": {\n    \"efrt-unpack\": \"2.0.3\"\n  },\n  \"devDependencies\": {\n    \"@babel/core\": \"7.3.4\",\n    \"@babel/preset-env\": \"7.3.4\",\n    \"amble\": \"0.0.7\",\n    \"babelify\": \"10.0.0\",\n    \"babili\": \"0.1.4\",\n    \"browserify\": \"16.2.3\",\n    \"chalk\": \"2.4.2\",\n    \"codecov\": \"3.2.0\",\n    \"compromise-plugin\": \"0.0.8\",\n    \"derequire\": \"2.0.6\",\n    \"nyc\": \"13.3.0\",\n    \"shelljs\": \"0.8.3\",\n    \"tap-dancer\": \"0.1.2\",\n    \"terser\": \"3.17.0\",\n    \"tape\": \"4.10.1\"\n  },\n  \"license\": \"MIT\"\n}\n\n},{}],3:[function(_dereq_,module,exports){\n'use strict';\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar tagset = _dereq_('./tags'); // https://stackoverflow.com/questions/9781218/how-to-change-node-jss-console-font-color\n\n\nvar c = {\n  reset: '\\x1b[0m',\n  red: '\\x1b[31m',\n  green: '\\x1b[32m',\n  yellow: '\\x1b[33m',\n  blue: '\\x1b[34m',\n  magenta: '\\x1b[35m',\n  cyan: '\\x1b[36m',\n  black: '\\x1b[30m'\n}; //dont use colors on client-side\n\nif (typeof module === 'undefined') {\n  Object.keys(c).forEach(function (k) {\n    c[k] = '';\n  });\n} //coerce any input into a string\n\n\nexports.ensureString = function (input) {\n  if (typeof input === 'string') {\n    return input;\n  } else if (typeof input === 'number') {\n    return String(input);\n  }\n\n  return '';\n}; //coerce any input into a string\n\n\nexports.ensureObject = function (input) {\n  if (_typeof(input) !== 'object') {\n    return {};\n  }\n\n  if (input === null || input instanceof Array) {\n    return {};\n  }\n\n  return input;\n};\n\nexports.titleCase = function (str) {\n  return str.charAt(0).toUpperCase() + str.substr(1);\n}; //shallow-clone an object\n\n\nexports.copy = function (o) {\n  var o2 = {};\n  o = exports.ensureObject(o);\n  Object.keys(o).forEach(function (k) {\n    o2[k] = o[k];\n  });\n  return o2;\n};\n\nexports.extend = function (obj, a) {\n  obj = exports.copy(obj);\n  var keys = Object.keys(a);\n\n  for (var i = 0; i < keys.length; i++) {\n    obj[keys[i]] = a[keys[i]];\n  }\n\n  return obj;\n}; //colorization\n\n\nexports.green = function (str) {\n  return c.green + str + c.reset;\n};\n\nexports.red = function (str) {\n  return c.red + str + c.reset;\n};\n\nexports.blue = function (str) {\n  return c.blue + str + c.reset;\n};\n\nexports.magenta = function (str) {\n  return c.magenta + str + c.reset;\n};\n\nexports.cyan = function (str) {\n  return c.cyan + str + c.reset;\n};\n\nexports.yellow = function (str) {\n  return c.yellow + str + c.reset;\n};\n\nexports.black = function (str) {\n  return c.black + str + c.reset;\n};\n\nexports.printTag = function (tag) {\n  if (tagset[tag]) {\n    var color = tagset[tag].color || 'blue';\n    return exports[color](tag);\n  }\n\n  return tag;\n};\n\nexports.printTerm = function (t) {\n  var tags = Object.keys(t.tags);\n\n  for (var i = 0; i < tags.length; i++) {\n    if (tagset[tags[i]]) {\n      var color = tagset[tags[i]].color || 'black';\n      return exports[color](t.out('text'));\n    }\n  }\n\n  return c.reset + t.plaintext + c.reset;\n};\n\nexports.leftPad = function (str, width, char) {\n  char = char || ' ';\n  str = str.toString();\n\n  while (str.length < width) {\n    str += char;\n  }\n\n  return str;\n};\n\nexports.isArray = function (arr) {\n  return Object.prototype.toString.call(arr) === '[object Array]';\n};\n\nexports.isObject = function (obj) {\n  return obj === Object(obj);\n};\n\n},{\"./tags\":137}],4:[function(_dereq_,module,exports){\n(function (global){\n'use strict';\n\nvar buildText = _dereq_('./text/build');\n\nvar pkg = _dereq_('../package.json');\n\nvar log = _dereq_('./log');\n\nvar unpack = _dereq_('./world/unpack');\n\nvar world = _dereq_('./world');\n\nvar w = world.w; //the main function\n\nvar nlp = function nlp(str, lex) {\n  if (lex) {\n    w.plugin({\n      words: lex\n    });\n  }\n\n  var doc = buildText(str, w);\n  doc.tagger();\n  return doc;\n}; //this is used, atleast, for testing the packing\n\n\nnlp.unpack = function (plugin) {\n  return unpack(plugin);\n}; //this is handy\n\n\nnlp.version = pkg.version; //turn-on some debugging\n\nnlp.verbose = function (str) {\n  log.enable(str);\n}; //same as main method, except with no POS-tagging.\n\n\nnlp.tokenize = function (str) {\n  return buildText(str);\n}; //uncompress user-submitted lexicon\n\n\nnlp.plugin = function (plugin) {\n  w.plugin(plugin);\n}; //contribute words to the lexicon\n\n\nnlp.addWords = function (lex) {\n  w.plugin({\n    words: lex\n  });\n};\n\nnlp.addTags = function (tags) {\n  w.plugin({\n    tags: tags\n  });\n};\n\nnlp.addRegex = function (regex) {\n  w.plugin({\n    regex: regex\n  });\n};\n\nnlp.addPatterns = function (patterns) {\n  w.plugin({\n    patterns: patterns\n  });\n};\n\nnlp.addPlurals = function (plurals) {\n  w.plugin({\n    plurals: plurals\n  });\n};\n\nnlp.addConjugations = function (conj) {\n  w.plugin({\n    conjugations: conj\n  });\n}; //make a weird, half-copy of this method\n\n\nnlp.clone = function () {\n  var w2 = world.reBuild(); //this is weird, but it's okay\n\n  var nlp2 = function nlp2(str, lex) {\n    if (lex) {\n      w2.plugin({\n        words: lex\n      });\n    }\n\n    var doc = buildText(str, w2);\n    doc.tagger();\n    return doc;\n  };\n\n  nlp2.tokenize = nlp.tokenize;\n  nlp2.verbose = nlp.verbose;\n  nlp2.version = nlp.version;\n  ['Words', 'Tags', 'Regex', 'Patterns', 'Plurals', 'Conjugations'].forEach(function (fn) {\n    nlp2['add' + fn] = function (obj) {\n      w2['add' + fn](obj);\n    };\n  });\n  return nlp2;\n}; //and then all-the-exports...\n\n\nif (typeof self !== 'undefined') {\n  self.nlp = nlp; // Web Worker\n} else if (typeof window !== 'undefined') {\n  window.nlp = nlp; // Browser\n} else if (typeof global !== 'undefined') {\n  global.nlp = nlp; // NodeJS\n} //don't forget amd!\n\n\nif (typeof define === 'function' && define.amd) {\n  define(nlp);\n} //then for some reason, do this too!\n\n\nif (typeof module !== 'undefined') {\n  module.exports = nlp;\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"../package.json\":2,\"./log\":6,\"./text/build\":190,\"./world\":215,\"./world/unpack\":223}],5:[function(_dereq_,module,exports){\n'use strict';\n\nvar fns = _dereq_('../fns'); // const colors = {\n//   'Person': '#6393b9',\n//   'Pronoun': '#81acce',\n//   'Noun': 'steelblue',\n//   'Verb': 'palevioletred',\n//   'Adverb': '#f39c73',\n//   'Adjective': '#b3d3c6',\n//   'Determiner': '#d3c0b3',\n//   'Preposition': '#9794a8',\n//   'Conjunction': '#c8c9cf',\n//   'Value': 'palegoldenrod',\n//   'Expression': '#b3d3c6'\n// };\n\n\nvar tag = function tag(t, pos, reason) {\n  var title = t.normal || '[' + t.silent_term + ']';\n  title = fns.leftPad('\\'' + title + '\\'', 12);\n  title += '  ->   ' + pos;\n  title += fns.leftPad(reason || '', 15);\n  console.log('%c' + title, ' color: #a2c99c');\n};\n\nvar untag = function untag(t, pos, reason) {\n  var title = t.normal || '[' + t.silent_term + ']';\n  title = fns.leftPad('\\'' + title + '\\'', 12);\n  title += '  ~*   ' + pos;\n  title += '    ' + (reason || '');\n  console.log('%c' + title, ' color: #b66a6a');\n};\n\nmodule.exports = {\n  tag: tag,\n  untag: untag\n};\n\n},{\"../fns\":3}],6:[function(_dereq_,module,exports){\n'use strict';\n\nvar client = _dereq_('./client');\n\nvar server = _dereq_('./server');\n\nvar _enable = false;\nmodule.exports = {\n  enable: function enable(str) {\n    if (str === undefined) {\n      str = true;\n    }\n\n    _enable = str;\n  },\n  tag: function tag(t, pos, reason) {\n    if (_enable === true || _enable === 'tagger') {\n      if (typeof window !== 'undefined') {\n        client.tag(t, pos, reason);\n      } else {\n        server.tag(t, pos, reason);\n      }\n    }\n  },\n  unTag: function unTag(t, pos, reason) {\n    if (_enable === true || _enable === 'tagger') {\n      if (typeof window !== 'undefined') {\n        client.untag(t, pos, reason);\n      } else {\n        server.untag(t, pos, reason);\n      }\n    }\n  }\n};\n\n},{\"./client\":5,\"./server\":7}],7:[function(_dereq_,module,exports){\n'use strict';\n\nvar fns = _dereq_('../fns'); //use weird bash escape things for some colors\n\n\nvar tag = function tag(t, pos, reason) {\n  var title = t.normal || '[' + t.silent_term + ']';\n  title = fns.yellow(title);\n  title = fns.leftPad('\\'' + title + '\\'', 20);\n  title += '  ->   ' + fns.printTag(pos);\n  title = fns.leftPad(title, 54);\n  console.log('       ' + title + '(' + fns.cyan(reason || '') + ')');\n};\n\nvar untag = function untag(t, pos, reason) {\n  var title = '-' + t.normal + '-';\n  title = fns.red(title);\n  title = fns.leftPad(title, 20);\n  title += '  ~*   ' + fns.red(pos);\n  title = fns.leftPad(title, 54);\n  console.log('       ' + title + '(' + fns.red(reason || '') + ')');\n};\n\nmodule.exports = {\n  tag: tag,\n  untag: untag\n};\n\n},{\"../fns\":3}],8:[function(_dereq_,module,exports){\n\"use strict\";\n\nmodule.exports = {\n  fns: _dereq_('./fns'),\n  Terms: _dereq_('./terms')\n};\n\n},{\"./fns\":3,\"./terms\":165}],9:[function(_dereq_,module,exports){\n'use strict';\n\nvar Text = _dereq_('../../text'); //the Acronym() subset class\n\n\nvar methods = {\n  stripPeriods: function stripPeriods() {\n    this.list.forEach(function (ts) {\n      ts.terms.forEach(function (t) {\n        var chars = t._text.split('.');\n\n        if (chars.length > 2) {\n          t.text = chars.join('');\n        }\n      });\n    });\n    return this;\n  },\n  addPeriods: function addPeriods() {\n    this.list.forEach(function (ts) {\n      ts.terms.forEach(function (t) {\n        var chars = t._text.split('.');\n\n        if (chars.length > 2) {\n          var str = t._text.replace(/\\./g, '');\n\n          t.text = str.split('').join('.') + '.';\n        }\n      });\n    });\n    return this;\n  },\n  data: function data() {\n    return this.terms().list.map(function (ts) {\n      var t = ts.terms[0];\n      var parsed = t.text.toUpperCase().replace(/\\./g, '').split('');\n      return {\n        periods: parsed.join('.'),\n        normal: parsed.join(''),\n        text: t.text\n      };\n    });\n  }\n};\n\nvar find = function find(r, n) {\n  r = r.match('#Acronym');\n\n  if (typeof n === 'number') {\n    r = r.get(n);\n  }\n\n  return r;\n};\n\nmodule.exports = Text.makeSubset(methods, find);\n\n},{\"../../text\":192}],10:[function(_dereq_,module,exports){\n'use strict';\n\nvar Text = _dereq_('../../text');\n\nvar fns = _dereq_('./methods'); //the Adjectives() subset class\n//is this an adjective we want to goof-around with?\n\n\nvar shouldConvert = function shouldConvert(str, words) {\n  if (!str || str.length <= 3) {\n    return false;\n  }\n\n  if (words[str] === 'Comparable') {\n    return true;\n  }\n\n  if (words[str] === 'Adjective') {\n    return false;\n  } //has space\n\n\n  if (str.indexOf(' ') !== -1) {\n    return false;\n  }\n\n  return true;\n};\n\nvar methods = {\n  data: function data() {\n    var _this = this;\n\n    return this.list.map(function (ts) {\n      var str = ts.out('normal');\n      var obj = {\n        normal: str,\n        text: _this.out('text'),\n        comparative: 'more ' + str,\n        superlative: 'most ' + str,\n        adverbForm: null,\n        nounForm: null // verbForm: null\n\n      };\n\n      if (shouldConvert(str, _this.world().words) === true) {\n        obj.comparative = fns.toComparative(str) || obj.comparative;\n        obj.superlative = fns.toSuperlative(str) || obj.superlative;\n        obj.adverbForm = fns.toAdverb(str);\n        obj.nounForm = fns.toNoun(str); // obj.verbForm = fns.toVerb(str);\n      }\n\n      return obj;\n    });\n  }\n};\n\nvar find = function find(r, n) {\n  r = r.match('#Adjective');\n\n  if (typeof n === 'number') {\n    r = r.get(n);\n  }\n\n  return r;\n};\n\nmodule.exports = Text.makeSubset(methods, find);\n\n},{\"../../text\":192,\"./methods\":11}],11:[function(_dereq_,module,exports){\n'use strict';\n\nmodule.exports = {\n  toNoun: _dereq_('./toNoun'),\n  toSuperlative: _dereq_('./toSuperlative'),\n  toComparative: _dereq_('./toComparative'),\n  toAdverb: _dereq_('./toAdverb'),\n  toVerb: _dereq_('./toVerb')\n};\n\n},{\"./toAdverb\":12,\"./toComparative\":13,\"./toNoun\":14,\"./toSuperlative\":15,\"./toVerb\":16}],12:[function(_dereq_,module,exports){\n//turn 'quick' into 'quickly'\n'use strict';\n\nvar not_matches = [/airs$/, /ll$/, /ee.$/, /ile$/, /y$/];\n\nvar irregulars = _dereq_('../../../world/more-data/irregularAdjectives').toAdverb;\n\nvar transforms = [{\n  reg: /al$/i,\n  repl: 'ally'\n}, {\n  reg: /ly$/i,\n  repl: 'ly'\n}, {\n  reg: /(.{3})y$/i,\n  repl: '$1ily'\n}, {\n  reg: /que$/i,\n  repl: 'quely'\n}, {\n  reg: /ue$/i,\n  repl: 'uly'\n}, {\n  reg: /ic$/i,\n  repl: 'ically'\n}, {\n  reg: /ble$/i,\n  repl: 'bly'\n}, {\n  reg: /l$/i,\n  repl: 'ly'\n}];\n\nvar adj_to_adv = function adj_to_adv(str) {\n  if (irregulars.hasOwnProperty(str) === true) {\n    return irregulars[str];\n  }\n\n  for (var i = 0; i < not_matches.length; i++) {\n    if (not_matches[i].test(str) === true) {\n      return null;\n    }\n  }\n\n  for (var _i = 0; _i < transforms.length; _i++) {\n    if (transforms[_i].reg.test(str) === true) {\n      return str.replace(transforms[_i].reg, transforms[_i].repl);\n    }\n  }\n\n  return str + 'ly';\n}; // console.log(adj_to_adv('good'));\n\n\nmodule.exports = adj_to_adv;\n\n},{\"../../../world/more-data/irregularAdjectives\":218}],13:[function(_dereq_,module,exports){\n//turn 'quick' into 'quickly'\n'use strict';\n\nvar do_rules = [/ght$/, /nge$/, /ough$/, /ain$/, /uel$/, /[au]ll$/, /ow$/, /old$/, /oud$/, /e[ae]p$/];\nvar dont_rules = [/ary$/, /ous$/];\n\nvar irregulars = _dereq_('../../../world/more-data/irregularAdjectives').toComparative;\n\nvar transforms = [{\n  reg: /y$/i,\n  repl: 'ier'\n}, {\n  reg: /([aeiou])t$/i,\n  repl: '$1tter'\n}, {\n  reg: /([aeou])de$/i,\n  repl: '$1der'\n}, {\n  reg: /nge$/i,\n  repl: 'nger'\n}];\n\nvar to_comparative = function to_comparative(str) {\n  //known-irregulars\n  if (irregulars.hasOwnProperty(str)) {\n    return irregulars[str];\n  } //known-transforms\n\n\n  for (var i = 0; i < transforms.length; i++) {\n    if (transforms[i].reg.test(str) === true) {\n      return str.replace(transforms[i].reg, transforms[i].repl);\n    }\n  } //dont-patterns\n\n\n  for (var _i = 0; _i < dont_rules.length; _i++) {\n    if (dont_rules[_i].test(str) === true) {\n      return null;\n    }\n  } //do-patterns\n\n\n  for (var _i2 = 0; _i2 < do_rules.length; _i2++) {\n    if (do_rules[_i2].test(str) === true) {\n      return str + 'er';\n    }\n  } //easy-one\n\n\n  if (/e$/.test(str) === true) {\n    return str + 'r';\n  }\n\n  return str + 'er'; // return null;\n}; // console.log(to_comparative('big'));\n\n\nmodule.exports = to_comparative;\n\n},{\"../../../world/more-data/irregularAdjectives\":218}],14:[function(_dereq_,module,exports){\n'use strict'; //convert 'cute' to 'cuteness'\n\nvar irregulars = {\n  clean: 'cleanliness',\n  naivety: 'naivety',\n  hurt: 'hurt'\n};\nvar transforms = [{\n  reg: /y$/,\n  repl: 'iness'\n}, {\n  reg: /le$/,\n  repl: 'ility'\n}, {\n  reg: /ial$/,\n  repl: 'y'\n}, {\n  reg: /al$/,\n  repl: 'ality'\n}, {\n  reg: /ting$/,\n  repl: 'ting'\n}, {\n  reg: /ring$/,\n  repl: 'ring'\n}, {\n  reg: /bing$/,\n  repl: 'bingness'\n}, {\n  reg: /sing$/,\n  repl: 'se'\n}, {\n  reg: /ing$/,\n  repl: 'ment'\n}, {\n  reg: /ess$/,\n  repl: 'essness'\n}, {\n  reg: /ous$/,\n  repl: 'ousness'\n}];\n\nvar to_noun = function to_noun(w) {\n  if (irregulars.hasOwnProperty(w)) {\n    return irregulars[w];\n  }\n\n  var lastChar = w.charAt(w.length - 1);\n\n  if (lastChar === 'w' || lastChar === 's') {\n    return null;\n  }\n\n  for (var i = 0; i < transforms.length; i++) {\n    if (transforms[i].reg.test(w) === true) {\n      return w.replace(transforms[i].reg, transforms[i].repl);\n    }\n  }\n\n  return w + 'ness';\n};\n\nmodule.exports = to_noun; // console.log(to_noun(\"great\"))\n\n},{}],15:[function(_dereq_,module,exports){\n//turn 'quick' into 'quickest'\n'use strict';\n\nvar do_rules = [/ght$/, /nge$/, /ough$/, /ain$/, /uel$/, /[au]ll$/, /ow$/, /oud$/, /...p$/];\nvar dont_rules = [/ary$/];\n\nvar irregulars = _dereq_('../../../world/more-data/irregularAdjectives').toSuperlative;\n\nvar transforms = [{\n  reg: /y$/i,\n  repl: 'iest'\n}, {\n  reg: /([aeiou])t$/i,\n  repl: '$1ttest'\n}, {\n  reg: /([aeou])de$/i,\n  repl: '$1dest'\n}, {\n  reg: /nge$/i,\n  repl: 'ngest'\n}, {\n  reg: /([aeiou])te$/i,\n  repl: '$1test'\n}];\n\nvar to_superlative = function to_superlative(str) {\n  //irregulars\n  if (irregulars.hasOwnProperty(str)) {\n    return irregulars[str];\n  } //known transforms\n\n\n  for (var i = 0; i < transforms.length; i++) {\n    if (transforms[i].reg.test(str)) {\n      return str.replace(transforms[i].reg, transforms[i].repl);\n    }\n  } //dont-rules\n\n\n  for (var _i = 0; _i < dont_rules.length; _i++) {\n    if (dont_rules[_i].test(str) === true) {\n      return null;\n    }\n  } //do-rules\n\n\n  for (var _i2 = 0; _i2 < do_rules.length; _i2++) {\n    if (do_rules[_i2].test(str) === true) {\n      if (str.charAt(str.length - 1) === 'e') {\n        return str + 'st';\n      }\n\n      return str + 'est';\n    }\n  }\n\n  return str + 'est';\n};\n\nmodule.exports = to_superlative; // console.log(to_superlative(\"great\"))\n\n},{\"../../../world/more-data/irregularAdjectives\":218}],16:[function(_dereq_,module,exports){\n'use strict'; //turn an adjective like 'soft' into a verb like 'soften'\n//(don't do words like 'green' -> 'greenen')\n\nvar irregulars = {\n  red: 'redden',\n  sad: 'sadden',\n  fat: 'fatten'\n};\n\nvar toVerb = function toVerb(str) {\n  if (irregulars.hasOwnProperty(str) === true) {\n    return irregulars[str];\n  }\n\n  if (/e$/.test(str) === true) {\n    return str + 'n';\n  }\n\n  return str + 'en';\n};\n\nmodule.exports = toVerb;\n\n},{}],17:[function(_dereq_,module,exports){\n'use strict';\n\nvar Text = _dereq_('../../text');\n\nvar toAdjective = _dereq_('./toAdjective'); //the () subset class\n\n\nvar methods = {\n  data: function data() {\n    return this.terms().list.map(function (ts) {\n      var t = ts.terms[0];\n      return {\n        adjectiveForm: toAdjective(t.normal),\n        normal: t.normal,\n        text: t.text\n      };\n    });\n  }\n};\n\nvar find = function find(r, n) {\n  r = r.splitAfter('#Comma');\n  r = r.match('#Adverb+');\n\n  if (typeof n === 'number') {\n    r = r.get(n);\n  }\n\n  return r;\n};\n\nmodule.exports = Text.makeSubset(methods, find);\n\n},{\"../../text\":192,\"./toAdjective\":18}],18:[function(_dereq_,module,exports){\n//turns 'quickly' into 'quick'\n'use strict';\n\nvar irregulars = {\n  'idly': 'idle',\n  'sporadically': 'sporadic',\n  'basically': 'basic',\n  'grammatically': 'grammatical',\n  'alphabetically': 'alphabetical',\n  'economically': 'economical',\n  'conically': 'conical',\n  'politically': 'political',\n  'vertically': 'vertical',\n  'practically': 'practical',\n  'theoretically': 'theoretical',\n  'critically': 'critical',\n  'fantastically': 'fantastic',\n  'mystically': 'mystical',\n  'pornographically': 'pornographic',\n  'fully': 'full',\n  'jolly': 'jolly',\n  'wholly': 'whole'\n};\nvar transforms = [{\n  'reg': /bly$/i,\n  'repl': 'ble'\n}, {\n  'reg': /gically$/i,\n  'repl': 'gical'\n}, {\n  'reg': /([rsdh])ically$/i,\n  'repl': '$1ical'\n}, {\n  'reg': /ically$/i,\n  'repl': 'ic'\n}, {\n  'reg': /uly$/i,\n  'repl': 'ue'\n}, {\n  'reg': /ily$/i,\n  'repl': 'y'\n}, {\n  'reg': /(.{3})ly$/i,\n  'repl': '$1'\n}];\n\nvar toAdjective = function toAdjective(str) {\n  if (irregulars.hasOwnProperty(str)) {\n    return irregulars[str];\n  }\n\n  for (var i = 0; i < transforms.length; i++) {\n    if (transforms[i].reg.test(str) === true) {\n      return str.replace(transforms[i].reg, transforms[i].repl);\n    }\n  }\n\n  return str;\n}; // console.log(toAdjective('quickly'))\n\n\nmodule.exports = toAdjective;\n\n},{}],19:[function(_dereq_,module,exports){\n'use strict'; //the plumbing to turn two words into a contraction\n\nvar combine = function combine(a, b) {\n  b.whitespace.after = a.whitespace.after;\n  a.whitespace.after = '';\n  b.whitespace.before = '';\n  a.silent_term = a.text;\n  b.silent_term = b.text;\n  b.text = '';\n  a.tag('Contraction', 'new-contraction');\n  b.tag('Contraction', 'new-contraction');\n};\n\nvar irregulars = {\n  can: 'can\\'t',\n  will: 'won\\'t'\n};\n\nvar contract = function contract(ts) {\n  if (ts.expanded === false || ts.match('#Contraction').found) {\n    return ts;\n  } //he is -> he's\n\n\n  ts.match('(#Noun|#QuestionWord) is').list.forEach(function (ls) {\n    combine(ls.terms[0], ls.terms[1]);\n    ls.terms[0].text += '\\'s';\n    ls.contracted = true;\n  }); //he did -> he'd\n\n  ts.match('#PronNoun did').list.forEach(function (ls) {\n    combine(ls.terms[0], ls.terms[1]);\n    ls.terms[0].text += '\\'d';\n    ls.contracted = true;\n  }); //how do -> how'd\n\n  ts.match('#QuestionWord (did|do)').list.forEach(function (ls) {\n    combine(ls.terms[0], ls.terms[1]);\n    ls.terms[0].text += '\\'d';\n    ls.contracted = true;\n  }); //he would -> he'd\n\n  ts.match('#Noun (could|would)').list.forEach(function (ls) {\n    combine(ls.terms[0], ls.terms[1]);\n    ls.terms[0].text += '\\'d';\n    ls.contracted = true;\n  }); //they are -> they're\n\n  ts.match('(they|we|you) are').list.forEach(function (ls) {\n    combine(ls.terms[0], ls.terms[1]);\n    ls.terms[0].text += '\\'re';\n    ls.contracted = true;\n  }); //i am -> i'm\n\n  ts.match('i am').list.forEach(function (ls) {\n    combine(ls.terms[0], ls.terms[1]);\n    ls.terms[0].text += '\\'m';\n    ls.contracted = true;\n  }); //they will -> they'll\n\n  ts.match('(#Noun|#QuestionWord) will').list.forEach(function (ls) {\n    combine(ls.terms[0], ls.terms[1]);\n    ls.terms[0].text += '\\'ll';\n    ls.contracted = true;\n  }); //they have -> they've\n\n  ts.match('(they|we|you|i) have').list.forEach(function (ls) {\n    combine(ls.terms[0], ls.terms[1]);\n    ls.terms[0].text += '\\'ve';\n    ls.contracted = true;\n  }); //is not -> isn't\n\n  ts.match('(#Copula|#Modal|do|does|have|has|can|will) not').list.forEach(function (ls) {\n    combine(ls.terms[0], ls.terms[1]); //can't, won't\n\n    if (irregulars.hasOwnProperty(ls.terms[0].text) === true) {\n      ls.terms[0].text = irregulars[ls.terms[0].text];\n    } else {\n      ls.terms[0].text += 'n\\'t';\n    }\n\n    ls.contracted = true;\n  });\n  return ts;\n};\n\nmodule.exports = contract;\n\n},{}],20:[function(_dereq_,module,exports){\n'use strict';\n\nvar Terms = _dereq_('../../paths').Terms;\n\nvar contract = _dereq_('./contract');\n\nvar expand = _dereq_('./expand');\n\nvar ContractionCl = function ContractionCl(arr, world, original) {\n  Terms.call(this, arr, world, original);\n}; //Inherit properties\n\n\nContractionCl.prototype = Object.create(Terms.prototype);\n\nContractionCl.prototype.data = function () {\n  var expanded = expand(this.clone());\n  var contracted = contract(this.clone());\n  return {\n    text: this.out('text'),\n    normal: this.out('normal'),\n    expanded: {\n      normal: expanded.out('normal'),\n      text: expanded.out('text')\n    },\n    contracted: {\n      normal: contracted.out('normal'),\n      text: contracted.out('text')\n    },\n    isContracted: Boolean(this.contracted)\n  };\n};\n\nContractionCl.prototype.expand = function () {\n  return expand(this);\n};\n\nContractionCl.prototype.contract = function () {\n  return contract(this);\n};\n\nmodule.exports = ContractionCl;\n\n},{\"../../paths\":8,\"./contract\":19,\"./expand\":21}],21:[function(_dereq_,module,exports){\n'use strict'; //turn `i'd` into `i would`\n\nvar expand = function expand(ts) {\n  if (ts.contracted === false) {\n    return ts;\n  }\n\n  ts.terms.forEach(function (t) {\n    if (t.silent_term) {\n      //this term also needs a space now too\n      if (!t.text) {\n        t.whitespace.before = ' ';\n      }\n\n      t._text = t.silent_term; //handle (some) capitalization\n\n      if (t.tags.TitleCase) {\n        t.toTitleCase();\n      }\n\n      t.normalize();\n      t.silent_term = null;\n      t.unTag('Contraction', 'expanded');\n    }\n  });\n  return ts;\n};\n\nmodule.exports = expand;\n\n},{}],22:[function(_dereq_,module,exports){\n'use strict'; //find contractable, expanded-contractions\n\nvar find = function find(r) {\n  var remain = r.not('#Contraction');\n  var m = remain.match('(#Noun|#QuestionWord) (#Copula|did|do|have|had|could|would|will)');\n  m.concat(remain.match('(they|we|you|i) have'));\n  m.concat(remain.match('i am'));\n  m.concat(remain.match('(#Copula|#Modal|do|does|have|has|can|will) not'));\n  m.list.forEach(function (ts) {\n    ts.expanded = true;\n  });\n  return m;\n};\n\nmodule.exports = find;\n\n},{}],23:[function(_dereq_,module,exports){\n'use strict';\n\nvar Text = _dereq_('../../text');\n\nvar ContractionCl = _dereq_('./contraction');\n\nvar findPossible = _dereq_('./findPossible'); //the Contractions() subset class\n\n\nvar methods = {\n  contract: function contract() {\n    this.list.forEach(function (ts) {\n      return ts.contract();\n    });\n    return this;\n  },\n  expand: function expand() {\n    this.list.forEach(function (ts) {\n      return ts.expand();\n    });\n    return this;\n  },\n  contracted: function contracted() {\n    this.list = this.list.filter(function (ts) {\n      return ts.contracted;\n    });\n    return this;\n  },\n  expanded: function expanded() {\n    this.list = this.list.filter(function (ts) {\n      return !ts.contracted;\n    });\n    return this;\n  }\n};\n\nvar find = function find(r, n) {\n  //find currently-contracted\n  var found = r.match('#Contraction #Contraction #Contraction?');\n  found.list = found.list.map(function (ts) {\n    var c = new ContractionCl(ts.terms, ts.world, ts.refText, ts.refTerms);\n    c.contracted = true;\n    return c;\n  }); //find currently-expanded\n\n  var expanded = findPossible(r);\n  expanded.list.forEach(function (ts) {\n    var c = new ContractionCl(ts.terms, ts.world, ts.refText, ts.refTerms);\n    c.contracted = false;\n    found.list.push(c);\n  });\n  found.sort('chronological'); //get nth element\n\n  if (typeof n === 'number') {\n    found = found.get(n);\n  }\n\n  return found;\n};\n\nmodule.exports = Text.makeSubset(methods, find);\n\n},{\"../../text\":192,\"./contraction\":20,\"./findPossible\":22}],24:[function(_dereq_,module,exports){\n'use strict';\n\nvar Terms = _dereq_('../../paths').Terms;\n\nvar parseDate = _dereq_('./parseDate');\n\nvar _Date = function _Date(arr, world, refText) {\n  Terms.call(this, arr, world, refText);\n  this.month = this.match('#Month');\n}; //Inherit properties\n\n\n_Date.prototype = Object.create(Terms.prototype);\n\n_Date.prototype.data = function () {\n  return {\n    text: this.out('text'),\n    normal: this.out('normal'),\n    date: parseDate(this)\n  };\n};\n\nmodule.exports = _Date;\n\n},{\"../../paths\":8,\"./parseDate\":28}],25:[function(_dereq_,module,exports){\n'use strict';\n\nvar Text = _dereq_('../../text');\n\nvar Date = _dereq_('./date');\n\nvar weekdays = _dereq_('./weekday');\n\nvar months = _dereq_('./month'); //the Dates() subset class\n\n\nvar methods = {\n  toShortForm: function toShortForm() {\n    this.match('#Month').terms().list.forEach(function (ts) {\n      var t = ts.terms[0];\n      months.toShortForm(t);\n    });\n    this.match('#WeekDay').terms().list.forEach(function (ts) {\n      var t = ts.terms[0];\n      weekdays.toShortForm(t);\n    });\n    return this;\n  },\n  toLongForm: function toLongForm() {\n    this.match('#Month').terms().list.forEach(function (ts) {\n      var t = ts.terms[0];\n      months.toLongForm(t);\n    });\n    this.match('#WeekDay').terms().list.forEach(function (ts) {\n      var t = ts.terms[0];\n      weekdays.toLongForm(t);\n    });\n    return this;\n  }\n};\n\nvar find = function find(r, n) {\n  var dates = r.match('#Date+');\n\n  if (typeof n === 'number') {\n    dates = dates.get(n);\n  }\n\n  dates.list = dates.list.map(function (ts) {\n    return new Date(ts.terms, ts.world, ts.refText, ts.refTerms);\n  });\n  return dates;\n};\n\nmodule.exports = Text.makeSubset(methods, find);\n\n},{\"../../text\":192,\"./date\":24,\"./month\":27,\"./weekday\":31}],26:[function(_dereq_,module,exports){\n\"use strict\";\n\n//follow the javascript scheme\n//january is 0\nexports.longMonths = {\n  'january': 0,\n  'february': 1,\n  'march': 2,\n  'april': 3,\n  'may': 4,\n  'june': 5,\n  'july': 6,\n  'august': 7,\n  'september': 8,\n  'october': 9,\n  'november': 10,\n  'december': 11\n};\nexports.shortMonths = {\n  'jan': 0,\n  'feb': 1,\n  'mar': 2,\n  'apr': 3,\n  'may': 4,\n  'jun': 5,\n  'jul': 6,\n  'aug': 7,\n  'sep': 8,\n  'oct': 9,\n  'nov': 10,\n  'dec': 11,\n  //extra ones\n  'febr': 1,\n  'sept': 8\n};\n\n},{}],27:[function(_dereq_,module,exports){\n'use strict';\n\nvar data = _dereq_('./data');\n\nvar shortMonths = data.shortMonths;\nvar longMonths = data.longMonths;\n\nvar titleCase = function titleCase(str) {\n  return str.charAt(0).toUpperCase() + str.substr(1);\n};\n\nmodule.exports = {\n  index: function index(t) {\n    if (t.tags.Month) {\n      if (longMonths[t.normal] !== undefined) {\n        return longMonths[t.normal];\n      }\n\n      if (shortMonths[t.normal] !== undefined) {\n        return shortMonths[t.normal];\n      }\n    }\n\n    return null;\n  },\n  toShortForm: function toShortForm(t) {\n    if (t.tags.Month !== undefined) {\n      if (longMonths[t.normal] !== undefined) {\n        var shorten = Object.keys(shortMonths);\n        var punct = t.getPunctuation() || '';\n        t.text = shorten[longMonths[t.normal]] + punct;\n\n        if (t.tags.TitleCase) {\n          t.text = titleCase(t.text);\n        }\n      }\n    }\n\n    t.dirty = true;\n    return t;\n  },\n  toLongForm: function toLongForm(t) {\n    if (t.tags.Month !== undefined) {\n      if (shortMonths[t.normal] !== undefined) {\n        var longer = Object.keys(longMonths);\n        var punct = t.getPunctuation() || '';\n        t.text = longer[shortMonths[t.normal]] + punct;\n\n        if (t.tags.TitleCase) {\n          t.text = titleCase(t.text);\n        }\n      }\n    }\n\n    t.dirty = true;\n    return t;\n  }\n};\n\n},{\"./data\":26}],28:[function(_dereq_,module,exports){\n'use strict';\n\nvar parseTime = _dereq_('./parseTime');\n\nvar weekdays = _dereq_('./weekday');\n\nvar months = _dereq_('./month'); //a hugely-conservative and incomplete first-pass for parsing written-dates\n//validate a day-of-month\n\n\nvar isDate = function isDate(num) {\n  if (num && num < 31 && num > 0) {\n    return true;\n  }\n\n  return false;\n}; //please change this in one thousand years\n\n\nvar isYear = function isYear(num) {\n  if (num && num > 1000 && num < 3000) {\n    return true;\n  }\n\n  return false;\n}; //\n\n\nvar parseDate = function parseDate(r) {\n  var result = {\n    month: null,\n    date: null,\n    weekday: null,\n    year: null,\n    named: null,\n    time: null\n  };\n  var m = r.match('(#Holiday|today|tomorrow|yesterday)');\n\n  if (m.found) {\n    result.named = m.out('normal');\n  }\n\n  m = r.match('#Month');\n\n  if (m.found) {\n    result.month = months.index(m.list[0].terms[0]);\n  }\n\n  m = r.match('#WeekDay');\n\n  if (m.found) {\n    result.weekday = weekdays.index(m.list[0].terms[0]);\n  }\n\n  m = r.match('#Time');\n\n  if (m.found) {\n    result.time = parseTime(r);\n    r.not('#Time'); //unsure\n  } //january fifth 1992\n\n\n  m = r.match('#Month #Value #Year');\n\n  if (m.found) {\n    var numbers = m.values().numbers();\n\n    if (isDate(numbers[0])) {\n      result.date = numbers[0];\n    }\n\n    var year = parseInt(r.match('#Year').out('normal'), 10);\n\n    if (isYear(year)) {\n      result.year = year;\n    }\n  }\n\n  if (!m.found) {\n    //january fifth,  january 1992\n    m = r.match('#Month #Value');\n\n    if (m.found) {\n      var _numbers = m.values().numbers();\n\n      var num = _numbers[0];\n\n      if (isDate(num)) {\n        result.date = num;\n      }\n    } //january 1992\n\n\n    m = r.match('#Month #Year');\n\n    if (m.found) {\n      var _num = parseInt(r.match('#Year').out('normal'), 10);\n\n      if (isYear(_num)) {\n        result.year = _num;\n      }\n    }\n  } //fifth of january\n\n\n  m = r.match('#Value of #Month');\n\n  if (m.found) {\n    var _num2 = m.values().numbers()[0];\n\n    if (isDate(_num2)) {\n      result.date = _num2;\n    }\n  }\n\n  return result;\n};\n\nmodule.exports = parseDate;\n\n},{\"./month\":27,\"./parseTime\":29,\"./weekday\":31}],29:[function(_dereq_,module,exports){\n'use strict';\n\nvar ampm = /([12]?[0-9]) ?(am|pm)/i;\nvar hourMin = /([12]?[0-9]):([0-9][0-9]) ?(am|pm)?/i; //\n\nvar isHour = function isHour(num) {\n  if (num && num > 0 && num < 25) {\n    return true;\n  }\n\n  return false;\n};\n\nvar isMinute = function isMinute(num) {\n  if (num && num > 0 && num < 60) {\n    return true;\n  }\n\n  return false;\n};\n\nvar parseTime = function parseTime(r) {\n  var result = {\n    logic: null,\n    hour: null,\n    minute: null,\n    second: null,\n    timezone: null\n  };\n  var logic = r.match('(by|before|for|during|at|until|after) #Time').firstTerm();\n\n  if (logic.found) {\n    result.logic = logic.out('normal');\n  }\n\n  var time = r.match('#Time');\n  time.terms().list.forEach(function (ts) {\n    var t = ts.terms[0]; //3pm\n\n    var m = t.text.match(ampm);\n\n    if (m !== null) {\n      result.hour = parseInt(m[1], 10);\n\n      if (m[2] === 'pm') {\n        result.hour += 12;\n      }\n\n      if (isHour(result.hour) === false) {\n        result.hour = null;\n      }\n    } //3:15\n\n\n    m = t.text.match(hourMin);\n\n    if (m !== null) {\n      result.hour = parseInt(m[1], 10);\n      result.minute = parseInt(m[2], 10);\n\n      if (!isMinute(result.minute)) {\n        result.minute = null;\n      }\n\n      if (m[3] === 'pm') {\n        result.hour += 12;\n      }\n\n      if (isHour(result.hour) === false) {\n        result.hour = null;\n      }\n    }\n  });\n  return result;\n};\n\nmodule.exports = parseTime;\n\n},{}],30:[function(_dereq_,module,exports){\n\"use strict\";\n\n//follow the javascript scheme\n//sunday is 0\nexports.longDays = {\n  'sunday': 0,\n  'monday': 1,\n  'tuesday': 2,\n  'wednesday': 3,\n  'thursday': 4,\n  'friday': 5,\n  'saturday': 6\n};\nexports.shortDays = {\n  'sun': 0,\n  'mon': 1,\n  'tues': 2,\n  'wed': 3,\n  'weds': 3,\n  'thurs': 4,\n  'fri': 5,\n  'sat': 6\n};\n\n},{}],31:[function(_dereq_,module,exports){\n'use strict';\n\nvar data = _dereq_('./data');\n\nvar shortDays = data.shortDays;\nvar longDays = data.longDays;\nmodule.exports = {\n  index: function index(t) {\n    if (t.tags.WeekDay) {\n      if (longDays[t.normal] !== undefined) {\n        return longDays[t.normal];\n      }\n\n      if (shortDays[t.normal] !== undefined) {\n        return shortDays[t.normal];\n      }\n    }\n\n    return null;\n  },\n  toShortForm: function toShortForm(t) {\n    if (t.tags.WeekDay) {\n      if (longDays[t.normal] !== undefined) {\n        var shorten = Object.keys(shortDays);\n        t.text = shorten[longDays[t.normal]];\n      }\n    }\n\n    return t;\n  },\n  toLongForm: function toLongForm(t) {\n    if (t.tags.WeekDay) {\n      if (shortDays[t.normal] !== undefined) {\n        var longer = Object.keys(longDays);\n        t.text = longer[shortDays[t.normal]];\n      }\n    }\n\n    return t;\n  }\n};\n\n},{\"./data\":30}],32:[function(_dereq_,module,exports){\n'use strict';\n\nvar Ngrams = _dereq_('./index');\n\nvar getGrams = _dereq_('./getGrams'); //like an n-gram, but only the endings of matches\n\n\nvar EndGrams = function EndGrams(arr, world, original) {\n  Ngrams.call(this, arr, world, original);\n}; //Inherit properties\n\n\nEndGrams.prototype = Object.create(Ngrams.prototype); //like an n-gram, but only the startings of matches\n\nEndGrams.find = function (r, n, size) {\n  var opts = {\n    size: [1, 2, 3, 4],\n    edge: 'end'\n  }; //only look for bigrams, for example\n\n  if (size) {\n    opts.size = [size];\n  } //fetch them\n\n\n  var arr = getGrams(r, opts);\n  r = new EndGrams(arr); //default sort\n\n  r.sort(); //grab top one, or something\n\n  if (typeof n === 'number') {\n    r = r.get(n);\n  }\n\n  return r;\n};\n\nmodule.exports = EndGrams;\n\n},{\"./getGrams\":33,\"./index\":35}],33:[function(_dereq_,module,exports){\n'use strict';\n\nvar Gram = _dereq_('./gram'); //strip contractions - remove '' term for \"it's\"\n\n\nvar noEmpty = function noEmpty(fts) {\n  return fts = fts.terms.filter(function (t) {\n    return t._text !== '';\n  });\n}; //do all grams of one size, on one termList\n\n\nvar getGrams = function getGrams(fts, n) {\n  var terms = noEmpty(fts);\n\n  if (terms.length < n) {\n    return [];\n  }\n\n  var arr = [];\n\n  for (var i = 0; i < terms.length - n + 1; i++) {\n    var gram = new Gram(terms.slice(i, i + n));\n    arr.push(gram);\n  }\n\n  return arr;\n}; //left-sided grams\n\n\nvar startGram = function startGram(fts, n) {\n  var terms = noEmpty(fts);\n\n  if (terms.length < n) {\n    return [];\n  }\n\n  var arr = [new Gram(terms.slice(0, n))];\n  return arr;\n}; //right-sided grams\n\n\nvar endGram = function endGram(fts, n) {\n  var terms = noEmpty(fts);\n\n  if (terms.length < n) {\n    return [];\n  }\n\n  var arr = [new Gram(terms.slice(terms.length - n, terms.length))];\n  return arr;\n}; //ngrams are consecutive terms of a specific size\n\n\nvar buildGrams = function buildGrams(r, options) {\n  options = options || {};\n  options.size = options.size || [1, 2, 3];\n\n  if (typeof options.size === 'number') {\n    options.size = [options.size];\n  }\n\n  var obj = {}; //collect and count all grams\n\n  options.size.forEach(function (size) {\n    r.list.forEach(function (ts) {\n      var newGrams = [];\n\n      if (options.edge === 'start') {\n        newGrams = startGram(ts, size);\n      } else if (options.edge === 'end') {\n        newGrams = endGram(ts, size);\n      } else {\n        newGrams = getGrams(ts, size);\n      }\n\n      newGrams.forEach(function (g) {\n        if (obj.hasOwnProperty(g.key)) {\n          obj[g.key].inc();\n        } else {\n          obj[g.key] = g;\n        }\n      });\n    });\n  }); //flatten to an array\n\n  var arr = Object.keys(obj).map(function (k) {\n    return obj[k];\n  });\n  return arr;\n};\n\nmodule.exports = buildGrams;\n\n},{\"./gram\":34}],34:[function(_dereq_,module,exports){\n'use strict';\n\nvar Terms = _dereq_('../../paths').Terms; //this is one-or-more terms together, sorted by frequency\n\n\nvar Gram = function Gram(arr, world, original) {\n  Terms.call(this, arr, world, original); //string to sort/uniq by\n\n  this.key = this.out('normal'); //bigram/trigram/etc\n\n  this.size = arr.length; //number of occurances\n\n  this.count = 1;\n}; //Inherit properties\n\n\nGram.prototype = Object.create(Terms.prototype);\n\nGram.prototype.inc = function () {\n  this.count += 1;\n};\n\nmodule.exports = Gram;\n\n},{\"../../paths\":8}],35:[function(_dereq_,module,exports){\n'use strict';\n\nvar Text = _dereq_('../../text');\n\nvar getGrams = _dereq_('./getGrams');\n\nvar _sort = function sort(r) {\n  r.list = r.list.sort(function (a, b) {\n    if (a.count > b.count) {\n      return -1;\n    } //(tie-braker)\n\n\n    if (a.count === b.count && (a.size > b.size || a.key.length > b.key.length)) {\n      return -1;\n    }\n\n    return 1;\n  });\n  return r;\n}; //the Ngrams() subset class\n\n\nvar methods = {\n  data: function data() {\n    return this.list.map(function (ts) {\n      return {\n        normal: ts.out('normal'),\n        count: ts.count,\n        size: ts.size\n      };\n    });\n  },\n  unigrams: function unigrams() {\n    this.list = this.list.filter(function (g) {\n      return g.size === 1;\n    });\n    return this;\n  },\n  bigrams: function bigrams() {\n    this.list = this.list.filter(function (g) {\n      return g.size === 2;\n    });\n    return this;\n  },\n  trigrams: function trigrams() {\n    this.list = this.list.filter(function (g) {\n      return g.size === 3;\n    });\n    return this;\n  },\n  //default sort the ngrams\n  sort: function sort() {\n    return _sort(this);\n  }\n};\n\nvar find = function find(r, obj) {\n  var sizes = []; //support .ngrams(3), for compat\n\n  if (typeof obj === 'number') {\n    obj = {\n      n: obj\n    };\n  }\n\n  obj = obj || {};\n  var max = obj.max || 4;\n\n  for (var i = 1; i <= max; i++) {\n    sizes.push(i);\n  } //only look for bigrams, for example\n\n\n  if (obj.size) {\n    sizes = [obj.size];\n  }\n\n  var opts = {\n    size: sizes\n  }; //fetch them\n\n  var arr = getGrams(r, opts);\n  r = new Text(arr); //default sort\n\n  r = _sort(r); //grab top one, or something\n\n  if (obj.n !== undefined) {\n    r = r.get(obj.n);\n  }\n\n  return r;\n};\n\nmodule.exports = Text.makeSubset(methods, find);\n\n},{\"../../text\":192,\"./getGrams\":33}],36:[function(_dereq_,module,exports){\n'use strict';\n\nvar Ngrams = _dereq_('./index');\n\nvar getGrams = _dereq_('./getGrams');\n\nvar StartGrams = function StartGrams(arr, world, original) {\n  Ngrams.call(this, arr, world, original);\n}; //Inherit properties\n\n\nStartGrams.prototype = Object.create(Ngrams.prototype); //like an n-gram, but only the startings of matches\n\nStartGrams.find = function (r, n, size) {\n  var opts = {\n    size: [1, 2, 3, 4],\n    edge: 'start'\n  }; //only look for bigrams, for example\n\n  if (size) {\n    opts.size = [size];\n  } //fetch them\n\n\n  var arr = getGrams(r, opts);\n  r = new StartGrams(arr); //default sort\n\n  r.sort(); //grab top one, or something\n\n  if (typeof n === 'number') {\n    r = r.get(n);\n  }\n\n  return r;\n};\n\nmodule.exports = StartGrams;\n\n},{\"./getGrams\":33,\"./index\":35}],37:[function(_dereq_,module,exports){\n'use strict'; //certain words can't be plural, like 'peace'\n\nvar hasPlural = function hasPlural(t) {\n  //end quick\n  if (!t.tags.Noun) {\n    return false;\n  }\n\n  if (t.tags.Plural) {\n    return true;\n  } //is it potentially plural?\n\n\n  var noPlural = ['Pronoun', 'Place', 'Value', 'Person', 'Month', 'WeekDay', 'RelativeDay', 'Holiday'];\n\n  for (var i = 0; i < noPlural.length; i++) {\n    if (t.tags[noPlural[i]]) {\n      return false;\n    }\n  } //terms known as un-inflectable, like 'peace'\n\n\n  if (t.tags.Uncountable === true) {\n    return false;\n  }\n\n  return true;\n};\n\nmodule.exports = hasPlural;\n\n},{}],38:[function(_dereq_,module,exports){\n'use strict';\n\nvar Text = _dereq_('../../text');\n\nvar Noun = _dereq_('./noun'); //the () subset class\n\n\nvar methods = {\n  isPlural: function isPlural() {\n    this.list = this.list.filter(function (ts) {\n      return ts.isPlural();\n    });\n    return this;\n  },\n  hasPlural: function hasPlural() {\n    return this.list.map(function (ts) {\n      return ts.hasPlural();\n    });\n  },\n  toPlural: function toPlural() {\n    this.list.forEach(function (ts) {\n      return ts.toPlural();\n    });\n    return this;\n  },\n  toSingular: function toSingular(verbose) {\n    this.list.forEach(function (ts) {\n      return ts.toSingular(verbose);\n    });\n    return this;\n  },\n  toPossessive: function toPossessive(verbose) {\n    this.list.forEach(function (ts) {\n      return ts.toPossessive(verbose);\n    });\n    return this;\n  },\n  articles: function articles() {\n    return this.list.map(function (ts) {\n      return {\n        text: ts.out('text'),\n        normal: ts.out('normal'),\n        article: ts.article()\n      };\n    });\n  }\n};\n\nvar find = function find(r, n) {\n  r = r.clauses();\n  r = r.match('#Noun+ (of|by)? the? #Noun+?'); //nouns that we don't want in these results, for weird reasons\n\n  r = r.not('#Pronoun');\n  r = r.not('(there|these)');\n  r = r.not('(#Month|#WeekDay)'); //allow Durations, Holidays\n  // //allow possessives like \"spencer's\", but not generic ones like,\n\n  r = r.not('(my|our|your|their|her|his)');\n  r = r.not('(of|for|by|the)$');\n\n  if (typeof n === 'number') {\n    r = r.get(n);\n  }\n\n  r.list = r.list.map(function (ts) {\n    return new Noun(ts.terms, ts.world, ts.refText, ts.refTerms);\n  });\n  return r;\n};\n\nmodule.exports = Text.makeSubset(methods, find);\n\n},{\"../../text\":192,\"./noun\":46}],39:[function(_dereq_,module,exports){\n'use strict';\n\nvar rules = _dereq_('./methods/data/indicators');\n\nvar prep = /([a-z]*) (of|in|by|for) [a-z]/;\n\nvar hasPlural = _dereq_('./hasPlural');\n\nvar knownPlural = {\n  i: false,\n  he: false,\n  she: false,\n  we: true,\n  they: true\n}; //is it potentially plural?\n\nvar noPlural = ['Place', 'Value', 'Person', 'Month', 'WeekDay', 'RelativeDay', 'Holiday', 'Possessive']; //first, try to guess based on existing tags\n\nvar couldEvenBePlural = function couldEvenBePlural(t) {\n  if (hasPlural(t) === false) {\n    return false;\n  }\n\n  for (var i = 0; i < noPlural.length; i++) {\n    if (t.tags[noPlural[i]]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n/** returns true, false, or null */\n\n\nvar isPlural = function isPlural(t, world) {\n  if (t.tags.Plural) {\n    return true;\n  }\n\n  if (t.tags.Singular) {\n    return false;\n  }\n\n  var str = t.normal; //whitelist a few easy ones\n\n  if (knownPlural.hasOwnProperty(str) === true) {\n    return knownPlural[str];\n  } //check given irregulars\n\n\n  if (world.plurals && world.plurals.hasOwnProperty(str) === true) {\n    return false;\n  } //check opposite-ones\n\n\n  if (world.cache.toSingular && world.cache.toSingular.hasOwnProperty(str) === true) {\n    return true;\n  } //inspect the existing tags to see if a plural is valid\n\n\n  if (couldEvenBePlural(t) === false) {\n    return null;\n  } //handle 'mayors of chicago'\n\n\n  var preposition = str.match(prep);\n\n  if (preposition !== null) {\n    str = preposition[1];\n  } //check the suffix-type rules for indications\n\n\n  for (var i = 0; i < rules.plural_indicators.length; i++) {\n    if (rules.plural_indicators[i].test(str) === true) {\n      return true;\n    }\n  }\n\n  for (var _i = 0; _i < rules.singular_indicators.length; _i++) {\n    if (rules.singular_indicators[_i].test(str) === true) {\n      return false;\n    }\n  } // a fallback 'looks check plural' rule..\n\n\n  if (/s$/.test(str) === true && /ss$/.test(str) === false && str.length > 3) {\n    //needs some lovin'\n    return true;\n  }\n\n  return false;\n};\n\nmodule.exports = isPlural; // console.log(is_plural('octopus'))\n\n},{\"./hasPlural\":37,\"./methods/data/indicators\":41}],40:[function(_dereq_,module,exports){\n'use strict'; //chooses an indefinite aricle 'a/an' for a word\n\nvar irregulars = {\n  'hour': 'an',\n  'heir': 'an',\n  'heirloom': 'an',\n  'honest': 'an',\n  'honour': 'an',\n  'honor': 'an',\n  'uber': 'an' //german u\n\n}; //pronounced letters of acronyms that get a 'an'\n\nvar an_acronyms = {\n  a: true,\n  e: true,\n  f: true,\n  h: true,\n  i: true,\n  l: true,\n  m: true,\n  n: true,\n  o: true,\n  r: true,\n  s: true,\n  x: true\n}; //'a' regexes\n\nvar a_regexs = [/^onc?e/i, //'wu' sound of 'o'\n/^u[bcfhjkqrstn][aeiou]/i, // 'yu' sound for hard 'u'\n/^eul/i];\n\nvar makeArticle = function makeArticle(t) {\n  var str = t.normal; //no 'the john smith', but 'a london hotel'\n\n  if (t.tags.Person) {\n    return '';\n  } //no a/an if it's plural\n\n\n  if (t.tags.Plural) {\n    return 'the';\n  } //explicit irregular forms\n\n\n  if (irregulars.hasOwnProperty(str)) {\n    return irregulars[str];\n  } //spelled-out acronyms\n\n\n  var firstLetter = str.substr(0, 1);\n\n  if (t.isAcronym() && an_acronyms.hasOwnProperty(firstLetter)) {\n    return 'an';\n  } //'a' regexes\n\n\n  for (var i = 0; i < a_regexs.length; i++) {\n    if (a_regexs[i].test(str)) {\n      return 'a';\n    }\n  } //basic vowel-startings\n\n\n  if (/^[aeiou]/i.test(str)) {\n    return 'an';\n  }\n\n  return 'a';\n};\n\nmodule.exports = makeArticle;\n\n},{}],41:[function(_dereq_,module,exports){\n'use strict'; //similar to plural/singularize rules, but not the same\n\nvar plural_indicators = [/(^v)ies$/i, /ises$/i, /ives$/i, /(antenn|formul|nebul|vertebr|vit)ae$/i, /(octop|vir|radi|nucle|fung|cact|stimul)i$/i, /(buffal|tomat|tornad)oes$/i, /(analy|ba|diagno|parenthe|progno|synop|the)ses$/i, /(vert|ind|cort)ices$/i, /(matr|append)ices$/i, /(x|ch|ss|sh|s|z|o)es$/i, /men$/i, /news$/i, /.tia$/i, /(^f)ves$/i, /(lr)ves$/i, /(^aeiouy|qu)ies$/i, /(m|l)ice$/i, /(cris|ax|test)es$/i, /(alias|status)es$/i, /ics$/i]; //similar to plural/singularize rules, but not the same\n\nvar singular_indicators = [/(ax|test)is$/i, /(octop|vir|radi|nucle|fung|cact|stimul)us$/i, /(octop|vir)i$/i, /(rl)f$/i, /(alias|status)$/i, /(bu)s$/i, /(al|ad|at|er|et|ed|ad)o$/i, /(ti)um$/i, /(ti)a$/i, /sis$/i, /(?:(^f)fe|(lr)f)$/i, /hive$/i, /(^aeiouy|qu)y$/i, /(x|ch|ss|sh|z)$/i, /(matr|vert|ind|cort)(ix|ex)$/i, /(m|l)ouse$/i, /(m|l)ice$/i, /(antenn|formul|nebul|vertebr|vit)a$/i, /.sis$/i, /^(?!talis|.*hu)(.*)man$/i];\nmodule.exports = {\n  singular_indicators: singular_indicators,\n  plural_indicators: plural_indicators\n};\n\n},{}],42:[function(_dereq_,module,exports){\n\"use strict\";\n\n//patterns for turning 'bus' to 'buses'\nmodule.exports = [[/(ax|test)is$/i, '$1es'], [/(octop|vir|radi|nucle|fung|cact|stimul)us$/i, '$1i'], [/(octop|vir)i$/i, '$1i'], [/(kn|l|w)ife$/i, '$1ives'], [/^((?:ca|e|ha|(?:our|them|your)?se|she|wo)l|lea|loa|shea|thie)f$/i, '$1ves'], [/^(dwar|handkerchie|hoo|scar|whar)f$/i, '$1ves'], [/(alias|status)$/i, '$1es'], [/(bu)s$/i, '$1ses'], [/(al|ad|at|er|et|ed|ad)o$/i, '$1oes'], [/([ti])um$/i, '$1a'], [/([ti])a$/i, '$1a'], [/sis$/i, 'ses'], [/(hive)$/i, '$1s'], [/([^aeiouy]|qu)y$/i, '$1ies'], [/(x|ch|ss|sh|s|z)$/i, '$1es'], [/(matr|vert|ind|cort)(ix|ex)$/i, '$1ices'], [/([m|l])ouse$/i, '$1ice'], [/([m|l])ice$/i, '$1ice'], [/^(ox)$/i, '$1en'], [/^(oxen)$/i, '$1'], [/(quiz)$/i, '$1zes'], [/(antenn|formul|nebul|vertebr|vit)a$/i, '$1ae'], [/(sis)$/i, 'ses'], [/^(?!talis|.*hu)(.*)man$/i, '$1men'], [/(.*)/i, '$1s']].map(function (a) {\n  return {\n    reg: a[0],\n    repl: a[1]\n  };\n});\n\n},{}],43:[function(_dereq_,module,exports){\n\"use strict\";\n\n//patterns for turning 'dwarves' to 'dwarf'\nmodule.exports = [[/([^v])ies$/i, '$1y'], [/ises$/i, 'isis'], [/(kn|[^o]l|w)ives$/i, '$1ife'], [/^((?:ca|e|ha|(?:our|them|your)?se|she|wo)l|lea|loa|shea|thie)ves$/i, '$1f'], [/^(dwar|handkerchie|hoo|scar|whar)ves$/i, '$1f'], [/(antenn|formul|nebul|vertebr|vit)ae$/i, '$1a'], [/(octop|vir|radi|nucle|fung|cact|stimul)(i)$/i, '$1us'], [/(buffal|tomat|tornad)(oes)$/i, '$1o'], // [/(analy|diagno|parenthe|progno|synop|the)ses$/i, '$1sis'],\n[/(..[aeiou]s)es$/i, '$1'], [/(vert|ind|cort)(ices)$/i, '$1ex'], [/(matr|append)(ices)$/i, '$1ix'], [/(x|ch|ss|sh|z|o)es$/i, '$1'], [/men$/i, 'man'], [/(n)ews$/i, '$1ews'], [/([ti])a$/i, '$1um'], [/([^aeiouy]|qu)ies$/i, '$1y'], [/(s)eries$/i, '$1eries'], [/(m)ovies$/i, '$1ovie'], [/([m|l])ice$/i, '$1ouse'], [/(cris|ax|test)es$/i, '$1is'], [/(alias|status)es$/i, '$1'], [/(ss)$/i, '$1'], [/(ics)$/i, '$1'], [/s$/i, '']].map(function (a) {\n  return {\n    reg: a[0],\n    repl: a[1]\n  };\n});\n\n},{}],44:[function(_dereq_,module,exports){\n'use strict'; // const irregulars = require('../../../lexicon/uncompressed/irregularPlurals').toPlural;\n\nvar pluralRules = _dereq_('./data/pluralRules'); //turn 'shoe' into 'shoes'\n\n\nvar pluralize = function pluralize(str, world) {\n  var irregulars = world.plurals || {}; //irregular\n\n  if (irregulars.hasOwnProperty(str) === true) {\n    return irregulars[str];\n  } //regular rule-based inflector\n\n\n  for (var i = 0; i < pluralRules.length; i++) {\n    if (pluralRules[i].reg.test(str) === true) {\n      return str.replace(pluralRules[i].reg, pluralRules[i].repl);\n    }\n  }\n\n  return null;\n};\n\nmodule.exports = pluralize;\n\n},{\"./data/pluralRules\":42}],45:[function(_dereq_,module,exports){\n'use strict';\n\nvar singleRules = _dereq_('./data/singleRules'); //turn 'shoes' into 'shoe'\n\n\nvar toSingle = function toSingle(str, world) {\n  //reverse it //TODO: cache in world object somewhere\n  var irregulars = world.cache.toSingular || {}; //check irregulars\n\n  if (irregulars.hasOwnProperty(str) === true) {\n    return irregulars[str];\n  }\n\n  if (world && world.plurals) {\n    //given irregulars\n    var keys = Object.keys(world.plurals);\n\n    for (var i = 0; i < keys.length; i++) {\n      if (world.plurals[keys[i]] === str) {\n        return keys[i];\n      }\n    }\n  } //inflect first word of preposition-phrase\n\n\n  if (/([a-z]*) (of|in|by|for) [a-z]/.test(str) === true) {\n    var first = (str.match(/^([a-z]*) (of|in|by|for) [a-z]/) || [])[1];\n\n    if (first) {\n      var better_first = toSingle(first); //recursive\n\n      return better_first + str.replace(first, '');\n    }\n  } //regular rule-based inflector\n\n\n  for (var _i = 0; _i < singleRules.length; _i++) {\n    if (singleRules[_i].reg.test(str) === true) {\n      return str.replace(singleRules[_i].reg, singleRules[_i].repl);\n    }\n  }\n\n  return null;\n};\n\nmodule.exports = toSingle; // console.log(toSingle('days'))\n\n},{\"./data/singleRules\":43}],46:[function(_dereq_,module,exports){\n'use strict';\n\nvar Terms = _dereq_('../../paths').Terms;\n\nvar _hasPlural = _dereq_('./hasPlural');\n\nvar _isPlural = _dereq_('./isPlural');\n\nvar _toPossessive = _dereq_('./toPossessive');\n\nvar makeArticle = _dereq_('./makeArticle');\n\nvar pluralize = _dereq_('./methods/pluralize');\n\nvar singularize = _dereq_('./methods/singularize');\n\nvar methods = {\n  article: function article() {\n    return makeArticle(this.main);\n  },\n  isPlural: function isPlural() {\n    return _isPlural(this.main, this.world);\n  },\n  hasPlural: function hasPlural() {\n    return _hasPlural(this.main);\n  },\n  toPlural: function toPlural(verbose) {\n    var t = this.main;\n\n    if (_hasPlural(t) && !_isPlural(t, this.world)) {\n      t.text = pluralize(t.normal, this.world, verbose) || t.text;\n      t.unTag('Singular', 'toPlural');\n      t.tag('Plural', 'toPlural');\n    }\n\n    return this;\n  },\n  toSingular: function toSingular(verbose) {\n    var t = this.main;\n\n    if (_isPlural(t, this.world)) {\n      t.text = singularize(t.normal, this.world, verbose) || t.text;\n      t.unTag('Plural', 'toSingular');\n      t.tag('Singular', 'toSingular');\n    }\n\n    return this;\n  },\n  toPossessive: function toPossessive() {\n    var t = this.main;\n\n    if (t.tags.Possessive) {\n      return this;\n    }\n\n    t = _toPossessive(t);\n    return this;\n  },\n  data: function data() {\n    var t = this.main;\n    var singular = t.text;\n\n    if (_isPlural(t, this.world)) {\n      singular = singularize(t.normal, this.world) || t.text;\n    }\n\n    var plural = t.text;\n\n    if (_hasPlural(t) && !_isPlural(t, this.world)) {\n      plural = pluralize(t.normal, this.world) || t.text;\n    } //support 'mayors of chicago'\n\n\n    var qualifier = '';\n\n    if (this.qualifier) {\n      qualifier = this.qualifier.out('normal');\n      singular += ' ' + qualifier;\n      plural += ' ' + qualifier;\n    }\n\n    return {\n      text: this.out('text'),\n      normal: this.out('normal'),\n      article: this.article(),\n      main: t.normal,\n      qualifier: qualifier,\n      singular: singular,\n      plural: plural\n    };\n  }\n};\n\nvar Noun = function Noun(arr, world, refText) {\n  Terms.call(this, arr, world, refText); //support 'mayor of chicago' as one noun-phrase\n\n  this.main = this.match('[#Noun+] (of|by|for)');\n\n  if (this.main.found) {\n    this.main = this.main.list[0].terms[0];\n  } else {\n    this.main = this.terms[this.terms.length - 1];\n  } //'of chicago'\n\n\n  this.qualifier = this.match(this.main.normal + ' [.+]').list[0];\n};\n\nNoun.prototype = Object.create(Terms.prototype);\nObject.keys(methods).forEach(function (k) {\n  Noun.prototype[k] = methods[k];\n});\nmodule.exports = Noun;\n\n},{\"../../paths\":8,\"./hasPlural\":37,\"./isPlural\":39,\"./makeArticle\":40,\"./methods/pluralize\":44,\"./methods/singularize\":45,\"./toPossessive\":47}],47:[function(_dereq_,module,exports){\n\"use strict\";\n\nvar exceptions = {\n  he: 'his',\n  she: 'hers',\n  they: 'theirs',\n  we: 'ours',\n  i: 'mine',\n  you: 'yours',\n  her: 'hers',\n  their: 'theirs',\n  our: 'ours',\n  my: 'mine',\n  your: 'yours'\n}; // turn \"David\" to \"David's\"\n\nvar toPossessive = function toPossessive(t) {\n  t.tag('Possessive', 'toPossessive'); // exceptions\n\n  if (exceptions.hasOwnProperty(t.normal)) {\n    t.text = exceptions[t.normal];\n    return t;\n  } // flanders'\n\n\n  if (/s$/.test(t.normal)) {\n    t.text += '\\'';\n    return t;\n  } //normal form:\n\n\n  t.text += '\\'s';\n  return t;\n};\n\nmodule.exports = toPossessive;\n\n},{}],48:[function(_dereq_,module,exports){\n'use strict'; // make a statistical assumption about the gender of the person based on their given name\n// used for pronoun resolution only.\n// not intended for classification, or discrimination of people.\n\nvar gender = function gender(firstName) {\n  if (!firstName) {\n    return null;\n  } //statistical guesses\n\n\n  if (/.(i|ee|[a|e]y|a)$/.test(firstName) === true) {\n    //this is almost-always true\n    return 'Female';\n  }\n\n  if (/[ou]$/.test(firstName) === true) {\n    //if it ends in a 'oh or uh', male\n    return 'Male';\n  }\n\n  if (/(nn|ll|tt)/.test(firstName) === true) {\n    //if it has double-consonants, female\n    return 'Female';\n  } // name not recognized, or recognized as of indeterminate gender\n\n\n  return null;\n};\n\nmodule.exports = gender;\n\n},{}],49:[function(_dereq_,module,exports){\n'use strict';\n\nvar Text = _dereq_('../../text');\n\nvar Person = _dereq_('./person'); //this is used for pronoun and honorifics, and not intented for more-than grammatical use (see #117)\n//the () subset class\n\n\nvar methods = {\n  pronoun: function pronoun() {\n    return this.list.map(function (ts) {\n      return ts.pronoun();\n    });\n  },\n  firstNames: function firstNames() {\n    return this.match('#FirstName');\n  },\n  lastNames: function lastNames() {\n    return this.match('#LastName');\n  }\n};\n\nvar find = function find(r, n) {\n  var people = r.clauses();\n  people = people.match('#Person+');\n\n  if (typeof n === 'number') {\n    people = people.get(n);\n  }\n\n  people.list = people.list.map(function (ts) {\n    return new Person(ts.terms, ts.world, ts.refText, ts.refTerms);\n  });\n  return people;\n};\n\nmodule.exports = Text.makeSubset(methods, find);\n\n},{\"../../text\":192,\"./person\":50}],50:[function(_dereq_,module,exports){\n'use strict';\n\nvar Terms = _dereq_('../../paths').Terms;\n\nvar _guessGender = _dereq_('./guessGender');\n\nvar Person = function Person(arr, world, refText, refTerms) {\n  Terms.call(this, arr, world, refText, refTerms);\n  this.firstName = this.match('#FirstName+');\n  this.middleName = this.match('#Acronym+');\n  this.nickName = this.match('#NickName+');\n  this.honorifics = this.match('#Honorific');\n  this.lastName = this.match('#LastName+'); //assume first-last\n\n  if (!this.firstName.found && this.length > 1) {\n    var m = this.not('(#Acronym|#Honorific)');\n    this.firstName = m.first();\n    this.lastName = m.last();\n  }\n\n  return this;\n}; //Inherit properties\n\n\nPerson.prototype = Object.create(Terms.prototype);\nvar methods = {\n  data: function data() {\n    return {\n      text: this.out('text'),\n      normal: this.out('normal'),\n      firstName: this.firstName.out('normal'),\n      middleName: this.middleName.out('normal'),\n      nickName: this.nickName.out('normal'),\n      lastName: this.lastName.out('normal'),\n      genderGuess: this.guessGender(),\n      pronoun: this.pronoun(),\n      honorifics: this.honorifics.out('array')\n    };\n  },\n  guessGender: function guessGender() {\n    //try known honorifics\n    if (this.honorifics.match('(mr|mister|sr|sir|jr)').found) {\n      return 'Male';\n    }\n\n    if (this.honorifics.match('(mrs|miss|ms|misses|mme|mlle)').found) {\n      return 'Female';\n    } //try known first-names\n\n\n    if (this.firstName.match('#MaleName').found) {\n      return 'Male';\n    }\n\n    if (this.firstName.match('#FemaleName').found) {\n      return 'Female';\n    } //look-for regex clues\n\n\n    var str = this.firstName.out('normal');\n    return _guessGender(str);\n  },\n  pronoun: function pronoun() {\n    var str = this.firstName.out('normal');\n    var g = this.guessGender(str);\n\n    if (g === 'Male') {\n      return 'he';\n    }\n\n    if (g === 'Female') {\n      return 'she';\n    }\n\n    return 'they';\n  },\n  root: function root() {\n    var first = this.firstName.out('root');\n    var last = this.lastName.out('root');\n\n    if (first && last) {\n      return first + ' ' + last;\n    }\n\n    return last || first || this.out('root');\n  }\n};\nObject.keys(methods).forEach(function (k) {\n  Person.prototype[k] = methods[k];\n});\nmodule.exports = Person;\n\n},{\"../../paths\":8,\"./guessGender\":48}],51:[function(_dereq_,module,exports){\n'use strict';\n\nvar Text = _dereq_('../../text'); // const Terms = require('../../paths').Terms;\n\n\nvar methods = {\n  //remove the 's on the end of the word\n  strip: function strip() {\n    this.list.forEach(function (ts) {\n      var t = ts.terms[ts.terms.length - 1];\n      t.text = t.text.replace(/'s$/, '');\n      t.unTag('Possessive', '.strip()');\n    });\n    return this;\n  }\n};\n\nvar find = function find(r, n) {\n  r = r.match('#Possessive+');\n  r = r.splitAfter('#Comma');\n\n  if (typeof n === 'number') {\n    r = r.get(n);\n  }\n\n  return r;\n};\n\nmodule.exports = Text.makeSubset(methods, find);\n\n},{\"../../text\":192}],52:[function(_dereq_,module,exports){\n'use strict';\n\nvar Text = _dereq_('../../text');\n\nvar Sentence = _dereq_('./sentence'); //the Sentences() subset class\n\n\nvar methods = {\n  /** conjugate the main/first verb*/\n  toPastTense: function toPastTense() {\n    this.list = this.list.map(function (ts) {\n      ts = ts.toPastTense();\n      return new Sentence(ts.terms, ts.world, ts.refText, ts.refTerms);\n    });\n    return this;\n  },\n  toPresentTense: function toPresentTense() {\n    this.list = this.list.map(function (ts) {\n      ts = ts.toPresentTense();\n      return new Sentence(ts.terms, ts.world, ts.refText, ts.refTerms);\n    });\n    return this;\n  },\n  toFutureTense: function toFutureTense() {\n    this.list = this.list.map(function (ts) {\n      ts = ts.toFutureTense();\n      return new Sentence(ts.terms, ts.world, ts.refText, ts.refTerms);\n    });\n    return this;\n  },\n  toContinuous: function toContinuous() {\n    this.list = this.list.map(function (ts) {\n      ts = ts.toContinuous();\n      return new Sentence(ts.terms, ts.world, ts.refText, ts.refTerms);\n    });\n    return this;\n  },\n\n  /** negative/positive */\n  toNegative: function toNegative() {\n    this.list = this.list.map(function (ts) {\n      ts = ts.toNegative();\n      return new Sentence(ts.terms, ts.world, ts.refText, ts.refTerms);\n    });\n    return this;\n  },\n  toPositive: function toPositive() {\n    this.list = this.list.map(function (ts) {\n      ts = ts.toPositive();\n      return new Sentence(ts.terms, ts.world, ts.refText, ts.refTerms);\n    });\n    return this;\n  },\n\n  /** look for 'was _ by' patterns */\n  isPassive: function isPassive() {\n    this.list = this.list.filter(function (ts) {\n      return ts.isPassive();\n    });\n    return this;\n  },\n  //return only questions\n  isQuestion: function isQuestion() {\n    // this.list = this.list.filter(ts => {\n    //   return ts.isQuestion();\n    // });\n    return this.questions();\n  },\n\n  /** add a word to the start */\n  prepend: function prepend(str) {\n    this.list = this.list.map(function (ts) {\n      return ts.prepend(str);\n    });\n    return this;\n  },\n\n  /** add a word to the end */\n  append: function append(str) {\n    this.list = this.list.map(function (ts) {\n      return ts.append(str);\n    });\n    return this;\n  },\n\n  /** convert between question/statement/exclamation*/\n  toExclamation: function toExclamation() {\n    this.list.forEach(function (ts) {\n      ts.setPunctuation('!');\n    });\n    return this;\n  },\n  toQuestion: function toQuestion() {\n    this.list.forEach(function (ts) {\n      ts.setPunctuation('?');\n    });\n    return this;\n  },\n  toStatement: function toStatement() {\n    this.list.forEach(function (ts) {\n      ts.setPunctuation('.');\n    });\n    return this;\n  }\n};\n\nvar find = function find(r, n) {\n  r = r.all();\n\n  if (typeof n === 'number') {\n    r = r.get(n);\n  }\n\n  r.list = r.list.map(function (ts) {\n    return new Sentence(ts.terms, ts.world, ts.refText, ts.refTerms);\n  });\n  return r;\n};\n\nmodule.exports = Text.makeSubset(methods, find);\n\n},{\"../../text\":192,\"./sentence\":54}],53:[function(_dereq_,module,exports){\n'use strict'; //is this sentence asking a question?\n\nvar isQuestion = function isQuestion(ts) {\n  var endPunct = ts.getPunctuation();\n  var clauses = ts.match('*').splitAfter('#Comma');\n\n  if (/\\?/.test(endPunct) === true) {\n    return true;\n  } // Has ellipsis at the end means it's probably not a question\n  // e.g., Is this just fantasy...\n\n\n  if (/\\.\\.$/.test(ts.out('text'))) {\n    return false;\n  } // Starts with question word, but has a comma, so probably not a question\n  // e.g., Why are we caught in a land slide, no escape from reality\n\n\n  if (ts.has('^#QuestionWord') && ts.has('#Comma')) {\n    return false;\n  } // Starts with a #QuestionWord\n  // e.g., What open your eyes look up to the skies and see\n\n\n  if (ts.has('^#QuestionWord')) {\n    return true;\n  } // Second word is a #QuestionWord\n  // e.g., I'm what a poor boy\n  // case ts.has('^\\w+\\s#QuestionWord'):\n  // return true;\n  // is it, do you - start of sentence\n  // e.g., Do I need no sympathy\n\n\n  if (ts.has('^(do|does|did|is|was|can|could|will|would|may) #Noun')) {\n    return true;\n  } // these are a little more loose..\n  // e.g., Must I be come easy come easy go\n\n\n  if (ts.has('^(have|must) you')) {\n    return true;\n  } // Clause starts with a question word\n  // e.g., Anyway the wind blows, what doesn't really matter to me\n\n\n  if (clauses.has('^#QuestionWord')) {\n    return true;\n  } //is wayne gretskzy alive\n\n\n  if (clauses.has('(do|does|is|was) #Noun+ #Adverb? (#Adjective|#Infinitive)$')) {\n    return true;\n  } // Probably not a question\n\n\n  return false;\n};\n\nmodule.exports = isQuestion;\n\n},{}],54:[function(_dereq_,module,exports){\n'use strict';\n\nvar Terms = _dereq_('../../paths').Terms;\n\nvar _toNegative = _dereq_('./toNegative');\n\nvar _toPositive = _dereq_('./toPositive');\n\nvar Verb = _dereq_('../verbs/verb');\n\nvar insert = _dereq_('./smartInsert'); //decide on main subject-verb-object\n\n\nvar parse = function parse(s) {\n  //strip conditions first\n  var conditions = s.match('#Condition');\n  var tmp = s.not('#Condition'); //choose the verb first\n\n  var verb = tmp.match('#VerbPhrase+').first(); //this should be much smarter\n\n  var vb = verb.out('normal'); //get subj noun left-of the verb\n\n  var subject = tmp.match('#Determiner? #Adjective+? #Noun ' + vb).first().not('#VerbPhrase'); //get obj noun right-of the verb\n\n  var object = tmp.match(vb + ' #Preposition? #Determiner? #Noun').first().not('#VerbPhrase');\n  s.conditions = conditions;\n  s.subject = subject;\n  s.verb = verb;\n  s.object = object;\n\n  if (s.verb.found) {\n    s.verb = new Verb(s.verb.list[0].terms, s.world, s.refText, s.refTerms);\n  }\n\n  return s;\n};\n\nvar fixContraction = function fixContraction(contr) {\n  if (contr.found) {\n    contr.contractions().expand();\n  }\n};\n\nvar killContraction = function killContraction(s) {\n  s.terms = s.terms.filter(function (t) {\n    if (t.silent_term) {\n      if (t.silent_term === 'am' || t.silent_term === 'will' || t.silent_term === 'did') {\n        return false;\n      }\n\n      t.text = t.silent_term;\n      t.silent_term = null;\n      t.unTag('Contraction');\n\n      if (t.tags.TitleCase === true) {\n        t.toTitleCase();\n      }\n    }\n\n    return true;\n  });\n}; //if the subject of thr sentence is plural, use infinitive form of verb\n// (he goes / i go)\n\n\nvar useInfinitive = function useInfinitive(s) {\n  if (s.subject.found && s.subject.has('(i|we)')) {\n    return true;\n  }\n\n  return false;\n};\n\nvar methods = {\n  /** inflect the main/first noun*/\n  toSingular: function toSingular() {\n    var nouns = this.match('#Noun').match('!#Pronoun').firstTerm();\n    nouns.things().toSingular();\n    return this;\n  },\n  toPlural: function toPlural() {\n    var nouns = this.match('#Noun').match('!#Pronoun').firstTerm();\n    nouns.things().toPlural();\n    return this;\n  },\n\n  /** find the first important verbPhrase. returns a Term object */\n  mainVerb: function mainVerb() {\n    parse(this); //re-parse\n\n    if (this.verb.found) {\n      return this.verb;\n    }\n\n    return null;\n  },\n\n  /** sentence tense conversion**/\n  toPastTense: function toPastTense() {\n    var verb = this.mainVerb();\n\n    if (verb) {\n      //this is really ugly..\n      var start = verb.out('root');\n      verb.toPastTense(); //support \"i'm going\"\n\n      var contr = this.match('#Contraction ' + start);\n      fixContraction(contr);\n      var end = verb.out('root'); // this.replace(start, end)\n\n      var r = this.parentTerms.replace(start, end);\n      return r;\n    }\n\n    return this;\n  },\n  toPresentTense: function toPresentTense() {\n    var verb = this.mainVerb();\n\n    if (verb) {\n      var start = verb.out('normal'); //plural/singular stuff\n\n      if (useInfinitive(this) === true) {\n        if (this.has('(am|will|did) ' + start)) {\n          killContraction(this);\n        }\n\n        verb.toInfinitive(); //irregular \"i am\"\n        // this.debug();\n        // if (this.has('i #Adverb? is')) {\n        //   this.replace(' #Adverb? [is]', 'am');\n        // }\n      } else {\n        verb.toPresentTense();\n        var contr = this.match('#Contraction ' + start);\n        fixContraction(contr);\n      } //support \"i'm going\"\n\n\n      var end = verb.out('normal');\n      return this.parentTerms.replace(start, end);\n    }\n\n    return this;\n  },\n  toFutureTense: function toFutureTense() {\n    var verb = this.mainVerb();\n\n    if (verb) {\n      var start = verb.clone(); //.out('root');\n\n      verb.toFutureTense(); //support \"i'm going\"\n\n      var contr = this.match('#Contraction ' + start.out('normal'));\n      fixContraction(contr);\n      var end = verb.out('normal');\n      return this.parentTerms.replace(start, end);\n    }\n\n    return this;\n  },\n  toContinuous: function toContinuous() {\n    var verb = this.mainVerb();\n\n    if (verb) {\n      var start = verb.clone(); //.out('root');\n      //'is walking' or 'are walking'?\n      // let aux = 'is';\n      // if (useInfinitive(this)) {\n      //   aux = 'are';\n      // }\n\n      verb.toGerund(); // verb.insertBefore(aux);\n      //support \"i'm going\"\n\n      var contr = this.match('#Contraction ' + start.out('normal'));\n      fixContraction(contr);\n      var end = verb.out('normal');\n      return this.parentTerms.replace(start, end);\n    }\n\n    return this;\n  },\n\n  /** negation **/\n  isNegative: function isNegative() {\n    return this.match('#Negative').list.length === 1;\n  },\n  toNegative: function toNegative() {\n    if (this.isNegative()) {\n      return this;\n    }\n\n    return _toNegative(this);\n  },\n  toPositive: function toPositive() {\n    if (!this.isNegative()) {\n      return this;\n    }\n\n    return _toPositive(this);\n  },\n\n  /** smarter insert methods*/\n  append: function append(str) {\n    return insert.append(this, str);\n  },\n  prepend: function prepend(str) {\n    return insert.prepend(this, str);\n  },\n\n  /** look for 'was _ by' patterns */\n  isPassive: function isPassive() {\n    return this.match('was #Adverb? #PastTense #Adverb? by').found; //haha\n  }\n};\n\nvar Sentence = function Sentence(arr, world, refText, refTerms) {\n  Terms.call(this, arr, world, refText, refTerms);\n  parse(this);\n}; //Terms inheritence\n\n\nSentence.prototype = Object.create(Terms.prototype); //add-in methods\n\nObject.keys(methods).forEach(function (k) {\n  Sentence.prototype[k] = methods[k];\n});\nmodule.exports = Sentence;\n\n},{\"../../paths\":8,\"../verbs/verb\":94,\"./smartInsert\":55,\"./toNegative\":56,\"./toPositive\":57}],55:[function(_dereq_,module,exports){\n'use strict';\n\nvar hasCapital = /^[A-Z]/; //sticking words at the start sentence-sensitive\n\nvar prepend = function prepend(ts, str) {\n  var firstTerm = ts.terms[0];\n  ts.insertAt(0, str); //handle titlecase of first-word\n\n  if (hasCapital.test(firstTerm.text)) {\n    //is it titlecased because it should be?\n    if (firstTerm.needsTitleCase() === false) {\n      firstTerm.toLowerCase();\n    }\n\n    var newTerm = ts.terms[0];\n    newTerm.toTitleCase();\n  }\n\n  return ts;\n}; //sticking words on end sentence-sensitive\n\n\nvar append = function append(ts, str) {\n  var endTerm = ts.terms[ts.terms.length - 1]; //move the sentence punctuation to the end\n\n  var punct = ts.getPunctuation();\n\n  if (punct) {\n    endTerm.killPunctuation();\n  }\n\n  ts.insertAt(ts.terms.length, str);\n  var newTerm = ts.terms[ts.terms.length - 1];\n\n  if (punct) {\n    newTerm.text += punct;\n  } //move over sentence-ending whitespace too\n\n\n  if (endTerm.whitespace.after) {\n    newTerm.whitespace.after = endTerm.whitespace.after;\n    endTerm.whitespace.after = '';\n  }\n\n  return ts;\n};\n\nmodule.exports = {\n  append: append,\n  prepend: prepend\n};\n\n},{}],56:[function(_dereq_,module,exports){\n'use strict'; //these terms are nicer ways to negate a sentence\n//ie. john always walks -> john always doesn't walk\n\nvar logicalNegate = {\n  everyone: 'no one',\n  everybody: 'nobody',\n  someone: 'no one',\n  somebody: 'nobody',\n  // everything:\"nothing\",\n  always: 'never'\n}; //different rule for i/we/they/you + infinitive\n//that is, 'i walk' -> 'i don\\'t walk', not 'I not walk'\n\nvar toNegative = function toNegative(ts) {\n  var lg = ts.match('(everyone|everybody|someone|somebody|always)').first();\n\n  if (lg.found && logicalNegate[lg.out('normal')]) {\n    var found = lg.out('normal'); // ts = ts.replace(found, logicalNegate[found]);\n\n    ts = ts.match(found).replaceWith(logicalNegate[found]).list[0];\n    return ts.parentTerms;\n  } //negate the main verb of the sentence\n\n\n  var vb = ts.mainVerb();\n\n  if (vb) {\n    vb.toNegative();\n  }\n\n  return ts;\n};\n\nmodule.exports = toNegative;\n\n},{}],57:[function(_dereq_,module,exports){\n'use strict'; //ie. john never walks -> john always walks\n//nobody/noone are ambiguous logically (somebody? / everybody?)\n\nvar logical = {\n  'never': 'always',\n  'nothing': 'everything'\n};\n\nvar toPositive = function toPositive(ts) {\n  var m = ts.match('(never|nothing)').first();\n\n  if (m.found) {\n    var str = m.out('normal');\n\n    if (logical[str]) {\n      ts = ts.match(str).replaceWith(logical[str], true).list[0];\n      return ts.parentTerms;\n    }\n  } //otherwise just remove 'not'\n\n\n  ts.delete('#Negative');\n  return ts;\n};\n\nmodule.exports = toPositive;\n\n},{}],58:[function(_dereq_,module,exports){\n'use strict';\n\nvar Text = _dereq_('../../text');\n\nvar Terms = _dereq_('../../paths').Terms; //the Terms() subset class\n//this is just a wrapper around the actual Term class,\n//which is buried in `ts.terms[0]`\n\n\nvar methods = {\n  data: function data() {\n    return this.list.map(function (ts) {\n      var t = ts.terms[0];\n      return {\n        spaceBefore: t.whitespace.before,\n        text: t.text,\n        spaceAfter: t.whitespace.after,\n        normal: t.normal,\n        implicit: t.silent_term,\n        bestTag: t.bestTag(),\n        tags: Object.keys(t.tags)\n      };\n    });\n  }\n};\n\nvar find = function find(r, n) {\n  var list = []; //make a Terms Object for every Term\n\n  r.list.forEach(function (ts) {\n    ts.terms.forEach(function (t) {\n      list.push(new Terms([t], ts.world, r));\n    });\n  });\n  r = new Text(list, r.world, r.parent);\n\n  if (typeof n === 'number') {\n    r = r.get(n);\n  }\n\n  return r;\n};\n\nmodule.exports = Text.makeSubset(methods, find);\n\n},{\"../../paths\":8,\"../../text\":192}],59:[function(_dereq_,module,exports){\n\"use strict\";\n\nvar numOrdinal = _dereq_('./numOrdinal');\n\nvar _textOrdinal = _dereq_('./textOrdinal');\n\nvar textCardinal = _dereq_('./textCardinal');\n\nvar niceNumber = _dereq_('./niceNumber'); //make all the number formats\n\n\nvar fmt = {\n  nice: function nice(num) {\n    return niceNumber(num);\n  },\n  ordinal: function ordinal(num) {\n    return numOrdinal(num);\n  },\n  cardinal: function cardinal(num) {\n    return String(num);\n  },\n  niceOrdinal: function niceOrdinal(num) {\n    num = numOrdinal(num);\n    num = niceNumber(num);\n    return num;\n  },\n  text: function text(num) {\n    return textCardinal(num).join(' ');\n  },\n  textOrdinal: function textOrdinal(num) {\n    return _textOrdinal(num);\n  }\n};\nmodule.exports = fmt;\n\n},{\"./niceNumber\":60,\"./numOrdinal\":61,\"./textCardinal\":62,\"./textOrdinal\":63}],60:[function(_dereq_,module,exports){\n'use strict'; //put a comma or two in\n\nvar niceNumber = function niceNumber(num) {\n  if (!num && num !== 0) {\n    return null;\n  }\n\n  num = String(num);\n  var x = num.split('.');\n  var x1 = x[0];\n  var x2 = x.length > 1 ? '.' + x[1] : '';\n  var rgx = /(\\d+)(\\d{3})/;\n\n  while (rgx.test(x1)) {\n    x1 = x1.replace(rgx, '$1' + ',' + '$2');\n  }\n\n  return x1 + x2;\n};\n\nmodule.exports = niceNumber;\n\n},{}],61:[function(_dereq_,module,exports){\n'use strict';\n\nvar toString = _dereq_('./toString'); //turn a number like 5 into an ordinal like 5th\n\n\nvar numOrdinal = function numOrdinal(num) {\n  if (!num && num !== 0) {\n    return null;\n  } //the teens are all 'th'\n\n\n  var tens = num % 100;\n\n  if (tens > 10 && tens < 20) {\n    return String(num) + 'th';\n  } //the rest of 'em\n\n\n  var mapping = {\n    0: 'th',\n    1: 'st',\n    2: 'nd',\n    3: 'rd'\n  };\n  var str = toString(num);\n  var last = str.slice(str.length - 1, str.length);\n\n  if (mapping[last]) {\n    str += mapping[last];\n  } else {\n    str += 'th';\n  }\n\n  return str;\n};\n\nmodule.exports = numOrdinal;\n\n},{\"./toString\":64}],62:[function(_dereq_,module,exports){\n'use strict';\n\nvar toString = _dereq_('./toString'); // turns an integer/float into a textual number, like 'fifty-five'\n\n\nvar tens_mapping = [['ninety', 90], ['eighty', 80], ['seventy', 70], ['sixty', 60], ['fifty', 50], ['forty', 40], ['thirty', 30], ['twenty', 20]];\nvar ones_mapping = ['', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen'];\nvar sequence = [[1e24, 'septillion'], [1e21, 'sextillion'], [1e18, 'quintillion'], [1e15, 'quadrillion'], [1e12, 'trillion'], [1e9, 'billion'], [1e8, 'hundred million'], [1e6, 'million'], [100000, 'hundred thousand'], [1000, 'thousand'], [100, 'hundred'], [1, 'one']]; //turn number into an array of magnitudes, like [[5, million], [2, hundred]]\n\nvar breakdown_magnitudes = function breakdown_magnitudes(num) {\n  var working = num;\n  var have = [];\n  sequence.forEach(function (a) {\n    if (num >= a[0]) {\n      var howmany = Math.floor(working / a[0]);\n      working -= howmany * a[0];\n\n      if (howmany) {\n        have.push({\n          unit: a[1],\n          count: howmany\n        });\n      }\n    }\n  });\n  return have;\n}; //turn numbers from 100-0 into their text\n\n\nvar breakdown_hundred = function breakdown_hundred(num) {\n  var arr = [];\n\n  if (num > 100) {\n    return arr; //something bad happened..\n  }\n\n  for (var i = 0; i < tens_mapping.length; i++) {\n    if (num >= tens_mapping[i][1]) {\n      num -= tens_mapping[i][1];\n      arr.push(tens_mapping[i][0]);\n    }\n  } //(hopefully) we should only have 20-0 now\n\n\n  if (ones_mapping[num]) {\n    arr.push(ones_mapping[num]);\n  }\n\n  return arr;\n};\n/** print-out 'point eight nine'*/\n\n\nvar handle_decimal = function handle_decimal(num) {\n  var names = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'];\n  var arr = []; //parse it out like a string, because js math is such shit\n\n  var str = toString(num);\n  var decimal = str.match(/\\.([0-9]+)/);\n\n  if (!decimal || !decimal[0]) {\n    return arr;\n  }\n\n  arr.push('point');\n  var decimals = decimal[0].split('');\n\n  for (var i = 0; i < decimals.length; i++) {\n    arr.push(names[decimals[i]]);\n  }\n\n  return arr;\n};\n/** turns an integer into a textual number */\n\n\nvar to_text = function to_text(num) {\n  //big numbers, north of sextillion, aren't gonna work well..\n  //keep them small..\n  if (num > 1e21) {\n    return [String(num)];\n  }\n\n  var arr = []; //handle negative numbers\n\n  if (num < 0) {\n    arr.push('negative');\n    num = Math.abs(num);\n  } //break-down into units, counts\n\n\n  var units = breakdown_magnitudes(num); //build-up the string from its components\n\n  for (var i = 0; i < units.length; i++) {\n    var unit_name = units[i].unit;\n\n    if (unit_name === 'one') {\n      unit_name = ''; //put an 'and' in here\n\n      if (arr.length > 1) {\n        arr.push('and');\n      }\n    }\n\n    arr = arr.concat(breakdown_hundred(units[i].count));\n    arr.push(unit_name);\n  } //also support decimals - 'point eight'\n\n\n  arr = arr.concat(handle_decimal(num)); //remove empties\n\n  arr = arr.filter(function (s) {\n    return s;\n  });\n\n  if (arr.length === 0) {\n    arr[0] = '';\n  }\n\n  return arr;\n};\n\nmodule.exports = to_text; // console.log(to_text(-1000.8));\n\n},{\"./toString\":64}],63:[function(_dereq_,module,exports){\n'use strict';\n\nvar textValue = _dereq_('./textCardinal');\n\nvar ordinalWord = _dereq_('../../../world/more-data/numbers').toOrdinal; //\n\n\nvar textOrdinal = function textOrdinal(num) {\n  var words = textValue(num); //convert the last number to an ordinal\n\n  var last = words[words.length - 1];\n  words[words.length - 1] = ordinalWord[last] || last;\n  return words.join(' ');\n};\n\nmodule.exports = textOrdinal;\n\n},{\"../../../world/more-data/numbers\":220,\"./textCardinal\":62}],64:[function(_dereq_,module,exports){\n\"use strict\";\n\n//turn big numbers, like 2.3e+22, into a tonne of 0's\nvar numToString = function numToString(n) {\n  if (n < 1000000) {\n    return String(n);\n  }\n\n  var str = n.toFixed(0);\n\n  if (str.indexOf('e+') === -1) {\n    return str;\n  }\n\n  return str.replace('.', '').split('e+').reduce(function (p, b) {\n    return p + Array(b - p.length + 2).join(0);\n  });\n};\n\nmodule.exports = numToString; // console.log(numToString(2.5e+22));\n\n},{}],65:[function(_dereq_,module,exports){\n'use strict';\n\nvar Text = _dereq_('../../text');\n\nvar Value = _dereq_('./value');\n\nvar parse = _dereq_('./parse'); //the Values() subset class\n\n\nvar methods = {\n  noDates: function noDates() {\n    return this.not('#Date');\n  },\n  noUnits: function noUnits() {\n    return this.not('#Unit');\n  },\n  units: function units() {\n    return this.match('#Unit+');\n  },\n\n  /** five -> 5 */\n  numbers: function numbers() {\n    return this.list.map(function (ts) {\n      return ts.number();\n    });\n  },\n\n  /** five -> '5' */\n  toNumber: function toNumber() {\n    this.list = this.list.map(function (ts) {\n      return ts.toNumber();\n    });\n    return this;\n  },\n\n  /**5 -> 'five' */\n  toText: function toText() {\n    this.list = this.list.map(function (ts) {\n      return ts.toText();\n    });\n    return this;\n  },\n\n  /**5th -> 5 */\n  toCardinal: function toCardinal() {\n    this.list = this.list.map(function (ts) {\n      return ts.toCardinal();\n    });\n    return this;\n  },\n\n  /**5 -> 5th */\n  toOrdinal: function toOrdinal() {\n    this.list = this.list.map(function (ts) {\n      return ts.toOrdinal();\n    });\n    return this;\n  },\n\n  /**5900 -> 5,900 */\n  toNice: function toNice() {\n    this.list = this.list.map(function (ts) {\n      return ts.toNice();\n    });\n    return this;\n  },\n\n  /**seven === 7th */\n  isEqual: function isEqual(num) {\n    num = parse(num);\n    this.list = this.list.filter(function (ts) {\n      return num !== null && ts.number() === num;\n    });\n    return this;\n  },\n\n  /**eight > 7th */\n  greaterThan: function greaterThan(num) {\n    num = parse(num);\n    this.list = this.list.filter(function (ts) {\n      return num !== null && ts.number() > num;\n    });\n    return this;\n  },\n\n  /**five < 7th */\n  lessThan: function lessThan(num) {\n    num = parse(num);\n    this.list = this.list.filter(function (ts) {\n      return num !== null && ts.number() < num;\n    });\n    return this;\n  },\n  between: function between(min, max) {\n    if (min === undefined || max === undefined) {\n      return this;\n    }\n\n    min = parse(min);\n    max = parse(max);\n    this.list = this.list.filter(function (ts) {\n      var n = ts.number();\n      return n > min && n < max;\n    });\n    return this;\n  },\n\n  /**seven + 2 = 'nine' */\n  add: function add(n) {\n    this.list = this.list.map(function (ts) {\n      return ts.add(n);\n    });\n    return this;\n  },\n\n  /**seven - 2 = 'five' */\n  subtract: function subtract(n) {\n    this.list = this.list.map(function (ts) {\n      return ts.subtract(n);\n    });\n    return this;\n  },\n\n  /**seven -> 'eight' */\n  increment: function increment() {\n    this.list = this.list.map(function (ts) {\n      return ts.add(1);\n    });\n    return this;\n  },\n\n  /**seven -> 'eight' */\n  decrement: function decrement() {\n    this.list = this.list.map(function (ts) {\n      return ts.subtract(1);\n    });\n    return this;\n  }\n};\n\nvar find = function find(r, n) {\n  var tens = 'twenty|thirty|forty|fifty|sixty|seventy|eighty|ninety|fourty';\n  var teens = 'eleven|twelve|thirteen|fourteen|fifteen|sixteen|seventeen|eighteen|nineteen';\n  r = r.match('#Value+ #Unit?'); // r = r.match('#Value+ #Unit?');\n  //\"50 83\"\n\n  if (r.has('#NumericValue #NumericValue')) {\n    //a comma may mean two numbers\n    if (r.has('#Value #Comma #Value')) {\n      r.splitAfter('#Comma');\n    } else {\n      r.splitAfter('#NumericValue');\n    }\n  } //three-length\n\n\n  if (r.has('#Value #Value #Value') && !r.has('#Multiple')) {\n    //twenty-five-twenty\n    if (r.has('(' + tens + ') #Cardinal #Cardinal')) {\n      r.splitAfter('(' + tens + ') #Cardinal');\n    }\n  } //two-length ones\n\n\n  if (r.has('#Value #Value')) {\n    //june 21st 1992 is two seperate values\n    if (r.has('#NumericValue #NumericValue')) {\n      r.splitOn('#Year');\n    } //sixty fifteen\n\n\n    if (r.has('(' + tens + ') (' + teens + ')')) {\n      r.splitAfter('(' + tens + ')');\n    } //\"72 82\"\n\n\n    var double = r.match('#Cardinal #Cardinal');\n\n    if (double.found && !r.has('(point|decimal)')) {\n      //not 'two hundred'\n      if (!double.has('#Cardinal (#Multiple|point|decimal)')) {\n        //one proper way, 'twenty one', or 'hundred one'\n        if (!double.has('(' + tens + ') #Cardinal') && !double.has('#Multiple #Value')) {\n          r.splitAfter(double.terms(0).out('normal'));\n        }\n      }\n    } //seventh fifth\n\n\n    if (r.match('#Ordinal #Ordinal').match('#TextValue').found && !r.has('#Multiple')) {\n      //the one proper way, 'twenty first'\n      if (!r.has('(' + tens + ') #Ordinal')) {\n        r.splitAfter('#Ordinal');\n      }\n    } //fifth five\n\n\n    if (r.has('#Ordinal #Cardinal')) {\n      r.splitBefore('#Cardinal+');\n    } //five 2017 (support '5 hundred', and 'twenty 5'\n\n\n    if (r.has('#TextValue #NumericValue') && !r.has('(' + tens + '|#Multiple)')) {\n      r.splitBefore('#NumericValue+');\n    }\n  } //5-8\n\n\n  if (r.has('#NumberRange')) {\n    r.splitAfter('#NumberRange');\n  }\n\n  if (typeof n === 'number') {\n    r = r.get(n);\n  }\n\n  var world = r.world();\n  r.list = r.list.map(function (ts) {\n    return new Value(ts.terms, world, ts.refText, ts.refTerms);\n  });\n  return r;\n};\n\nmodule.exports = Text.makeSubset(methods, find);\n\n},{\"../../text\":192,\"./parse\":66,\"./value\":74}],66:[function(_dereq_,module,exports){\n'use strict';\n\nvar parseText = _dereq_('./parseText'); // 2.5, $5.50, 3,432, etc -\n\n\nvar numeric = /^-?(\\$|€|¥|£)?\\.?[0-9]+[0-9,\\.]*(st|nd|rd|th|rth|%)?$/;\n\nvar parseString = function parseString(str) {\n  if (numeric.test(str) === true) {\n    //clean up a number, like '$4,342.00'\n    str = str.replace(/,/g, '');\n    str = str.replace(/^[\\$|€|¥|£]/g, '');\n    str = str.replace(/%$/, '');\n    str = str.replace(/(st|nd|rd|th|rth)$/g, '');\n    var num = parseFloat(str);\n\n    if (num || num === 0) {\n      return num;\n    }\n  }\n\n  return parseText(str);\n}; //turn it all into a number\n\n\nvar parse = function parse(val) {\n  if (val === null || val === undefined || typeof val === 'number') {\n    return val;\n  }\n\n  if (typeof val === 'string') {\n    return parseString(val);\n  } //numerical values can only be one term\n\n\n  if (val.terms.length === 1 && val.terms[0].tags.TextValue !== true) {\n    var str = val.terms[0].normal;\n    return parseString(str);\n  }\n\n  return parseText(val.out('normal'));\n};\n\nmodule.exports = parse;\n\n},{\"./parseText\":69}],67:[function(_dereq_,module,exports){\n\"use strict\";\n\nvar numbers = _dereq_('../../../world/more-data/numbers');\n\nvar fns = _dereq_('../paths').fns; //setup number-word data\n\n\nvar ones = fns.extend(numbers.ordinal.ones, numbers.cardinal.ones);\nvar teens = fns.extend(numbers.ordinal.teens, numbers.cardinal.teens);\nvar tens = fns.extend(numbers.ordinal.tens, numbers.cardinal.tens);\nvar multiples = fns.extend(numbers.ordinal.multiples, numbers.cardinal.multiples); //add this one\n\nmultiples.grand = 1000;\nmodule.exports = {\n  ones: ones,\n  teens: teens,\n  tens: tens,\n  multiples: multiples\n};\n\n},{\"../../../world/more-data/numbers\":220,\"../paths\":73}],68:[function(_dereq_,module,exports){\n'use strict'; //support global multipliers, like 'half-million' by doing 'million' then multiplying by 0.5\n\nvar findModifiers = function findModifiers(str) {\n  var mults = [{\n    reg: /^(minus|negative)[\\s\\-]/i,\n    mult: -1\n  }, {\n    reg: /^(a\\s)?half[\\s\\-](of\\s)?/i,\n    mult: 0.5 //  {\n    //   reg: /^(a\\s)?quarter[\\s\\-]/i,\n    //   mult: 0.25\n    // }\n\n  }];\n\n  for (var i = 0; i < mults.length; i++) {\n    if (mults[i].reg.test(str) === true) {\n      return {\n        amount: mults[i].mult,\n        str: str.replace(mults[i].reg, '')\n      };\n    }\n  }\n\n  return {\n    amount: 1,\n    str: str\n  };\n};\n\nmodule.exports = findModifiers;\n\n},{}],69:[function(_dereq_,module,exports){\n'use strict';\n\nvar findModifiers = _dereq_('./findModifiers');\n\nvar words = _dereq_('./data');\n\nvar isValid = _dereq_('./validate');\n\nvar parseDecimals = _dereq_('./parseDecimals');\n\nvar parseNumeric = _dereq_('./parseNumeric');\n\nvar improperFraction = /^([0-9,\\. ]+)\\/([0-9,\\. ]+)$/; //some numbers we know\n\nvar casualForms = {\n  // 'a few': 3,\n  'a couple': 2,\n  'a dozen': 12,\n  'two dozen': 24,\n  zero: 0\n}; // a 'section' is something like 'fifty-nine thousand'\n// turn a section into something we can add to - like 59000\n\nvar section_sum = function section_sum(obj) {\n  return Object.keys(obj).reduce(function (sum, k) {\n    sum += obj[k];\n    return sum;\n  }, 0);\n}; //turn a string into a number\n\n\nvar parse = function parse(str) {\n  //convert some known-numbers\n  if (casualForms.hasOwnProperty(str) === true) {\n    return casualForms[str];\n  } //'a/an' is 1\n\n\n  if (str === 'a' || str === 'an') {\n    return 1;\n  }\n\n  var modifier = findModifiers(str);\n  str = modifier.str;\n  var last_mult = null;\n  var has = {};\n  var sum = 0;\n  var isNegative = false;\n  var terms = str.split(/[ -]/);\n\n  for (var i = 0; i < terms.length; i++) {\n    var w = terms[i];\n    w = parseNumeric(w);\n\n    if (!w || w === 'and') {\n      continue;\n    }\n\n    if (w === '-' || w === 'negative') {\n      isNegative = true;\n      continue;\n    }\n\n    if (w.charAt(0) === '-') {\n      isNegative = true;\n      w = w.substr(1);\n    } //decimal mode\n\n\n    if (w === 'point') {\n      sum += section_sum(has);\n      sum += parseDecimals(terms.slice(i + 1, terms.length));\n      sum *= modifier.amount;\n      return sum;\n    } //improper fraction\n\n\n    var fm = w.match(improperFraction);\n\n    if (fm) {\n      var num = parseFloat(fm[1].replace(/[, ]/g, ''));\n      var denom = parseFloat(fm[2].replace(/[, ]/g, ''));\n\n      if (denom) {\n        sum += num / denom || 0;\n      }\n\n      continue;\n    } //prevent mismatched units, like 'seven eleven'\n\n\n    if (isValid(w, has) === false) {\n      return null;\n    } //buildOut section, collect 'has' values\n\n\n    if (/^[0-9\\.]+$/.test(w)) {\n      has['ones'] = parseFloat(w); //not technically right\n    } else if (words.ones.hasOwnProperty(w) === true) {\n      has['ones'] = words.ones[w];\n    } else if (words.teens.hasOwnProperty(w) === true) {\n      has['teens'] = words.teens[w];\n    } else if (words.tens.hasOwnProperty(w) === true) {\n      has['tens'] = words.tens[w];\n    } else if (words.multiples.hasOwnProperty(w) === true) {\n      var mult = words.multiples[w]; //something has gone wrong : 'two hundred five hundred'\n\n      if (mult === last_mult) {\n        return null;\n      } //support 'hundred thousand'\n      //this one is tricky..\n\n\n      if (mult === 100 && terms[i + 1] !== undefined) {\n        // has['hundreds']=\n        var w2 = terms[i + 1];\n\n        if (words.multiples[w2]) {\n          mult *= words.multiples[w2]; //hundredThousand/hundredMillion\n\n          i += 1;\n        }\n      } //natural order of things\n      //five thousand, one hundred..\n\n\n      if (last_mult === null || mult < last_mult) {\n        sum += (section_sum(has) || 1) * mult;\n        last_mult = mult;\n        has = {};\n      } else {\n        //maybe hundred .. thousand\n        sum += section_sum(has);\n        last_mult = mult;\n        sum = (sum || 1) * mult;\n        has = {};\n      }\n    }\n  } //dump the remaining has values\n\n\n  sum += section_sum(has); //post-process add modifier\n\n  sum *= modifier.amount;\n  sum *= isNegative ? -1 : 1; //dont return 0, if it went straight-through\n\n  if (sum === 0 && Object.keys(has).length === 0) {\n    return null;\n  }\n\n  return sum;\n};\n\nmodule.exports = parse;\n\n},{\"./data\":67,\"./findModifiers\":68,\"./parseDecimals\":70,\"./parseNumeric\":71,\"./validate\":72}],70:[function(_dereq_,module,exports){\n'use strict';\n\nvar words = _dereq_('./data'); //concatenate into a string with leading '0.'\n\n\nvar parseDecimals = function parseDecimals(arr) {\n  var str = '0.';\n\n  for (var i = 0; i < arr.length; i++) {\n    var w = arr[i];\n\n    if (words.ones.hasOwnProperty(w) === true) {\n      str += words.ones[w];\n    } else if (words.teens.hasOwnProperty(w) === true) {\n      str += words.teens[w];\n    } else if (words.tens.hasOwnProperty(w) === true) {\n      str += words.tens[w];\n    } else if (/^[0-9]$/.test(w) === true) {\n      str += w;\n    } else {\n      return 0;\n    }\n  }\n\n  return parseFloat(str);\n};\n\nmodule.exports = parseDecimals;\n\n},{\"./data\":67}],71:[function(_dereq_,module,exports){\n'use strict'; //parse a string like \"4,200.1\" into Number 4200.1\n\nvar parseNumeric = function parseNumeric(str) {\n  //remove ordinal - 'th/rd'\n  str = str.replace(/1st$/, '1');\n  str = str.replace(/2nd$/, '2');\n  str = str.replace(/3rd$/, '3');\n  str = str.replace(/([4567890])r?th$/, '$1'); //remove prefixes\n\n  str = str.replace(/^[$€¥£¢]/, ''); //remove suffixes\n\n  str = str.replace(/[%$€¥£¢]$/, ''); //remove commas\n\n  str = str.replace(/,/g, ''); //split '5kg' from '5'\n\n  str = str.replace(/([0-9])([a-z]{1,2})$/, '$1');\n  return str;\n};\n\nmodule.exports = parseNumeric;\n\n},{}],72:[function(_dereq_,module,exports){\n'use strict';\n\nvar words = _dereq_('./data'); //prevent things like 'fifteen ten', and 'five sixty'\n\n\nvar isValid = function isValid(w, has) {\n  if (words.ones.hasOwnProperty(w)) {\n    if (has.ones || has.teens) {\n      return false;\n    }\n  } else if (words.teens.hasOwnProperty(w)) {\n    if (has.ones || has.teens || has.tens) {\n      return false;\n    }\n  } else if (words.tens.hasOwnProperty(w)) {\n    if (has.ones || has.teens || has.tens) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nmodule.exports = isValid;\n\n},{\"./data\":67}],73:[function(_dereq_,module,exports){\n\"use strict\";\n\nmodule.exports = _dereq_('../../paths');\n\n},{\"../../paths\":8}],74:[function(_dereq_,module,exports){\n'use strict';\n\nvar paths = _dereq_('../../paths');\n\nvar Terms = paths.Terms;\n\nvar parse = _dereq_('./parse');\n\nvar fmt = _dereq_('./format'); // const unpackRange = function(ts) {\n//   if (ts.has('#NumberRange')) {\n//     ts.terms.forEach(t => {\n//       if (t.silent_term && !t._text) {\n//         t.text = t.silent_term;\n//       }\n//     });\n//   }\n//   return ts;\n// };\n\n\nvar parseValue = function parseValue(ts) {\n  ts.val = ts.match('#Value+'); // ts.val = unpackRange(ts.val);\n\n  ts.val = ts.val.list[0];\n  ts.unit = ts.match('#Unit+');\n\n  if (ts.unit.found) {\n    ts.unit = ts.unit.list[0];\n  }\n\n  return ts;\n};\n\nvar isPercent = function isPercent(val, unit) {\n  //pre-tagged\n  if (val.has('#Percent') || unit.has('#Percent')) {\n    return true;\n  } // 'five percent'\n\n\n  if (unit.out('normal') === 'percent') {\n    return true;\n  } //'5%'\n\n\n  if (val.out('normal').match(/%$/) !== null) {\n    return true;\n  }\n\n  return false;\n}; //set the text as the same num format\n\n\nvar setNumber = function setNumber(ts, num) {\n  var str = ts.val.out();\n\n  if (ts.has('#Ordinal')) {\n    if (ts.has('#TextValue')) {\n      str = fmt.textOrdinal(num); //ordinal text\n    } else {\n      str = fmt.ordinal(num); //ordinal number\n    }\n  } else if (ts.has('#TextValue')) {\n    str = fmt.text(num); //cardinal text\n  } else if (ts.has('#NiceNumber')) {\n    str = fmt.nice(num); //8,929 number\n  } else {\n    str = fmt.cardinal(num); //cardinal number\n  } //add the unit at the end\n\n\n  if (ts.unit.found) {\n    str += ts.unit.out('text');\n  }\n\n  ts = ts.replaceWith(str, true);\n  return parseValue(ts);\n};\n\nvar Value = function Value(arr, world, refText, refTerms) {\n  Terms.call(this, arr, world, refText, refTerms);\n  parseValue(this);\n}; //Terms inheritence\n\n\nValue.prototype = Object.create(Terms.prototype);\nvar methods = {\n  data: function data() {\n    var num = parse(this.val);\n    return {\n      number: num,\n      nice: fmt.nice(num),\n      ordinal: fmt.ordinal(num),\n      niceOrdinal: fmt.niceOrdinal(num),\n      text: fmt.text(num),\n      textOrdinal: fmt.textOrdinal(num),\n      unit: this.unit.out('normal')\n    };\n  },\n  number: function number() {\n    return parse(this.val);\n  },\n  // /** five -> '5' */\n  toNumber: function toNumber() {\n    var num = parse(this.val);\n\n    if (num || num === 0) {\n      var str = '';\n\n      if (this.val.has('#Ordinal')) {\n        str = fmt.ordinal(num);\n      } else {\n        str = String(num); //convert 'five percent' -> '5%'\n\n        if (isPercent(this.val, this.unit)) {\n          str = str + '%';\n          this.unit.delete();\n        }\n      } // let before = this.terms[0].whitespace.before;\n      // let after = this.terms[this.terms.length - 1].whitespace.after;\n\n\n      if (this.unit.found) {\n        str = str + this.unit.out('text');\n      }\n\n      this.replaceWith(str, true).tag('NumericValue'); //make sure unit gets the right tag..\n\n      if (this.unit.found) {\n        this.match(this.unit.out('normal')).tag('Unit');\n      } // this.whitespace.before(before);\n      // this.whitespace.after(after);\n\n    }\n\n    return this;\n  },\n  // /**5 -> 'five' */\n  toText: function toText() {\n    var num = parse(this.val);\n\n    if (num || num === 0) {\n      var str = '';\n\n      if (this.val.has('#Ordinal')) {\n        str = fmt.textOrdinal(num);\n      } else {\n        str = fmt.text(num); //add percent\n\n        if (isPercent(this.val, this.unit)) {\n          str = str + ' percent';\n        }\n      }\n\n      if (this.unit.found) {\n        str = str + this.unit.out('text');\n      }\n\n      this.replaceWith(str, true).tag('TextValue'); //make sure unit gets the right tag..\n\n      if (this.unit.found) {\n        this.match(this.unit.out('normal')).tag('Unit');\n      }\n    }\n\n    return this;\n  },\n  //\n  // /**5th -> 5 */\n  toCardinal: function toCardinal() {\n    var num = parse(this.val);\n\n    if (num || num === 0) {\n      var str = '';\n\n      if (this.val.has('#TextValue')) {\n        str = fmt.text(num);\n      } else {\n        str = num;\n      }\n\n      if (this.unit.found) {\n        str = str + this.unit.out('text');\n      }\n\n      this.replaceWith(str, true).tag('Cardinal'); //make sure unit gets the right tag..\n\n      if (this.unit.found) {\n        this.match(this.unit.out('normal')).tag('Unit');\n      }\n    }\n\n    return this;\n  },\n  //\n  // /**5 -> 5th */\n  toOrdinal: function toOrdinal() {\n    var num = parse(this.val);\n\n    if (num || num === 0) {\n      var str = '';\n\n      if (this.val.has('#TextValue')) {\n        str = fmt.textOrdinal(num);\n      } else {\n        str = fmt.ordinal(num);\n      }\n\n      if (this.unit.found) {\n        str = str + this.unit.out('text');\n      }\n\n      this.replaceWith(str, true).tag('Ordinal'); //make sure unit gets the right tag..\n\n      if (this.unit.found) {\n        this.match(this.unit.out('normal')).tag('Unit');\n      }\n    }\n\n    return this;\n  },\n  //\n  // /**5900 -> 5,900 */\n  toNice: function toNice() {\n    var num = parse(this.val);\n\n    if (num || num === 0) {\n      var str = '';\n\n      if (this.val.has('#Ordinal')) {\n        str = fmt.niceOrdinal(num);\n      } else {\n        str = fmt.nice(num);\n      }\n\n      if (this.unit.found) {\n        str = str + this.unit.out('text');\n      }\n\n      this.replaceWith(str, true).tag('NumericValue'); //make sure unit gets the right tag..\n\n      if (this.unit.found) {\n        this.match(this.unit.out('normal')).tag('Unit');\n      }\n    }\n\n    return this;\n  },\n\n  /** seven + 2 = nine */\n  add: function add(n) {\n    if (!n) {\n      return this;\n    }\n\n    var num = parse(this.val) || 0;\n    num += n; //add it\n\n    return setNumber(this, num);\n  },\n\n  /** seven - 2 = five */\n  subtract: function subtract(n) {\n    if (!n) {\n      return this;\n    }\n\n    var num = parse(this.val) || 0;\n    num -= n; //subtract it\n\n    return setNumber(this, num);\n  },\n\n  /**seven -> 'eight' */\n  increment: function increment() {\n    return this.add(1);\n  },\n\n  /**seven -> 'six' */\n  decrement: function decrement() {\n    return this.subtract(1);\n  }\n};\nObject.keys(methods).forEach(function (k) {\n  Value.prototype[k] = methods[k];\n});\nmodule.exports = Value;\n\n},{\"../../paths\":8,\"./format\":59,\"./parse\":66}],75:[function(_dereq_,module,exports){\n'use strict';\n\nvar Text = _dereq_('../../text');\n\nvar Verb = _dereq_('./verb'); //the () subset class\n\n\nvar methods = {\n  conjugation: function conjugation(verbose) {\n    return this.list.map(function (ts) {\n      return ts.conjugation(verbose);\n    });\n  },\n  conjugate: function conjugate(num, verbose) {\n    //suppport only conjugating one verb in our result..\n    if (num !== null && typeof num === 'number' && this.list[num]) {\n      return this.list[num].conjugate(verbose);\n    } //otherwise, return an array of conjugations\n\n\n    return this.list.map(function (ts) {\n      return ts.conjugate(verbose);\n    });\n  },\n\n  /** plural/singular **/\n  isPlural: function isPlural() {\n    this.list = this.list.filter(function (ts) {\n      return ts.isPlural();\n    });\n    return this;\n  },\n  isSingular: function isSingular() {\n    this.list = this.list.filter(function (ts) {\n      return !ts.isPlural();\n    });\n    return this;\n  },\n\n  /** negation **/\n  isNegative: function isNegative() {\n    this.list = this.list.filter(function (ts) {\n      return ts.isNegative();\n    });\n    return this;\n  },\n  isPositive: function isPositive() {\n    this.list = this.list.filter(function (ts) {\n      return !ts.isNegative();\n    });\n    return this;\n  },\n  toNegative: function toNegative() {\n    this.list = this.list.map(function (ts) {\n      return ts.toNegative();\n    });\n    return this;\n  },\n  toPositive: function toPositive() {\n    this.list.forEach(function (ts) {\n      ts.toPositive();\n    });\n    return this;\n  },\n\n  /** tense **/\n  toPastTense: function toPastTense() {\n    this.list.forEach(function (ts) {\n      ts.toPastTense();\n    });\n    return this;\n  },\n  toPresentTense: function toPresentTense() {\n    this.list.forEach(function (ts) {\n      ts.toPresentTense();\n    });\n    return this;\n  },\n  toFutureTense: function toFutureTense() {\n    this.list.forEach(function (ts) {\n      ts.toFutureTense();\n    });\n    return this;\n  },\n  toInfinitive: function toInfinitive() {\n    this.list.forEach(function (ts) {\n      ts.toInfinitive();\n    });\n    return this;\n  },\n  toGerund: function toGerund() {\n    this.list.forEach(function (ts) {\n      ts.toGerund();\n    });\n    return this;\n  },\n  asAdjective: function asAdjective() {\n    return this.list.map(function (ts) {\n      return ts.asAdjective();\n    });\n  }\n}; //aliases\n\nmethods.toContinuous = methods.toGerund;\n\nvar find = function find(r, n) {\n  r = r.match('(#Adverb|#Auxiliary|#Verb|#Negative|#Particle)+');\n  r = r.splitAfter('#Comma');\n  r = r.if('#Verb'); //this should be (much) smarter\n\n  if (typeof n === 'number') {\n    r = r.get(n);\n  }\n\n  r.list = r.list.map(function (ts) {\n    return new Verb(ts.terms, ts.world, ts.refText, ts.refTerms);\n  });\n  return new Text(r.list, this.world, this.parent);\n};\n\nmodule.exports = Text.makeSubset(methods, find);\n\n},{\"../../text\":192,\"./verb\":94}],76:[function(_dereq_,module,exports){\n'use strict';\n\nvar predict = _dereq_('./methods/predict');\n\nvar isPlural = _dereq_('./methods/isPlural'); //'walking' - aka progressive\n\n\nvar isContinuous = function isContinuous(ts) {\n  return ts.match('#Gerund').found;\n}; //will not walk\n\n\nvar isNegative = function isNegative(ts) {\n  var negs = ts.match('#Negative').list;\n\n  if (negs.length === 2) {\n    return false;\n  }\n\n  if (negs.length === 1) {\n    return true;\n  }\n\n  return false;\n}; //been walked by..\n\n\nvar isPassive = function isPassive(ts) {\n  if (ts.match('is being #PastTense').found) {\n    return true;\n  }\n\n  if (ts.match('(had|has) been #PastTense').found) {\n    return true;\n  }\n\n  if (ts.match('will have been #PastTense').found) {\n    return true;\n  }\n\n  return false;\n}; //had walked\n\n\nvar isPerfect = function isPerfect(ts) {\n  if (ts.match('^(had|have) #PastTense')) {\n    return true;\n  }\n\n  return false;\n}; //should walk, could walk\n\n\nvar getModal = function getModal(ts) {\n  var modal = ts.match('#Modal');\n\n  if (!modal.found) {\n    return null;\n  }\n\n  return modal.out('normal');\n}; //past/present/future\n\n\nvar getTense = function getTense(ts) {\n  //look at the preceding words\n  if (ts.auxiliary.found) {\n    //'will'\n    if (ts.match('will have #PastTense').found) {\n      return 'Past';\n    }\n\n    if (ts.auxiliary.match('will').found) {\n      return 'Future';\n    } //'was'\n\n\n    if (ts.auxiliary.match('was').found) {\n      return 'Past';\n    }\n  } //look at the main verb tense\n\n\n  if (ts.verb) {\n    var tenses = {\n      PastTense: 'Past',\n      FutureTense: 'Future',\n      FuturePerfect: 'Future'\n    };\n    var tense = predict(ts.verb); //yikes\n\n    return tenses[tense] || 'Present';\n  }\n\n  return 'Present';\n}; // const isImperative = function(ts) {};\n// const isConditional = function(ts) {};\n// detect signals in Auxiliary verbs\n// 'will' -> future, 'have'->perfect, modals, negatives, adverbs\n\n\nvar interpret = function interpret(ts) {\n  var isNeg = isNegative(ts); // let aux = ts.Auxiliary.clone();\n  // aux = aux.not('(#Negative|#Adverb)');\n\n  var obj = {\n    negative: isNeg,\n    continuous: isContinuous(ts),\n    passive: isPassive(ts),\n    perfect: isPerfect(ts),\n    plural: isPlural(ts),\n    modal: getModal(ts),\n    tense: getTense(ts)\n  };\n  return obj;\n};\n\nmodule.exports = interpret;\n\n},{\"./methods/isPlural\":86,\"./methods/predict\":87}],77:[function(_dereq_,module,exports){\n'use strict';\n\nvar checkIrregulars = _dereq_('./irregulars');\n\nvar suffixPass = _dereq_('./suffixes');\n\nvar toActor = _dereq_('./toActor');\n\nvar generic = _dereq_('./generic');\n\nvar predict = _dereq_('../predict');\n\nvar toInfinitive = _dereq_('../toInfinitive');\n\nvar toBe = _dereq_('./toBe'); //turn a verb into all it's forms\n\n\nvar conjugate = function conjugate(t, world) {\n  //handle is/was/will-be specially\n  if (t.normal === 'is' || t.normal === 'was' || t.normal === 'will') {\n    return toBe();\n  } //dont conjugate didn't\n\n\n  if (t.tags.Contraction) {\n    t.text = t.silent_term;\n  }\n\n  var all = {\n    PastTense: null,\n    PresentTense: null,\n    Infinitive: null,\n    Gerund: null,\n    Actor: null\n  }; //first, get its current form\n\n  var form = predict(t);\n\n  if (form) {\n    all[form] = t.normal;\n  }\n\n  if (form !== 'Infinitive') {\n    all['Infinitive'] = toInfinitive(t, world) || '';\n  } //check irregular forms\n\n\n  var irregObj = checkIrregulars(all['Infinitive'], world) || {};\n  Object.keys(irregObj).forEach(function (k) {\n    if (irregObj[k] && !all[k]) {\n      all[k] = irregObj[k];\n    }\n  }); //ok, send this infinitive to all conjugators\n\n  var inf = all['Infinitive'] || t.normal; //check suffix rules\n\n  var suffObj = suffixPass(inf);\n  Object.keys(suffObj).forEach(function (k) {\n    if (suffObj[k] && !all[k]) {\n      all[k] = suffObj[k];\n    }\n  }); //ad-hoc each missing form\n  //to Actor\n\n  if (!all.Actor) {\n    all.Actor = toActor(inf);\n  } //use fallback, generic transformations\n\n\n  Object.keys(all).forEach(function (k) {\n    if (!all[k] && generic[k]) {\n      all[k] = generic[k](all);\n    }\n  });\n  return all;\n};\n\nmodule.exports = conjugate;\n\n},{\"../predict\":87,\"../toInfinitive\":90,\"./generic\":80,\"./irregulars\":82,\"./suffixes\":83,\"./toActor\":84,\"./toBe\":85}],78:[function(_dereq_,module,exports){\n\"use strict\";\n\nmodule.exports = [{\n  reg: /(eave)$/i,\n  repl: {\n    pr: '$1s',\n    pa: '$1d',\n    gr: 'eaving',\n    ar: '$1r'\n  }\n}, {\n  reg: /(ink)$/i,\n  repl: {\n    pr: '$1s',\n    pa: 'unk',\n    gr: '$1ing',\n    ar: '$1er'\n  }\n}, {\n  reg: /([aeiou]k)in$/i,\n  repl: {\n    pr: '$1s',\n    pa: '$1ed',\n    gr: '$1ing',\n    ar: '$1er'\n  }\n}, {\n  reg: /(end)$/i,\n  repl: {\n    pr: '$1s',\n    pa: 'ent',\n    gr: '$1ing',\n    ar: '$1er'\n  }\n}, {\n  reg: /(ide)$/i,\n  repl: {\n    pr: '$1s',\n    pa: 'ode',\n    gr: 'iding',\n    ar: 'ider'\n  }\n}, {\n  reg: /(ake)$/i,\n  repl: {\n    pr: '$1s',\n    pa: 'ook',\n    gr: 'aking',\n    ar: '$1r'\n  }\n}, {\n  reg: /(eed)$/i,\n  repl: {\n    pr: '$1s',\n    pa: '$1ed',\n    gr: '$1ing',\n    ar: '$1er'\n  }\n}, {\n  reg: /(e)(ep)$/i,\n  repl: {\n    pr: '$1$2s',\n    pa: '$1pt',\n    gr: '$1$2ing',\n    ar: '$1$2er'\n  }\n}, {\n  reg: /(a[tg]|i[zn]|ur|nc|gl|is)e$/i,\n  repl: {\n    pr: '$1es',\n    pa: '$1ed',\n    gr: '$1ing',\n    prt: '$1en'\n  }\n}, {\n  reg: /([i|f|rr])y$/i,\n  repl: {\n    pr: '$1ies',\n    pa: '$1ied',\n    gr: '$1ying'\n  }\n}, {\n  reg: /([td]er)$/i,\n  repl: {\n    pr: '$1s',\n    pa: '$1ed',\n    gr: '$1ing'\n  }\n}, {\n  reg: /([bd]l)e$/i,\n  repl: {\n    pr: '$1es',\n    pa: '$1ed',\n    gr: '$1ing'\n  }\n}, {\n  reg: /(ish|tch|ess)$/i,\n  repl: {\n    pr: '$1es',\n    pa: '$1ed',\n    gr: '$1ing'\n  }\n}, {\n  reg: /(ion|end|e[nc]t)$/i,\n  repl: {\n    pr: '$1s',\n    pa: '$1ed',\n    gr: '$1ing'\n  }\n}, {\n  reg: /(om)e$/i,\n  repl: {\n    pr: '$1es',\n    pa: 'ame',\n    gr: '$1ing'\n  }\n}, {\n  reg: /(.eat)$/i,\n  repl: {\n    pr: '$1s',\n    pa: '$1ed',\n    gr: '$1ing'\n  }\n}, {\n  reg: /([aeiu])([pt])$/i,\n  repl: {\n    pr: '$1$2s',\n    pa: '$1$2',\n    gr: '$1$2$2ing'\n  }\n}, {\n  reg: /(er)$/i,\n  repl: {\n    pr: '$1s',\n    pa: '$1ed',\n    gr: '$1ing'\n  }\n}, {\n  reg: /(en)$/i,\n  repl: {\n    pr: '$1s',\n    pa: '$1ed',\n    gr: '$1ing'\n  }\n}, {\n  reg: /(ed)$/i,\n  repl: {\n    pr: '$1s',\n    pa: '$1ded',\n    ar: '$1der',\n    gr: '$1ding'\n  }\n}, {\n  reg: /(..)(ow)$/i,\n  repl: {\n    pr: '$1$2s',\n    pa: '$1ew',\n    gr: '$1$2ing',\n    prt: '$1$2n'\n  }\n}, {\n  reg: /(..)([cs]h)$/i,\n  repl: {\n    pr: '$1$2es',\n    pa: '$1$2ed',\n    gr: '$1$2ing'\n  }\n}, {\n  reg: /([^aeiou][ou])(g|d)$/i,\n  repl: {\n    pr: '$1$2s',\n    pa: '$1$2$2ed',\n    gr: '$1$2$2ing'\n  }\n}, {\n  reg: /([^aeiou][aeiou])(b|t|p|m)$/i,\n  repl: {\n    pr: '$1$2s',\n    pa: '$1$2$2ed',\n    gr: '$1$2$2ing'\n  }\n}, {\n  reg: /([aeiou]zz)$/i,\n  repl: {\n    pr: '$1es',\n    pa: '$1ed',\n    gr: '$1ing'\n  }\n}];\n\n},{}],79:[function(_dereq_,module,exports){\n'use strict';\n\nvar checkIrregulars = _dereq_('./irregulars');\n\nvar suffixPass = _dereq_('./suffixes');\n\nvar generic = _dereq_('./generic'); //this method is the same as regular conjugate, but optimised for use in the lexicon during warm-up.\n//it's way faster because it knows input is already infinitive\n\n\nvar want = ['Gerund', 'PastTense', 'PresentTense'];\n\nvar fasterConjugate = function fasterConjugate(inf, world) {\n  var all = {\n    Infinitive: inf\n  }; //check irregulars list\n\n  if (world && world.conjugations) {\n    var irregObj = checkIrregulars(all['Infinitive'], world);\n\n    if (irregObj !== null) {\n      Object.keys(irregObj).forEach(function (k) {\n        if (irregObj[k] && !all[k]) {\n          all[k] = irregObj[k];\n        }\n      });\n    }\n  } //check suffix rules\n\n\n  var suffObj = suffixPass(inf);\n  Object.keys(suffObj).forEach(function (k) {\n    if (suffObj[k] && !all[k]) {\n      all[k] = suffObj[k];\n    }\n  });\n\n  for (var i = 0; i < want.length; i++) {\n    if (all[want[i]] === undefined) {\n      all[want[i]] = generic[want[i]](all);\n    }\n  }\n\n  return all;\n};\n\nmodule.exports = fasterConjugate; // console.log(fasterConjugate('repeat'));\n\n},{\"./generic\":80,\"./irregulars\":82,\"./suffixes\":83}],80:[function(_dereq_,module,exports){\n'use strict'; //non-specifc, 'hail-mary' transforms from infinitive, into other forms\n\nvar hasY = /[bcdfghjklmnpqrstvwxz]y$/;\nvar generic = {\n  Gerund: function Gerund(o) {\n    var inf = o.Infinitive;\n\n    if (inf.charAt(inf.length - 1) === 'e') {\n      return inf.replace(/e$/, 'ing');\n    }\n\n    return inf + 'ing';\n  },\n  PresentTense: function PresentTense(o) {\n    var inf = o.Infinitive;\n\n    if (inf.charAt(inf.length - 1) === 's') {\n      return inf + 'es';\n    }\n\n    if (hasY.test(inf) === true) {\n      return inf.slice(0, -1) + 'ies';\n    }\n\n    return inf + 's';\n  },\n  PastTense: function PastTense(o) {\n    var inf = o.Infinitive;\n\n    if (inf.charAt(inf.length - 1) === 'e') {\n      return inf + 'd';\n    }\n\n    if (inf.substr(-2) === 'ed') {\n      return inf;\n    }\n\n    if (hasY.test(inf) === true) {\n      return inf.slice(0, -1) + 'ied';\n    }\n\n    return inf + 'ed';\n  } // FutureTense: (o) => {\n  //   return 'will ' + o.Infinitive;\n  // },\n  //\n  // PerfectTense: (o) => {\n  //   return 'have ' + (o.Participle || o.PastTense);\n  // },\n  //\n  // Pluperfect: (o) => {\n  //   if (o.PastTense) {\n  //     return 'had ' + o.PastTense;\n  //   }\n  //   return null;\n  // },\n  // FuturePerfect: (o) => {\n  //   if (o.PastTense) {\n  //     return 'will have ' + o.PastTense;\n  //   }\n  //   return null;\n  // }\n\n};\nmodule.exports = generic;\n\n},{}],81:[function(_dereq_,module,exports){\n'use strict';\n\nvar conjugate = _dereq_('./conjugate');\n\nvar toBe = _dereq_('./toBe');\n\nvar addAdverbs = function addAdverbs(obj, vb) {\n  if (vb.adverbs.found) {\n    //does the adverb go at the start or end?\n    var isFirst = vb.first().match('#Adverb').found;\n    Object.keys(obj).forEach(function (k) {\n      if (isFirst) {\n        obj[k] = vb.adverbs.out() + ' ' + obj[k];\n      } else {\n        obj[k] = obj[k] + vb.adverbs.out();\n      }\n    });\n  }\n\n  return obj;\n}; //conjugation using auxillaries+adverbs and stuff\n\n\nvar multiWordConjugate = function multiWordConjugate(vb, verbose) {\n  var isNegative = vb.negative.found;\n  var isPlural = vb.isPlural(); //handle 'to be' verb seperately\n\n  if (vb.verb.tags.Copula || vb.verb.normal === 'be' && vb.auxiliary.match('will').found) {\n    var isI = false; //account for 'i is' -> 'i am' irregular\n\n    if (vb.parent && vb.parent.has('i #Adverb? #Copula')) {\n      isI = true;\n    }\n\n    var copulas = toBe(isPlural, isNegative, isI);\n    return addAdverbs(copulas, vb);\n  }\n\n  var obj = conjugate(vb.verb, vb.world, verbose); //apply particles\n\n  if (vb.particle.found) {\n    Object.keys(obj).forEach(function (k) {\n      obj[k] = obj[k] + vb.particle.out();\n    });\n  } //apply negative\n\n\n  if (isNegative) {\n    obj.PastTense = 'did not ' + obj.Infinitive;\n    obj.PresentTense = 'does not ' + obj.Infinitive;\n    obj.Gerund = 'not ' + obj.Gerund;\n  } //future Tense is pretty straightforward\n\n\n  if (!obj.FutureTense) {\n    if (isNegative) {\n      obj.FutureTense = 'will not ' + obj.Infinitive;\n    } else {\n      obj.FutureTense = 'will ' + obj.Infinitive;\n    }\n  } //apply adverbs\n\n\n  obj = addAdverbs(obj, vb);\n  return obj;\n};\n\nmodule.exports = multiWordConjugate;\n\n},{\"./conjugate\":77,\"./toBe\":85}],82:[function(_dereq_,module,exports){\n'use strict'; // let irregulars = require('../../../../lexicon/uncompressed/irregularVerbs').irregulars; //weeee!\n\nvar fns = _dereq_('../../../../fns'); //weeee!\n\n\nvar forms = ['Participle', 'Gerund', 'PastTense', 'PresentTense', 'FuturePerfect', 'PerfectTense', 'Actor'];\n\nvar checkIrregulars = function checkIrregulars(str, world) {\n  var irregulars = world.conjugations;\n  var infArr = Object.keys(irregulars); //check irregulars in world\n\n  if (world && world.conjugations && world.conjugations.hasOwnProperty(str) === true) {\n    return world.conjugations[str];\n  } //fast infinitive lookup\n\n\n  if (irregulars.hasOwnProperty(str) === true) {\n    var obj = fns.copy(irregulars[str]);\n    obj.Infinitive = str;\n    return obj;\n  } //longer check of known-verb forms\n\n\n  for (var i = 0; i < infArr.length; i++) {\n    for (var o = 0; o < forms.length; o++) {\n      var irObj = irregulars[infArr[i]];\n\n      if (irObj[forms[o]] === str) {\n        var _obj = fns.copy(irObj);\n\n        _obj.Infinitive = infArr[i];\n        return _obj;\n      }\n    }\n  }\n\n  return {};\n};\n\nmodule.exports = checkIrregulars; // console.log(checkIrregulars('bit'));\n\n},{\"../../../../fns\":3}],83:[function(_dereq_,module,exports){\n'use strict';\n\nvar rules = _dereq_('./data/rules');\n\nvar mapping = {\n  pr: 'PresentTense',\n  pa: 'PastTense',\n  gr: 'Gerund',\n  prt: 'Participle',\n  ar: 'Actor'\n};\nvar keys = Object.keys(mapping); //check suffix rules\n\nvar suffixPass = function suffixPass(inf) {\n  var found = {};\n\n  for (var i = 0; i < rules.length; i++) {\n    if (rules[i].reg.test(inf) === true) {\n      var obj = rules[i].repl;\n\n      for (var o = 0; o < keys.length; o++) {\n        if (obj.hasOwnProperty(keys[o]) === true) {\n          var key = mapping[keys[o]]; // console.log(rules[i]);\n\n          found[key] = inf.replace(rules[i].reg, obj[keys[o]]);\n        }\n      }\n\n      return found;\n    }\n  }\n\n  return found;\n};\n\nmodule.exports = suffixPass;\n\n},{\"./data/rules\":78}],84:[function(_dereq_,module,exports){\n'use strict'; //turn 'walk' into 'walker'\n\nvar irregulars = {\n  'tie': 'tier',\n  'dream': 'dreamer',\n  'sail': 'sailer',\n  'run': 'runner',\n  'rub': 'rubber',\n  'begin': 'beginner',\n  'win': 'winner',\n  'claim': 'claimant',\n  'deal': 'dealer',\n  'spin': 'spinner'\n};\nvar dont = {\n  'aid': 1,\n  'fail': 1,\n  'appear': 1,\n  'happen': 1,\n  'seem': 1,\n  'try': 1,\n  'say': 1,\n  'marry': 1,\n  'be': 1,\n  'forbid': 1,\n  'understand': 1,\n  'bet': 1\n};\nvar rules = [{\n  'reg': /e$/i,\n  'repl': 'er'\n}, {\n  'reg': /([aeiou])([mlgp])$/i,\n  'repl': '$1$2$2er'\n}, {\n  'reg': /([rlf])y$/i,\n  'repl': '$1ier'\n}, {\n  'reg': /^(.?.[aeiou])t$/i,\n  'repl': '$1tter'\n}];\n\nvar toActor = function toActor(inf) {\n  //check blacklist\n  if (dont[inf]) {\n    return null;\n  } //check irregulars\n\n\n  if (irregulars.hasOwnProperty(inf)) {\n    return irregulars[inf];\n  } //try rules\n\n\n  for (var i = 0; i < rules.length; i++) {\n    if (rules[i].reg.test(inf) === true) {\n      return inf.replace(rules[i].reg, rules[i].repl);\n    }\n  } //yup,\n\n\n  return inf + 'er';\n};\n\nmodule.exports = toActor;\n\n},{}],85:[function(_dereq_,module,exports){\n'use strict'; //too many special cases for is/was/will be\n\nvar toBe = function toBe(isPlural, isNegative, isI) {\n  var obj = {\n    PastTense: 'was',\n    PresentTense: 'is',\n    FutureTense: 'will be',\n    Infinitive: 'is',\n    Gerund: 'being',\n    Actor: '',\n    PerfectTense: 'been',\n    Pluperfect: 'been'\n  }; //\"i is\" -> \"i am\"\n\n  if (isI === true) {\n    obj.PresentTense = 'am';\n    obj.Infinitive = 'am';\n  }\n\n  if (isPlural) {\n    obj.PastTense = 'were';\n    obj.PresentTense = 'are';\n    obj.Infinitive = 'are';\n  }\n\n  if (isNegative) {\n    obj.PastTense += ' not';\n    obj.PresentTense += ' not';\n    obj.FutureTense = 'will not be';\n    obj.Infinitive += ' not';\n    obj.PerfectTense = 'not ' + obj.PerfectTense;\n    obj.Pluperfect = 'not ' + obj.Pluperfect;\n    obj.Gerund = 'not ' + obj.Gerund;\n  }\n\n  return obj;\n};\n\nmodule.exports = toBe;\n\n},{}],86:[function(_dereq_,module,exports){\n'use strict'; //sometimes you can tell if a verb is plural/singular, just by the verb\n// i am / we were\n//othertimes you need its noun 'we walk' vs 'i walk'\n\nvar isPlural = function isPlural(vb) {\n  if (vb.match('(are|were|does)').found) {\n    return true;\n  }\n\n  if (vb.match('(is|am|do|was)').found) {\n    return false;\n  } //consider its prior noun\n\n\n  var noun = vb.getNoun();\n\n  if (noun && noun.found) {\n    if (noun.match('#Plural').found) {\n      return true;\n    }\n\n    if (noun.match('#Singular').found) {\n      return false;\n    }\n  }\n\n  return null;\n};\n\nmodule.exports = isPlural;\n\n},{}],87:[function(_dereq_,module,exports){\n'use strict';\n\nvar suffix_rules = _dereq_('./suffix_rules');\n\nvar goodTypes = {\n  Infinitive: true,\n  Gerund: true,\n  PastTense: true,\n  PresentTense: true,\n  FutureTense: true,\n  PerfectTense: true,\n  Pluperfect: true,\n  FuturePerfect: true,\n  Participle: true\n};\n\nvar predictForm = function predictForm(term) {\n  //do we already know the form?\n  var keys = Object.keys(goodTypes);\n\n  for (var i = 0; i < keys.length; i++) {\n    if (term.tags[keys[i]]) {\n      return keys[i];\n    }\n  } //consult our handy suffix rules\n\n\n  var arr = Object.keys(suffix_rules);\n\n  for (var _i = 0; _i < arr.length; _i++) {\n    var substr = term.normal.substr(-arr[_i].length);\n\n    if (substr === arr[_i] && term.normal.length > arr[_i].length) {\n      return suffix_rules[arr[_i]];\n    }\n  }\n\n  return null;\n};\n\nmodule.exports = predictForm;\n\n},{\"./suffix_rules\":88}],88:[function(_dereq_,module,exports){\n'use strict'; //suffix signals for verb tense, generated from test data\n\nvar compact = {\n  'Gerund': ['ing'],\n  'Actor': ['erer'],\n  'Infinitive': ['ate', 'ize', 'tion', 'rify', 'then', 'ress', 'ify', 'age', 'nce', 'ect', 'ise', 'ine', 'ish', 'ace', 'ash', 'ure', 'tch', 'end', 'ack', 'and', 'ute', 'ade', 'ock', 'ite', 'ase', 'ose', 'use', 'ive', 'int', 'nge', 'lay', 'est', 'ain', 'ant', 'ent', 'eed', 'er', 'le', 'own', 'unk', 'ung', 'en'],\n  'PastTense': ['ed', 'lt', 'nt', 'pt', 'ew', 'ld'],\n  'PresentTense': ['rks', 'cks', 'nks', 'ngs', 'mps', 'tes', 'zes', 'ers', 'les', 'acks', 'ends', 'ands', 'ocks', 'lays', 'eads', 'lls', 'els', 'ils', 'ows', 'nds', 'ays', 'ams', 'ars', 'ops', 'ffs', 'als', 'urs', 'lds', 'ews', 'ips', 'es', 'ts', 'ns', 's']\n};\nvar suffix_rules = {};\nvar keys = Object.keys(compact);\nvar l = keys.length;\n\nfor (var i = 0; i < l; i++) {\n  var l2 = compact[keys[i]].length;\n\n  for (var o = 0; o < l2; o++) {\n    suffix_rules[compact[keys[i]][o]] = keys[i];\n  }\n}\n\nmodule.exports = suffix_rules;\n\n},{}],89:[function(_dereq_,module,exports){\n'use strict'; //turn a infinitiveVerb, like \"walk\" into an adjective like \"walkable\"\n\nvar rules = [[/y$/, 'i'], //relay - reliable\n[/([aeiou][n])$/, '$1n']]; //convert - 'convertible'\n//http://grammarist.com/usage/able-ible/\n//http://blog.oxforddictionaries.com/2012/10/ibles-and-ables/\n\nvar ible_suffixes = {\n  collect: true,\n  exhaust: true,\n  convert: true,\n  digest: true,\n  discern: true,\n  dismiss: true,\n  reverse: true,\n  access: true,\n  collapse: true,\n  express: true\n};\nvar irregulars = {\n  eat: 'edible',\n  hear: 'audible',\n  see: 'visible',\n  defend: 'defensible',\n  write: 'legible',\n  move: 'movable',\n  divide: 'divisible',\n  perceive: 'perceptible'\n}; //takes an infitive verb, and returns an adjective form\n\nvar toAdjective = function toAdjective(str) {\n  if (irregulars.hasOwnProperty(str)) {\n    return irregulars[str];\n  }\n\n  for (var i = 0; i < rules.length; i++) {\n    if (rules[i][0].test(str) === true) {\n      str = str.replace(rules[i][0], rules[i][1]);\n    }\n  } //ible/able\n\n\n  var adj = str + 'able';\n\n  if (ible_suffixes[str]) {\n    adj = str + 'ible';\n  }\n\n  return adj;\n};\n\nmodule.exports = toAdjective;\n\n},{}],90:[function(_dereq_,module,exports){\n'use strict'; //turn any verb into its infinitive form\n\nvar rules = _dereq_('./rules');\n\nvar predict = _dereq_('../predict');\n\nvar toInfinitive = function toInfinitive(t, world) {\n  var irregulars = world.cache.toInfinitive || {}; //verb_mapping(world.conjugations); //TODO: do this at world cache\n\n  if (t.tags.Infinitive) {\n    return t.normal;\n  } //check the irregular verb conjugations\n\n\n  if (irregulars.hasOwnProperty(t.normal) === true) {\n    return irregulars[t.normal];\n  } //check the suffix rules\n\n\n  var form = predict(t);\n\n  if (rules[form]) {\n    for (var i = 0; i < rules[form].length; i++) {\n      var rule = rules[form][i];\n\n      if (t.normal.match(rule.reg)) {\n        return t.normal.replace(rule.reg, rule.to);\n      }\n    }\n  }\n\n  return t.normal;\n};\n\nmodule.exports = toInfinitive;\n\n},{\"../predict\":87,\"./rules\":91}],91:[function(_dereq_,module,exports){\n'use strict'; //rules for turning a verb into infinitive form\n\nvar rules = {\n  Participle: [{\n    reg: /own$/i,\n    to: 'ow'\n  }, {\n    reg: /(.)un([g|k])$/i,\n    to: '$1in$2'\n  }],\n  Actor: [{\n    reg: /(er)er$/i,\n    to: '$1'\n  }],\n  PresentTense: [{\n    reg: /(..)(ies)$/i,\n    to: '$1y'\n  }, {\n    reg: /(tch|sh)es$/i,\n    to: '$1'\n  }, {\n    reg: /(ss|zz)es$/i,\n    to: '$1'\n  }, {\n    reg: /([tzlshicgrvdnkmu])es$/i,\n    to: '$1e'\n  }, {\n    reg: /(n[dtk]|c[kt]|[eo]n|i[nl]|er|a[ytrl])s$/i,\n    to: '$1'\n  }, {\n    reg: /(ow)s$/i,\n    to: '$1'\n  }, {\n    reg: /(op)s$/i,\n    to: '$1'\n  }, {\n    reg: /([eirs])ts$/i,\n    to: '$1t'\n  }, {\n    reg: /(ll)s$/i,\n    to: '$1'\n  }, {\n    reg: /(el)s$/i,\n    to: '$1'\n  }, {\n    reg: /(ip)es$/i,\n    to: '$1e'\n  }, {\n    reg: /ss$/i,\n    to: 'ss'\n  }, {\n    reg: /s$/i,\n    to: ''\n  }],\n  Gerund: [{\n    reg: /pping$/i,\n    to: 'p'\n  }, {\n    reg: /lling$/i,\n    to: 'll'\n  }, {\n    reg: /tting$/i,\n    to: 't'\n  }, {\n    reg: /dding$/i,\n    to: 'd'\n  }, {\n    reg: /ssing$/i,\n    to: 'ss'\n  }, {\n    reg: /(..)gging$/i,\n    to: '$1g'\n  }, {\n    reg: /([^aeiou])ying$/i,\n    to: '$1y'\n  }, {\n    reg: /([^ae]i.)ing$/i,\n    to: '$1e'\n  }, {\n    reg: /(ea.)ing$/i,\n    to: '$1'\n  }, {\n    reg: /(u[rtcb]|[bdtpkg]l|n[cg]|a[gdkvtc]|[ua]s|[dr]g|yz|o[rlsp]|cre)ing$/i,\n    to: '$1e'\n  }, {\n    reg: /(ch|sh)ing$/i,\n    to: '$1'\n  }, {\n    reg: /(..)ing$/i,\n    to: '$1'\n  }],\n  PastTense: [{\n    reg: /(ued)$/i,\n    to: 'ue'\n  }, {\n    reg: /a([^aeiouy])ed$/i,\n    to: 'a$1e'\n  }, {\n    reg: /([aeiou]zz)ed$/i,\n    to: '$1'\n  }, {\n    reg: /(e|i)lled$/i,\n    to: '$1ll'\n  }, {\n    reg: /(.)(sh|ch)ed$/i,\n    to: '$1$2'\n  }, {\n    reg: /(tl|gl)ed$/i,\n    to: '$1e'\n  }, {\n    reg: /(um?pt?)ed$/i,\n    to: '$1'\n  }, {\n    reg: /(ss)ed$/i,\n    to: '$1'\n  }, {\n    reg: /pped$/i,\n    to: 'p'\n  }, {\n    reg: /tted$/i,\n    to: 't'\n  }, {\n    reg: /(..)gged$/i,\n    to: '$1g'\n  }, {\n    reg: /(..)lked$/i,\n    to: '$1lk'\n  }, {\n    reg: /([^aeiouy][aeiou])ked$/i,\n    to: '$1ke'\n  }, {\n    reg: /(.[aeiou])led$/i,\n    to: '$1l'\n  }, {\n    reg: /(..)(h|ion|n[dt]|ai.|[cs]t|pp|all|ss|tt|int|ail|ld|en|oo.|er|k|pp|w|ou.|rt|ght|rm)ed$/i,\n    to: '$1$2'\n  }, {\n    reg: /(.ut)ed$/i,\n    to: '$1e'\n  }, {\n    reg: /(.pt)ed$/i,\n    to: '$1'\n  }, {\n    reg: /(us)ed$/i,\n    to: '$1e'\n  }, {\n    reg: /(..[^aeiouy])ed$/i,\n    to: '$1e'\n  }, {\n    reg: /(..)ied$/i,\n    to: '$1y'\n  }, {\n    reg: /(.o)ed$/i,\n    to: '$1o'\n  }, {\n    reg: /(..i)ed$/i,\n    to: '$1'\n  }, {\n    reg: /(.a[^aeiou])ed$/i,\n    to: '$1'\n  }, {\n    reg: /([rl])ew$/i,\n    to: '$1ow'\n  }, {\n    reg: /([pl])t$/i,\n    to: '$1t'\n  }]\n};\nmodule.exports = rules;\n\n},{}],92:[function(_dereq_,module,exports){\n\"use strict\";\n\n//these are contractions with a implicit verb.\nvar expand = function expand(vb) {\n  vb.match('#Contraction+').list.forEach(function (ts) {\n    if (ts.has('#Verb')) {\n      ts.terms.forEach(function (t) {\n        if (t.silent_term) {\n          //this term also needs a space now too\n          if (!t.text) {\n            t.whitespace.before = ' ';\n          }\n\n          t._text = t.silent_term; //handle (some) capitalization\n\n          if (t.tags.TitleCase) {\n            t.toTitleCase();\n          }\n\n          t.normalize();\n          t.silent_term = null;\n          t.unTag('Contraction', 'expanded');\n        }\n      });\n    }\n  });\n  return vb;\n};\n\nmodule.exports = expand;\n\n},{}],93:[function(_dereq_,module,exports){\n'use strict'; //turns a verb negative - may not have enough information to do it properly\n// (eg 'did not eat' vs 'does not eat') - needs the noun\n\nvar toInfinitive = _dereq_('./methods/toInfinitive'); //this methods operate on parentTerms, so return subset\n\n\nvar getVerb = function getVerb(ts) {\n  ts = ts.match('(#Adverb|#Auxiliary|#Verb|#Negative|#Particle)+');\n  ts = ts.splitAfter('#Comma');\n  return ts.list[0];\n};\n\nvar toNegative = function toNegative(ts) {\n  //would not walk\n  var modal = ts.match('#Auxiliary').first(); //.notIf('(is|are|was|will|has|had)').first(); //.first();\n\n  if (modal.found) {\n    var index = modal.list[0].index();\n    var vb = ts.parentTerms.insertAt(index + 1, 'not', 'Verb');\n    vb.match('not').tag('Negative', 'tag-not');\n    return getVerb(vb);\n  } //words that pair easily with a 'not' - 'is not'\n\n\n  var copula = ts.match('(#Copula|will|has|had|do)').first();\n\n  if (copula.found) {\n    var _index = copula.list[0].index();\n\n    var _vb = ts.parentTerms.insertAt(_index + 1, 'not', 'Verb');\n\n    _vb.match('not').tag('Negative', 'tag-not');\n\n    return getVerb(_vb);\n  }\n\n  var isPlural = ts.isPlural(); //walked -> did not walk\n\n  var past = ts.match('#PastTense').last();\n\n  if (past.found) {\n    // past.debug();\n    var first = past.list[0];\n\n    var _index2 = first.index();\n\n    first.terms[0].text = toInfinitive(first.terms[0], ts.world);\n\n    var _vb2 = ts.parentTerms.insertAt(_index2, 'did not', 'Verb'); //add 'do not'?\n\n\n    _vb2.match('not').tag('Negative', 'tag-not');\n\n    return getVerb(_vb2);\n  } //walks -> does not walk\n\n\n  var pres = ts.match('#PresentTense').first();\n\n  if (pres.found) {\n    var _first = pres.list[0];\n\n    var _index3 = _first.index();\n\n    _first.terms[0].text = toInfinitive(_first.terms[0], ts.world); //some things use 'do not', everything else is 'does not'\n\n    var noun = ts.getNoun();\n    var _vb3 = null;\n\n    if (noun.match('(i|we|they|you)').found) {\n      _vb3 = ts.parentTerms.insertAt(_index3, 'do not', 'Verb');\n    } else {\n      _vb3 = ts.parentTerms.insertAt(_index3, 'does not', 'Verb');\n    }\n\n    _vb3.match('not').tag('Negative', 'tag-not');\n\n    return getVerb(_vb3);\n  } //not walking\n\n\n  var gerund = ts.match('#Gerund').last();\n\n  if (gerund.found) {\n    var _index4 = gerund.list[0].index();\n\n    var _vb4 = ts.parentTerms.insertAt(_index4, 'not', 'Verb');\n\n    _vb4.match('not').tag('Negative', 'tag-not');\n\n    return getVerb(_vb4);\n  } //walk -> do not walk\n\n\n  var verb = ts.match('#Verb').last();\n\n  if (verb.found) {\n    var _first2 = verb.list[0];\n\n    var _index5 = _first2.index();\n\n    _first2.terms[0].text = toInfinitive(_first2.terms[0], ts.world);\n    var _vb5 = ts;\n\n    if (isPlural) {\n      _vb5 = ts.parentTerms.insertAt(_index5 - 1, 'do not', 'Verb');\n    } else {\n      _vb5 = ts.parentTerms.insertAt(_index5 - 1, 'does not', 'Verb');\n    }\n\n    _vb5.match('not').tag('Negative', 'tag-not');\n\n    return getVerb(_vb5);\n  }\n\n  return ts;\n};\n\nmodule.exports = toNegative;\n\n},{\"./methods/toInfinitive\":90}],94:[function(_dereq_,module,exports){\n'use strict';\n\nvar Terms = _dereq_('../../paths').Terms;\n\nvar _conjugate = _dereq_('./methods/conjugate');\n\nvar toAdjective = _dereq_('./methods/toAdjective');\n\nvar interpret = _dereq_('./interpret');\n\nvar _toNegative = _dereq_('./toNegative');\n\nvar _isPlural = _dereq_('./methods/isPlural');\n\nvar expand = _dereq_('./methods/verbContraction');\n\nvar _parse = function parse(r) {\n  var original = r;\n  r.negative = r.match('#Negative');\n  r.adverbs = r.match('#Adverb');\n  var aux = r.clone().not('(#Adverb|#Negative)');\n  r.verb = aux.match('#Verb').not('#Particle').last();\n  r.particle = aux.match('#Particle').last();\n\n  if (r.verb.found) {\n    var str = r.verb.out('normal');\n    r.auxiliary = original.not(str).not('(#Adverb|#Negative)');\n    r.verb = r.verb.list[0].terms[0]; // r.auxiliary = aux.match('#Auxiliary+');\n  } else {\n    r.verb = original.terms[0];\n    r.auxiliary = aux.not('.');\n  }\n\n  return r;\n};\n\nvar methods = {\n  parse: function parse() {\n    return _parse(this);\n  },\n  data: function data(verbose) {\n    return {\n      text: this.out('text'),\n      normal: this.out('normal'),\n      parts: {\n        negative: this.negative.out('normal'),\n        auxiliary: this.auxiliary.out('normal'),\n        verb: this.verb.out('normal'),\n        particle: this.particle.out('normal'),\n        adverbs: this.adverbs.out('normal')\n      },\n      interpret: interpret(this, verbose),\n      conjugations: this.conjugate()\n    };\n  },\n  getNoun: function getNoun() {\n    if (!this.refTerms) {\n      return null;\n    }\n\n    var str = '#Adjective? #Noun+ ' + this.out('normal');\n    return this.refTerms.match(str).match('#Noun+');\n  },\n  //which conjugation is this right now?\n  conjugation: function conjugation() {\n    return interpret(this, false).tense;\n  },\n  //blast-out all forms\n  conjugate: function conjugate(verbose) {\n    return _conjugate(this, verbose);\n  },\n  isPlural: function isPlural() {\n    return _isPlural(this);\n  },\n\n  /** negation **/\n  isNegative: function isNegative() {\n    return this.match('#Negative').list.length === 1;\n  },\n  isPerfect: function isPerfect() {\n    return this.auxiliary.match('(have|had)').found;\n  },\n  toNegative: function toNegative() {\n    if (this.isNegative()) {\n      return this;\n    }\n\n    return _toNegative(this);\n  },\n  toPositive: function toPositive() {\n    return this.match('#Negative').delete();\n  },\n\n  /** conjugation **/\n  toPastTense: function toPastTense() {\n    if (this.has('#Contraction')) {\n      this.list = expand(this.parentTerms).list;\n    }\n\n    var obj = this.conjugate();\n    var end = obj.PastTense;\n    var r = this.replaceWith(end, false);\n    r.verb.tag('#PastTense');\n    return r;\n  },\n  toPresentTense: function toPresentTense() {\n    if (this.has('#Contraction')) {\n      expand(this.parentTerms);\n    }\n\n    var obj = this.conjugate();\n    var r = this.replaceWith(obj.PresentTense, false);\n    r.verb.tag('#PresentTense');\n    return r;\n  },\n  toFutureTense: function toFutureTense() {\n    if (this.has('#Contraction')) {\n      expand(this.parentTerms);\n    }\n\n    var obj = this.conjugate();\n    var r = this.replaceWith(obj.FutureTense, false);\n    r.verb.tag('#FutureTense');\n    return r;\n  },\n  toInfinitive: function toInfinitive() {\n    if (this.has('#Contraction')) {\n      expand(this.parentTerms);\n    }\n\n    var obj = this.conjugate();\n    var r = this.replaceWith(obj.Infinitive, false);\n    r.verb.tag('#Infinitive');\n    return r;\n  },\n  toGerund: function toGerund() {\n    if (this.has('#Contraction')) {\n      expand(this.parentTerms);\n    }\n\n    var obj = this.conjugate();\n    var aux = 'is'; //support 'i am', 'we are', 'he is'\n\n    var noun = this.getNoun().out('normal');\n\n    if (noun) {\n      var auxList = {\n        i: 'am',\n        we: 'are',\n        they: 'are'\n      };\n\n      if (auxList.hasOwnProperty(noun)) {\n        aux = auxList[noun];\n      }\n    }\n\n    var end = aux + ' ' + obj.Gerund; //i would go -> i would have be going\n    // if (this.auxiliary && this.auxiliary.has('#Modal') && !this.auxiliary.has('will')) {\n    //   end = this.auxiliary.match('#Modal').out() + ' have ' + end;\n    // }\n\n    var r = this.replaceWith(end, false);\n    r.verb.tag('#Gerund');\n    return r;\n  },\n  asAdjective: function asAdjective() {\n    return toAdjective(this.verb.out('normal'));\n  }\n};\n\nvar Verb = function Verb(arr, world, refText, parentTerms) {\n  Terms.call(this, arr, world, refText, parentTerms); //basic verb-phrase parsing:\n\n  return _parse(this);\n}; //Terms inheritence\n\n\nVerb.prototype = Object.create(Terms.prototype); //apply methods\n\nObject.keys(methods).forEach(function (k) {\n  Verb.prototype[k] = methods[k];\n});\nmodule.exports = Verb;\n\n},{\"../../paths\":8,\"./interpret\":76,\"./methods/conjugate\":81,\"./methods/isPlural\":86,\"./methods/toAdjective\":89,\"./methods/verbContraction\":92,\"./toNegative\":93}],95:[function(_dereq_,module,exports){\n'use strict'; //the steps and processes of pos-tagging\n\nvar step = {\n  punctuation_step: _dereq_('./steps/01-punctuation_step'),\n  emoji_step: _dereq_('./steps/02-emoji_step'),\n  lexicon_step: _dereq_('./steps/03-lexicon_step'),\n  lexicon_multi: _dereq_('./steps/04-lexicon_multi'),\n  web_step: _dereq_('./steps/05-web_step'),\n  suffix_step: _dereq_('./steps/06-suffix_step'),\n  neighbour_step: _dereq_('./steps/07-neighbour_step'),\n  capital_step: _dereq_('./steps/08-capital_step'),\n  noun_fallback: _dereq_('./steps/09-noun_fallback'),\n  contraction: _dereq_('./steps/10-contraction_step'),\n  date_step: _dereq_('./steps/11-date_step'),\n  auxiliary_step: _dereq_('./steps/12-auxiliary_step'),\n  negation_step: _dereq_('./steps/13-negation_step'),\n  comma_step: _dereq_('./steps/14-comma_step'),\n  quotation_step: _dereq_('./steps/15-quotation_step'),\n  possessive_step: _dereq_('./steps/16-possessive_step'),\n  acronym_step: _dereq_('./steps/17-acronym_step'),\n  person_step: _dereq_('./steps/18-person_step'),\n  organization_step: _dereq_('./steps/19-organization_step'),\n  parentheses_step: _dereq_('./steps/20-parentheses_step'),\n  plural_step: _dereq_('./steps/21-plural_step'),\n  value_step: _dereq_('./steps/22-value_step'),\n  corrections: _dereq_('./steps/23-corrections'),\n  properNoun: _dereq_('./steps/24-proper_noun'),\n  custom: _dereq_('./steps/25-custom')\n};\n\nvar tagPhrase = _dereq_('./phrase');\n\nvar tagger = function tagger(ts) {\n  ts = step.punctuation_step(ts);\n  ts = step.emoji_step(ts);\n  ts = step.lexicon_step(ts);\n  ts = step.lexicon_multi(ts);\n  ts = step.web_step(ts);\n  ts = step.suffix_step(ts);\n  ts = step.comma_step(ts); //formerly #14\n\n  ts = step.neighbour_step(ts);\n  ts = step.capital_step(ts);\n  ts = step.noun_fallback(ts);\n  ts = step.contraction(ts);\n  ts = step.date_step(ts); //3ms\n\n  ts = step.auxiliary_step(ts);\n  ts = step.negation_step(ts);\n  ts = step.quotation_step(ts);\n  ts = step.possessive_step(ts);\n  ts = step.acronym_step(ts);\n  ts = step.person_step(ts); //1ms\n\n  ts = step.organization_step(ts);\n  ts = step.parentheses_step(ts);\n  ts = step.plural_step(ts);\n  ts = step.value_step(ts);\n  ts = step.corrections(ts); //2ms\n\n  ts = step.properNoun(ts);\n  ts = tagPhrase(ts);\n  ts = step.custom(ts);\n  return ts;\n};\n\nmodule.exports = tagger;\n\n},{\"./phrase\":98,\"./steps/01-punctuation_step\":99,\"./steps/02-emoji_step\":100,\"./steps/03-lexicon_step\":101,\"./steps/04-lexicon_multi\":102,\"./steps/05-web_step\":103,\"./steps/06-suffix_step\":104,\"./steps/07-neighbour_step\":105,\"./steps/08-capital_step\":106,\"./steps/09-noun_fallback\":107,\"./steps/10-contraction_step\":108,\"./steps/11-date_step\":109,\"./steps/12-auxiliary_step\":110,\"./steps/13-negation_step\":111,\"./steps/14-comma_step\":112,\"./steps/15-quotation_step\":113,\"./steps/16-possessive_step\":114,\"./steps/17-acronym_step\":115,\"./steps/18-person_step\":116,\"./steps/19-organization_step\":117,\"./steps/20-parentheses_step\":118,\"./steps/21-plural_step\":119,\"./steps/22-value_step\":120,\"./steps/23-corrections\":121,\"./steps/24-proper_noun\":122,\"./steps/25-custom\":123}],96:[function(_dereq_,module,exports){\n'use strict'; //\n\nvar conditionPass = function conditionPass(ts) {\n  //'if it really goes, I will..'\n  var m = ts.match('#Condition .{1,7} #ClauseEnd'); //make sure it ends on a comma\n\n  if (m.found && m.match('#Comma$')) {\n    m.tag('Condition');\n  } //'go a bit further, if it then has a pronoun\n\n\n  m = ts.match('#Condition .{1,13} #ClauseEnd #Pronoun');\n\n  if (m.found && m.match('#Comma$')) {\n    m.not('#Pronoun$').tag('Condition', 'end-pronoun');\n  } //if it goes then ..\n\n\n  m = ts.match('#Condition .{1,7} then');\n\n  if (m.found) {\n    m.not('then$').tag('Condition', 'cond-then');\n  } //as long as ..\n\n\n  m = ts.match('as long as .{1,7} (then|#ClauseEnd)');\n\n  if (m.found) {\n    m.not('then$').tag('Condition', 'as-long-then');\n  } //at the end of a sentence:\n  //'..., if it really goes.'\n\n\n  m = ts.match('#Comma #Condition .{1,7} .$');\n\n  if (m.found) {\n    m.not('^#Comma').tag('Condition', 'comma-7-end');\n  } // '... if so.'\n\n\n  m = ts.match('#Condition .{1,4}$');\n\n  if (m.found) {\n    m.tag('Condition', 'cond-4-end');\n  }\n\n  return ts;\n};\n\nmodule.exports = conditionPass;\n\n},{}],97:[function(_dereq_,module,exports){\n'use strict'; //a verbPhrase is a sequence of axiliaries, adverbs and verbs\n\nvar verbPhrase = function verbPhrase(ts) {\n  if (ts.has('(#Verb|#Auxiliary)')) {\n    ts.match('#Verb').tag('VerbPhrase', 'verbphrase-verb'); //quickly was\n\n    ts.match('#Adverb #Verb').tag('VerbPhrase', 'adverb-verb'); //was quickly\n\n    ts.match('#Verb #Adverb').tag('VerbPhrase', 'verb-adverb'); //is not\n\n    ts.match('#Verb #Negative').tag('VerbPhrase', 'verb-not'); //never is\n\n    ts.match('never #Verb').tag('VerbPhrase', 'not-verb'); //'will have had'..\n\n    ts.match('#Auxiliary+').tag('VerbPhrase', '2'); // 'is'\n\n    ts.match('#Copula').tag('VerbPhrase', '#3'); //'really will'..\n\n    ts.match('#Adverb #Auxiliary').tag('VerbPhrase', '#4'); //to go\n    // ts.match('to #Infinitive').tag('VerbPhrase', '#5');\n    //work with\n    // ts.match('#Verb #Preposition').tag('VerbPhrase', '#6');\n  }\n\n  return ts;\n};\n\nmodule.exports = verbPhrase;\n\n},{}],98:[function(_dereq_,module,exports){\n'use strict';\n\nvar conditionPass = _dereq_('./00-conditionPass');\n\nvar verbPhrase = _dereq_('./01-verbPhrase'); // const nounPhrase = require('./02-nounPhrase');\n// const AdjectivePhrase = require('./03-adjectivePhrase');\n//\n\n\nvar phraseTag = function phraseTag(ts) {\n  ts = conditionPass(ts);\n  ts = verbPhrase(ts); // ts = nounPhrase(ts);\n  // ts = AdjectivePhrase(ts);\n\n  return ts;\n};\n\nmodule.exports = phraseTag;\n\n},{\"./00-conditionPass\":96,\"./01-verbPhrase\":97}],99:[function(_dereq_,module,exports){\n'use strict'; //regs-\n\nvar titleCase = /^[A-Z][a-z']/;\nvar romanNum = /^[IVXCM]+$/; //not so smart (right now)\n\nvar isRomanNumeral = function isRomanNumeral(t) {\n  if (t.text.length > 1 && romanNum.test(t.text) === true) {\n    return t.canBe('RomanNumeral');\n  }\n\n  return false;\n};\n\nvar oneLetters = {\n  a: true,\n  i: true,\n  //internet-slang\n  u: true,\n  r: true,\n  c: true,\n  k: true\n};\n\nvar punctuation_step = function punctuation_step(ts) {\n  var rules = ts.world.regex || [];\n  ts.terms.forEach(function (t, o) {\n    var str = t.text; //anything can be titlecase\n\n    if (titleCase.test(str) === true) {\n      t.tag('TitleCase', 'punct-rule');\n    } //add hyphenation\n\n\n    if (t.whitespace.after === '-' && ts.terms[o + 1] && ts.terms[o + 1].whitespace.before === '') {\n      t.tag('Hyphenated', 'has-hyphen');\n      ts.terms[o + 1].tag('Hyphenated', 'has-hyphen');\n    } //look at () parentheses\n\n\n    if (t.text[0] === '(') {\n      t.tag('StartBracket');\n    } //look at end-brackets (allow some punctuation after)!\n\n\n    if (/\\)[,.?!;:]?$/.test(t.text) === true) {\n      t.tag('EndBracket');\n    } //ok, normalise it a little,\n\n\n    str = str.replace(/[,\\.\\?]$/, ''); //do punctuation rules (on t.text)\n\n    for (var i = 0; i < rules.length; i++) {\n      var r = rules[i];\n\n      if (r.reg.test(str) === true) {\n        //don't over-write any other known tags\n        if (t.canBe(r.tag)) {\n          t.tag(r.tag, 'punctuation-rule- \"' + r.reg.toString() + '\"');\n        }\n\n        return;\n      }\n    } //terms like 'e'\n\n\n    if (str.length === 1 && ts.terms[o + 1] && /[A-Z]/.test(str) && !oneLetters[str.toLowerCase()]) {\n      t.tag('Acronym', 'one-letter-acronym');\n    } //roman numerals (weak rn)\n\n\n    if (isRomanNumeral(t)) {\n      t.tag('RomanNumeral', 'is-roman-numeral');\n    } //'100+'\n\n\n    if (/[0-9]\\+$/.test(t.text) === true) {\n      t.tag('NumericValue', 'number-plus');\n    }\n  });\n  return ts;\n};\n\nmodule.exports = punctuation_step;\n\n},{}],100:[function(_dereq_,module,exports){\n'use strict';\n\nvar emojiReg = _dereq_('./rules/emoji_regex');\n\nvar emoticon = _dereq_('./rules/emoticon_list'); //for us, there's three types -\n// * ;) - emoticons\n// * 🌵 - unicode emoji\n// * :smiling_face: - asci-represented emoji\n//test for forms like ':woman_tone2:‍:ear_of_rice:'\n//https://github.com/Kikobeats/emojis-keywords/blob/master/index.js\n\n\nvar isColonEmoji = function isColonEmoji(t) {\n  if (t.text.charAt(0) === ':') {\n    //end comma can be last or second-last ':haircut_tone3:‍♀️'\n    if (t.text.match(/:.?$/) === null) {\n      return false;\n    } //ensure no spaces\n\n\n    if (t.text.match(' ')) {\n      return false;\n    } //reasonably sized\n\n\n    if (t.text.length > 35) {\n      return false;\n    }\n\n    return true;\n  }\n\n  return false;\n}; //check against emoticon whitelist\n\n\nvar isEmoticon = function isEmoticon(t) {\n  //normalize the 'eyes'\n  var str = t.text.replace(/^[:;]/, ':');\n  return emoticon.hasOwnProperty(str) === true;\n}; //\n\n\nvar emojiStep = function emojiStep(ts) {\n  for (var i = 0; i < ts.terms.length; i++) {\n    var t = ts.terms[i]; //test for :keyword: emojis\n\n    if (isColonEmoji(t)) {\n      t.tag('Emoji', 'colon-emoji');\n    } //test for unicode emojis\n\n\n    if (t.text.match(emojiReg)) {\n      t.tag('Emoji', 'unicode-emoji');\n    } //test for emoticon ':)' emojis\n\n\n    if (isEmoticon(t)) {\n      t.tag('Emoji', 'emoticon-emoji');\n    }\n  }\n\n  return ts;\n};\n\nmodule.exports = emojiStep;\n\n},{\"./rules/emoji_regex\":130,\"./rules/emoticon_list\":131}],101:[function(_dereq_,module,exports){\n'use strict';\n\nvar split = _dereq_('./contraction/split'); // const l = require('../../lexicon/init');\n// const lexicon = l.lexicon;\n\n\nvar lexicon_pass = function lexicon_pass(ts) {\n  var lexicon = ts.world.words || {}; //loop through each term\n\n  for (var i = 0; i < ts.terms.length; i++) {\n    var t = ts.terms[i]; //basic term lookup\n\n    if (lexicon.hasOwnProperty(t.normal) === true) {\n      t.tag(lexicon[t.normal], 'lexicon');\n      continue;\n    } //support silent_term matches\n\n\n    if (t.silent_term && lexicon.hasOwnProperty(t.silent_term) === true) {\n      t.tag(lexicon[t.silent_term], 'silent_term-lexicon');\n      continue;\n    } //check root version too\n\n\n    if (t.root && t.normal !== t.root) {\n      if (lexicon.hasOwnProperty(t.root) === true) {\n        t.tag(lexicon[t.root], 'lexicon');\n        continue;\n      }\n    } //support contractions (manually)\n\n\n    var parts = split(t);\n\n    if (parts && parts.start) {\n      var start = parts.start.toLowerCase();\n\n      if (lexicon.hasOwnProperty(start) === true) {\n        t.tag(lexicon[start], 'contraction-lexicon');\n        continue;\n      }\n    }\n  }\n\n  return ts;\n};\n\nmodule.exports = lexicon_pass;\n\n},{\"./contraction/split\":129}],102:[function(_dereq_,module,exports){\n'use strict';\n\nvar MAX = 4; //find terms in the lexicon longer than one word (like 'hong kong')\n\nvar findMultiWords = function findMultiWords(ts, i, world) {\n  var lex = world.words;\n  var start = ts.terms[i].root;\n  var nextTerms = ts.terms.slice(i + 1, i + MAX).map(function (t) {\n    return t.root;\n  }); //look for matches, try biggest first\n\n  var max = MAX;\n\n  if (nextTerms.length < max) {\n    max = nextTerms.length;\n  }\n\n  for (var k = max; k > 0; k -= 1) {\n    var howAbout = start + ' ' + nextTerms.slice(0, k).join(' ');\n\n    if (lex.hasOwnProperty(howAbout) === true) {\n      ts.slice(i, i + k + 1).tag(lex[howAbout], 'multi-lexicon-' + howAbout);\n      return k;\n    }\n  }\n\n  return 0;\n}; //try multiple-word matches in the lexicon (users and default)\n\n\nvar lexiconMulti = function lexiconMulti(ts) {\n  ts.world.cache = ts.world.cache || {};\n  var firstWords = ts.world.cache.firstWords || {};\n\n  for (var i = 0; i < ts.terms.length; i++) {\n    var t = ts.terms[i]; //try multi words from user-lexicon\n\n    if (firstWords.hasOwnProperty(t.root) === true) {\n      var jump = findMultiWords(ts, i, ts.world);\n      i += jump;\n      continue;\n    }\n  }\n\n  return ts;\n};\n\nmodule.exports = lexiconMulti;\n\n},{}],103:[function(_dereq_,module,exports){\n'use strict'; //identify urls, hashtags, @mentions, emails\n//regs\n\nvar email = /^\\w+@\\w+\\.[a-z]{2,3}$/; //not fancy\n\nvar hashTag = /^#[a-z0-9_]{2,}$/;\nvar atMention = /^@\\w{2,}$/;\nvar urlA = /^(https?:\\/\\/|www\\.)\\w+\\.[a-z]{2,3}/; //with http/www\n\nvar urlB = /^[\\w\\.\\/]+\\.(com|net|gov|org|ly|edu|info|biz|ru|jp|de|in|uk|br)/; //http://mostpopularwebsites.net/top-level-domain\n\nvar web_pass = function web_pass(terms) {\n  for (var i = 0; i < terms.length; i++) {\n    var t = terms.get(i);\n    var str = t.text.trim().toLowerCase();\n\n    if (email.test(str) === true) {\n      t.tag('Email', 'web_pass');\n    }\n\n    if (hashTag.test(str) === true) {\n      t.tag('HashTag', 'web_pass');\n    }\n\n    if (atMention.test(str) === true) {\n      t.tag('AtMention', 'web_pass');\n    }\n\n    if (urlA.test(str) === true || urlB.test(str) === true) {\n      t.tag('Url', 'web_pass');\n    }\n  }\n\n  return terms;\n};\n\nmodule.exports = web_pass;\n\n},{}],104:[function(_dereq_,module,exports){\n'use strict';\n\nvar regs = _dereq_('./rules/regex_list');\n\nvar suffixes = _dereq_('./rules/suffix_lookup');\n\nvar misc = [//slang things\n[/^(lol)+[sz]$/, 'Expression'], //lol\n[/^ma?cd[aeiou]/, 'LastName'], //macdonell - Last patterns https://en.wikipedia.org/wiki/List_of_family_name_affixes\n//starting-ones\n[/^[\\-\\+]?[0-9][0-9,]*(\\.[0-9])*$/, 'Cardinal'], //like 5\n[/^(un|de|re)\\\\-[a-z]../, 'Verb'], [/^[\\-\\+]?[0-9]+(\\.[0-9])*$/, 'NumericValue'], [/^https?\\:?\\/\\/[a-z0-9]/, 'Url'], //the colon is removed in normalisation\n[/^www\\.[a-z0-9]/, 'Url'], [/^(over|under)[a-z]{2,}/, 'Adjective'], [/^[0-9]{1,4}\\.[0-9]{1,2}\\.[0-9]{1,4}$/, 'Date'], // 03-02-89\n//ending-ones\n[/^[0-9]+([a-z]{1,2})$/, 'Value'], //like 5kg\n[/^[0-9][0-9,\\.]*(st|nd|rd|r?th)$/, ['NumericValue', 'Ordinal']], //like 5th\n//middle (anywhere)\n[/[a-z]*\\\\-[a-z]*\\\\-/, 'Adjective']]; //straight-up lookup of known-suffixes\n\nvar lookup = function lookup(t) {\n  var len = t.normal.length;\n  var max = 7;\n\n  if (len <= max) {\n    max = len - 1;\n  }\n\n  for (var i = max; i > 1; i -= 1) {\n    var str = t.normal.substr(len - i, len);\n\n    if (suffixes[i][str] !== undefined) {\n      // console.log('suffix-match: ' + str);\n      return suffixes[i][str];\n    }\n  }\n\n  return null;\n}; //word-regexes indexed by last-character\n\n\nvar regexFn = function regexFn(t) {\n  var char = t.normal.charAt(t.normal.length - 1);\n\n  if (regs[char] === undefined) {\n    return null;\n  }\n\n  var arr = regs[char];\n\n  for (var o = 0; o < arr.length; o++) {\n    if (arr[o][0].test(t.normal) === true) {\n      return arr[o];\n    }\n  }\n\n  return null;\n};\n\nvar suffix_step = function suffix_step(ts) {\n  for (var i = 0; i < ts.terms.length; i++) {\n    var t = ts.terms[i]; //try known suffixes\n\n    var tag = lookup(t);\n\n    if (tag !== null && t.canBe(tag) === true) {\n      t.tag(tag, 'suffix-lookup');\n      continue;\n    } //apply regexes by final-char\n\n\n    tag = regexFn(t);\n\n    if (tag !== null && t.canBe(tag[1]) === true) {\n      t.tag(tag[1], 'regex-list: ' + String(tag[0]));\n      continue;\n    } //apply misc regexes\n\n\n    for (var o = 0; o < misc.length; o++) {\n      if (misc[o][0].test(t.normal) === true) {\n        tag = misc[o][1];\n\n        if (t.canBe(tag) === true) {\n          t.tag(tag, 'misc-regex-' + misc[o][0]);\n        }\n      }\n    }\n  }\n\n  return ts;\n};\n\nmodule.exports = suffix_step;\n\n},{\"./rules/regex_list\":133,\"./rules/suffix_lookup\":134}],105:[function(_dereq_,module,exports){\n'use strict';\n\nvar markov = _dereq_('./rules/neighbours');\n\nvar afterThisWord = markov.afterThisWord;\nvar beforeThisWord = markov.beforeThisWord;\nvar beforeThisPos = markov.beforeThisPos;\nvar afterThisPos = markov.afterThisPos;\nvar nothing = {\n  TitleCase: true,\n  UpperCase: true,\n  CamelCase: true,\n  Hyphenated: true,\n  StartBracket: true,\n  EndBracket: true,\n  Comma: true,\n  ClauseEnd: true\n}; //basically a last-ditch effort before everything falls back to a noun\n//for unknown terms, look left + right first, and hit-up the markov-chain for clues\n\nvar neighbour_step = function neighbour_step(ts) {\n  ts.terms.forEach(function (t, n) {\n    //is it still unknown?\n    var termTags = Object.keys(t.tags);\n    termTags = termTags.filter(function (tag) {\n      return nothing.hasOwnProperty(tag) === false;\n    });\n\n    if (termTags.length === 0) {\n      var lastTerm = ts.terms[n - 1];\n      var nextTerm = ts.terms[n + 1]; //look at previous word for clues\n\n      if (lastTerm && afterThisWord.hasOwnProperty(lastTerm.normal) && !lastTerm.tags.ClauseEnd) {\n        t.tag(afterThisWord[lastTerm.normal], 'neighbour-after-\"' + lastTerm.normal + '\"');\n        return;\n      } //look at next word for clues..\n      //(not if there's a comma, though)\n\n\n      if (!t.tags.ClauseEnd && nextTerm && beforeThisWord.hasOwnProperty(nextTerm.normal)) {\n        t.tag(beforeThisWord[nextTerm.normal], 'neighbour-before-\"' + nextTerm.normal + '\"');\n        return;\n      } //look at the last POS for clues\n\n\n      var tags = [];\n\n      if (lastTerm) {\n        tags = Object.keys(lastTerm.tags);\n\n        for (var i = 0; i < tags.length; i++) {\n          if (afterThisPos[tags[i]]) {\n            t.tag(afterThisPos[tags[i]], 'neighbour-after-[' + tags[i] + ']');\n            return;\n          }\n        }\n      } //look at the next POS for clues\n\n\n      if (nextTerm) {\n        tags = Object.keys(nextTerm.tags);\n\n        for (var _i = 0; _i < tags.length; _i++) {\n          if (beforeThisPos[tags[_i]]) {\n            t.tag(beforeThisPos[tags[_i]], 'neighbour-before-[' + tags[_i] + ']');\n            return;\n          }\n        }\n      }\n    }\n  });\n  return ts;\n};\n\nmodule.exports = neighbour_step;\n\n},{\"./rules/neighbours\":132}],106:[function(_dereq_,module,exports){\n'use strict'; //titlecase is a signal for a noun\n\nvar capital_logic = function capital_logic(s) {\n  //(ignore first word)\n  for (var i = 1; i < s.terms.length; i++) {\n    var _t = s.terms[i]; //has a capital, but isn't too weird.\n\n    if (_t.tags.TitleCase && _t.isWord()) {\n      _t.tag('Noun', 'capital-step');\n\n      _t.tag('TitleCase', 'capital-step');\n    }\n  } //support first-word of sentence as proper titlecase\n\n\n  var t = s.terms[0];\n\n  if (t && t.tags.TitleCase) {\n    if (t.tags.Person || t.tags.Organization || t.tags.Place) {\n      t.tag('TitleCase', 'first-term-capital');\n    }\n  }\n\n  return s;\n};\n\nmodule.exports = capital_logic;\n\n},{}],107:[function(_dereq_,module,exports){\n'use strict'; //tag word as noun if we know nothing about it, still.\n//tags that dont really count\n\nvar nothing = {\n  TitleCase: true,\n  UpperCase: true,\n  CamelCase: true,\n  Hyphenated: true,\n  StartBracket: true,\n  EndBracket: true,\n  Comma: true,\n  ClauseEnd: true\n}; //are the tags basically empty\n\nvar gotNothing = function gotNothing(t) {\n  //fail-fast\n  if (t.tags.Noun || t.tags.Verb || t.tags.Adjective) {\n    return false;\n  }\n\n  var tags = Object.keys(t.tags);\n\n  if (tags.length === 0) {\n    return true;\n  }\n\n  if (tags.filter(function (tag) {\n    return !nothing[tag];\n  }).length === 0) {\n    return true;\n  }\n\n  return false;\n}; //in last-ditch, try to match 'rewatch' -> 'watch' in the lexicon\n\n\nvar tryRoot = function tryRoot(t) {\n  if (/^(re|un)-?[^aeiou]./.test(t.normal) === true) {\n    var str = t.normal.replace(/^(re|un)-?/, '');\n\n    if (t.world.words.hasOwnProperty(str) === true) {\n      var tag = t.world.words[str];\n\n      if (tag === 'Infinitive' || tag === 'PresentTense' || tag === 'PastTense' || tag === 'Gerund') {\n        return tag;\n      }\n    }\n  }\n\n  return null;\n};\n\nvar noun_fallback = function noun_fallback(s) {\n  for (var i = 0; i < s.terms.length; i++) {\n    var t = s.terms[i]; //fail-fast\n\n    if (t.tags.Noun || t.tags.Verb) {\n      continue;\n    } //ensure it only has the tag 'Term'\n\n\n    if (gotNothing(t)) {\n      //ensure it's atleast word-looking\n      if (t.isWord() === false) {\n        continue;\n      }\n\n      var rootTag = tryRoot(t);\n\n      if (rootTag !== null) {\n        t.tag(rootTag, 'root-tag-match');\n        continue;\n      }\n\n      t.tag('Noun', 'noun-fallback');\n    }\n  }\n\n  return s;\n};\n\nmodule.exports = noun_fallback;\n\n},{}],108:[function(_dereq_,module,exports){\n'use strict';\n\nvar irregulars = _dereq_('./contraction/01-irregulars');\n\nvar isWasHas = _dereq_('./contraction/02-isWasHas');\n\nvar easyOnes = _dereq_('./contraction/03-easyOnes');\n\nvar numberRange = _dereq_('./contraction/04-numberRange'); //find and pull-apart contractions\n\n\nvar interpret = function interpret(ts) {\n  //check irregulars\n  ts = irregulars(ts); //guess-at ambiguous \"'s\" one\n\n  ts = isWasHas(ts); //check easy ones\n\n  ts = easyOnes(ts); //5-7\n\n  ts = numberRange(ts);\n  return ts;\n};\n\nmodule.exports = interpret;\n\n},{\"./contraction/01-irregulars\":124,\"./contraction/02-isWasHas\":125,\"./contraction/03-easyOnes\":126,\"./contraction/04-numberRange\":127}],109:[function(_dereq_,module,exports){\n'use strict'; //ambiguous 'may' and 'march'\n\nvar preps = '(in|by|before|during|on|until|after|of|within|all)';\nvar thisNext = '(last|next|this|previous|current|upcoming|coming)';\nvar sections = '(start|end|middle|starting|ending|midpoint|beginning)';\nvar seasons = '(spring|summer|winter|fall|autumn)'; //ensure a year is approximately typical for common years\n//please change in one thousand years\n\nvar tagYear = function tagYear(v, reason) {\n  if (v.found !== true) {\n    return;\n  }\n\n  v.list.forEach(function (ts) {\n    var num = parseInt(ts.terms[0].normal, 10);\n\n    if (num && num > 1000 && num < 3000) {\n      ts.terms[0].tag('Year', reason);\n    }\n  });\n}; //same, but for less-confident values\n\n\nvar tagYearSafer = function tagYearSafer(v, reason) {\n  if (v.found !== true) {\n    return;\n  }\n\n  v.list.forEach(function (ts) {\n    var num = parseInt(ts.terms[0].normal, 10);\n\n    if (num && num > 1900 && num < 2030) {\n      ts.terms[0].tag('Year', reason);\n    }\n  });\n}; //non-destructively tag values & prepositions as dates\n\n\nvar datePass = function datePass(ts) {\n  //ambiguous month - person forms\n  var people = '(january|april|may|june|summer|autumn|jan|sep)';\n\n  if (ts.has(people)) {\n    //give to april\n    ts.match(\"#Infinitive #Determiner? #Adjective? #Noun? (to|for) \".concat(people)).lastTerm().tag('Person', 'ambig-person'); //remind june\n\n    ts.match(\"#Infinitive \".concat(people)).lastTerm().tag('Person', 'infinitive-person'); //may waits for\n\n    ts.match(\"\".concat(people, \" #PresentTense (to|for)\")).firstTerm().tag('Person', 'ambig-active'); //april will\n\n    ts.match(\"\".concat(people, \" #Modal\")).firstTerm().tag('Person', 'ambig-modal'); //would april\n\n    ts.match(\"#Modal \".concat(people)).lastTerm().tag('Person', 'modal-ambig'); //with april\n\n    ts.match(\"(that|with|for) \".concat(people)).term(1).tag('Person', 'that-month'); //it is may\n\n    ts.match(\"#Copula \".concat(people)).term(1).tag('Person', 'is-may'); //may is\n\n    ts.match(\"\".concat(people, \" #Copula\")).term(0).tag('Person', 'may-is'); //april the 5th\n\n    ts.match(\"\".concat(people, \" the? #Value\")).term(0).tag('Month', 'person-value'); //wednesday april\n\n    ts.match(\"#Date \".concat(people)).term(1).tag('Month', 'correction-may'); //may 5th\n\n    ts.match(\"\".concat(people, \" the? #Value\")).firstTerm().tag('Month', 'may-5th'); //5th of may\n\n    ts.match(\"#Value of \".concat(people)).lastTerm().tag('Month', '5th-of-may'); //by april\n\n    ts.match(\"\".concat(preps, \" \").concat(people)).ifNo('#Holiday').term(1).tag('Month', 'preps-month'); //this april\n\n    ts.match(\"(next|this|last) \".concat(people)).term(1).tag('Month', 'correction-may'); //maybe not 'this'\n  } //ambiguous month - verb-forms\n\n\n  var verbs = '(may|march)';\n\n  if (ts.has(verbs)) {\n    //quickly march\n    ts.match(\"#Adverb \".concat(verbs)).lastTerm().tag('Infinitive', 'ambig-verb');\n    ts.match(\"\".concat(verbs, \" #Adverb\")).lastTerm().tag('Infinitive', 'ambig-verb'); //all march\n\n    ts.match(\"\".concat(preps, \" \").concat(verbs)).lastTerm().tag('Month', 'in-month'); //this march\n\n    ts.match(\"(next|this|last) \".concat(verbs)).lastTerm().tag('Month', 'this-month'); //with date\n\n    ts.match(\"\".concat(verbs, \" the? #Value\")).firstTerm().tag('Month', 'march-5th');\n    ts.match(\"#Value of? \".concat(verbs)).lastTerm().tag('Month', '5th-of-march'); //nearby\n\n    ts.match(\"[\".concat(verbs, \"] .? #Date\")).lastTerm().tag('Month', 'march-and-feb');\n    ts.match(\"#Date .? [\".concat(verbs, \"]\")).lastTerm().tag('Month', 'feb-and-march');\n\n    if (ts.has('march')) {\n      //march to\n      ts.match('march (up|down|back|to|toward)').term(0).tag('Infinitive', 'march-to'); //must march\n\n      ts.match('#Modal march').term(1).tag('Infinitive', 'must-march');\n    }\n  } //sun 5th\n\n\n  if (ts.has('sun')) {\n    //sun feb 2\n    ts.match('sun #Date').firstTerm().tag('WeekDay', 'sun-feb'); //sun the 5th\n\n    ts.match('sun the #Ordinal').tag('Date').firstTerm().tag('WeekDay', 'sun-the-5th'); //the sun\n\n    ts.match('#Determiner sun').lastTerm().tag('Singular', 'the-sun');\n  } //sat, nov 5th\n\n\n  if (ts.has('sat')) {\n    //sat november\n    ts.match('sat #Date').firstTerm().tag('WeekDay', 'sat-feb'); //this sat\n\n    ts.match(\"\".concat(preps, \" sat\")).lastTerm().tag('WeekDay', 'sat');\n  } //months:\n\n\n  if (ts.has('#Month')) {\n    //June 5-7th\n    ts.match(\"#Month #DateRange+\").tag('Date', 'correction-numberRange'); //5th of March\n\n    ts.match('#Value of #Month').tag('Date', 'value-of-month'); //5 March\n\n    ts.match('#Cardinal #Month').tag('Date', 'cardinal-month'); //march 5 to 7\n\n    ts.match('#Month #Value to #Value').tag('Date', 'value-to-value'); //march the 12th\n\n    ts.match('#Month the #Value').tag('Date', 'month-the-value');\n  }\n\n  ts.match('in the (night|evening|morning|afternoon|day|daytime)').tag('Time', 'in-the-night');\n  ts.match('(#Value|#Time) (am|pm)').tag('Time', 'value-ampm'); //months:\n\n  if (ts.has('#Value')) {\n    //for 4 months\n    ts.match('for #Value #Duration').tag('Date', 'for-x-duration'); //values\n\n    ts.match('#Value #Abbreviation').tag('Value', 'value-abbr');\n    ts.match('a #Value').if('(hundred|thousand|million|billion|trillion|quadrillion|quintillion|sextillion|septillion)').tag('Value', 'a-value');\n    ts.match('(minus|negative) #Value').tag('Value', 'minus-value');\n    ts.match('#Value grand').tag('Value', 'value-grand'); // ts.match('#Ordinal (half|quarter)').tag('Value', 'ordinal-half');//not ready\n\n    ts.match('(half|quarter) #Ordinal').tag('Value', 'half-ordinal');\n    ts.match('(hundred|thousand|million|billion|trillion|quadrillion|quintillion|sextillion|septillion) and #Value').tag('Value', 'magnitude-and-value');\n    ts.match('#Value (point|decimal) #Value').tag('Value', 'value-point-value'); //for four days\n\n    ts.match(\"\".concat(preps, \"? #Value #Duration\")).tag('Date', 'value-duration');\n    ts.match('(#WeekDay|#Month) #Value').ifNo('#Money').tag('Date', 'date-value');\n    ts.match('#Value (#WeekDay|#Month)').ifNo('#Money').tag('Date', 'value-date'); //may twenty five\n\n    var vs = ts.match('#TextValue #TextValue');\n\n    if (vs.found && vs.has('#Date')) {\n      vs.tag('#Date', 'textvalue-date');\n    } //two days before\n\n\n    ts.match('#Value #Duration #Conjunction').tag('Date', 'val-duration-conjunction'); //two years old\n\n    ts.match('#Value #Duration old').unTag('Date', 'val-years-old');\n  } //seasons\n\n\n  if (ts.has(seasons)) {\n    ts.match(\"\".concat(preps, \"? \").concat(thisNext, \" \").concat(seasons)).tag('Date', 'thisNext-season');\n    ts.match(\"the? \".concat(sections, \" of \").concat(seasons)).tag('Date', 'section-season');\n  } //rest-dates\n\n\n  if (ts.has('#Date')) {\n    //june the 5th\n    ts.match('#Date the? #Ordinal').tag('Date', 'correction-date'); //last month\n\n    ts.match(\"\".concat(thisNext, \" #Date\")).tag('Date', 'thisNext-date'); //by 5 March\n\n    ts.match('due? (by|before|after|until) #Date').tag('Date', 'by-date'); //tomorrow before 3\n\n    ts.match('#Date (by|before|after|at|@|about) #Cardinal').not('^#Date').tag('Time', 'date-before-Cardinal'); //saturday am\n\n    ts.match('#Date (am|pm)').term(1).unTag('Verb').unTag('Copula').tag('Time', 'date-am');\n    ts.match('(last|next|this|previous|current|upcoming|coming|the) #Date').tag('Date', 'next-feb');\n    ts.match('#Date (#Preposition|to) #Date').tag('Date', 'date-prep-date'); //start of june\n\n    ts.match(\"the? \".concat(sections, \" of #Date\")).tag('Date', 'section-of-date'); //fifth week in 1998\n\n    ts.match('#Ordinal #Duration in #Date').tag('Date', 'duration-in-date'); //early in june\n\n    ts.match('(early|late) (at|in)? the? #Date').tag('Time', 'early-evening');\n  } //year/cardinal tagging\n\n\n  if (ts.has('#Cardinal')) {\n    var v = ts.match(\"#Date #Value #Cardinal\").lastTerm();\n    tagYear(v, 'date-value-year'); //scoops up a bunch\n\n    v = ts.match(\"#Date+ #Cardinal\").lastTerm();\n    tagYear(v, 'date-year'); //feb 8 2018\n\n    v = ts.match(\"#Month #Value #Cardinal\").lastTerm();\n    tagYear(v, 'month-value-year'); //feb 8 to 10th 2018\n\n    v = ts.match(\"#Month #Value to #Value #Cardinal\").lastTerm();\n    tagYear(v, 'month-range-year'); //in 1998\n\n    v = ts.match(\"(in|of|by|during|before|starting|ending|for|year) #Cardinal\").lastTerm();\n    tagYear(v, 'in-year'); //q2 2009\n\n    v = ts.match('(q1|q2|q3|q4) [#Cardinal]');\n    tagYear(v, 'in-year'); //2nd quarter 2009\n\n    v = ts.match('#Ordinal quarter [#Cardinal]');\n    tagYear(v, 'in-year'); //in the year 1998\n\n    v = ts.match('the year [#Cardinal]');\n    tagYear(v, 'in-year'); //it was 1998\n\n    v = ts.match('it (is|was) [#Cardinal]');\n    tagYearSafer(v, 'in-year'); //was 1998 and...\n\n    v = ts.match(\"#Cardinal !#Plural\").firstTerm();\n    tagYearSafer(v, 'year-unsafe');\n  } //another pass at dates..\n\n\n  if (ts.has('#Date')) {\n    //time:\n    if (ts.has('#Time')) {\n      ts.match('#Cardinal #Time').not('#Year').tag('Time', 'value-time');\n      ts.match('(by|before|after|at|@|about) #Time').tag('Time', 'preposition-time'); //2pm est\n\n      ts.match('#Time (eastern|pacific|central|mountain)').term(1).tag('Time', 'timezone');\n      ts.match('#Time (est|pst|gmt)').term(1).tag('Time', 'timezone abbr');\n    } //fix over-greedy\n\n\n    var date = ts.match('#Date+').splitOn('Clause');\n\n    if (date.has('(#Year|#Time)') === false) {\n      //12 february 12\n      date.match('#Value (#Month|#Weekday) #Value').lastTerm().unTag('Date');\n    }\n  }\n\n  return ts;\n};\n\nmodule.exports = datePass;\n\n},{}],110:[function(_dereq_,module,exports){\n'use strict'; //auxiliary verbs are extra verbs beside the main ones\n// \"[will be] going\" - etc.\n\nvar Auxiliary = {\n  'do': true,\n  'don\\'t': true,\n  'does': true,\n  'doesn\\'t': true,\n  'will': true,\n  'wont': true,\n  'won\\'t': true,\n  'have': true,\n  'haven\\'t': true,\n  'had': true,\n  'hadn\\'t': true,\n  'not': true\n};\n\nvar corrections = function corrections(ts) {\n  //set verbs as auxillaries\n  for (var i = 0; i < ts.terms.length; i++) {\n    var t = ts.terms[i];\n\n    if (Auxiliary[t.normal] || Auxiliary[t.silent_term]) {\n      var next = ts.terms[i + 1]; //if next word is a verb\n\n      if (next && (next.tags.Verb || next.tags.Adverb || next.tags.Negative)) {\n        t.tag('Auxiliary', 'corrections-Auxiliary');\n        continue;\n      }\n    }\n  }\n\n  return ts;\n};\n\nmodule.exports = corrections;\n\n},{}],111:[function(_dereq_,module,exports){\n'use strict'; // 'not' is sometimes a verb, sometimes an adjective\n\nvar negation_step = function negation_step(ts) {\n  for (var i = 0; i < ts.length; i++) {\n    var t = ts.get(i);\n\n    if (t.normal === 'not' || t.silent_term === 'not') {\n      //find the next verb/adjective\n      for (var o = i + 1; o < ts.length; o++) {\n        if (ts.get(o).tags.Verb) {\n          t.tag('VerbPhrase', 'negate-verb');\n          break;\n        }\n\n        if (ts.get(o).tags.Adjective) {\n          t.tag('AdjectivePhrase', 'negate-adj');\n          break;\n        }\n      }\n    }\n  }\n\n  return ts;\n};\n\nmodule.exports = negation_step;\n\n},{}],112:[function(_dereq_,module,exports){\n'use strict'; //-types of comma-use-\n// PlaceComma - Hollywood, California\n// List       - cool, fun, and great.\n// ClauseEnd  - if so, we do.\n//like Toronto, Canada\n\nvar isPlaceComma = function isPlaceComma(ts, i) {\n  var t = ts.terms[i];\n  var nextTerm = ts.terms[i + 1]; //'australia, canada' is a list\n\n  if (nextTerm && t.tags.Place && !t.tags.Country && nextTerm.tags.Country) {\n    return true;\n  }\n\n  return false;\n}; //adj, noun, or verb\n\n\nvar mainTag = function mainTag(t) {\n  if (t.tags.Adjective) {\n    return 'Adjective';\n  }\n\n  if (t.tags.Noun) {\n    return 'Noun';\n  }\n\n  if (t.tags.Verb) {\n    return 'Verb';\n  }\n\n  if (t.tags.Value) {\n    return 'Value';\n  }\n\n  return null;\n}; //take the first term with a comma, and test to the right.\n//the words with a comma must be the same pos.\n\n\nvar isList = function isList(ts, i) {\n  var start = i;\n  var tag = mainTag(ts.terms[i]); //ensure there's a following comma, and its the same pos\n  //then a Conjunction\n\n  var sinceComma = 0;\n  var count = 0;\n  var hasConjunction = false;\n\n  for (i = i + 1; i < ts.terms.length; i++) {\n    var t = ts.terms[i]; //are we approaching the end\n\n    if (count > 0 && t.tags.Conjunction) {\n      hasConjunction = true;\n      continue;\n    } //found one,\n\n\n    if (t.tags[tag]) {\n      //looks good. keep it going\n      if (t.tags.Comma) {\n        count += 1;\n        sinceComma = 0;\n        continue;\n      }\n\n      if (count > 0 && hasConjunction) {\n        //is this the end of the list?\n        ts.slice(start, i).tag('List');\n        return true;\n      }\n    }\n\n    sinceComma += 1; //have we gone too far without a comma?\n\n    if (sinceComma > 5) {\n      return false;\n    } //this one, not a clause..\n\n\n    if (tag === 'Value') {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nvar commaStep = function commaStep(ts) {\n  //tag the correct punctuation forms\n  for (var i = 0; i < ts.terms.length; i++) {\n    var t = ts.terms[i];\n    var punct = t.getPunctuation();\n\n    if (punct === ',') {\n      t.tag('Comma', 'comma-step');\n      continue;\n    }\n\n    if (punct === ';' || punct === ':') {\n      t.tag('ClauseEnd', 'clause-punt');\n      continue;\n    } //support elipses\n\n\n    if (t.whitespace.after.match(/^\\.\\./)) {\n      t.tag('ClauseEnd', 'clause-elipses');\n      continue;\n    } //support ' - ' clause\n\n\n    if (ts.terms[i + 1] && ts.terms[i + 1].whitespace.before.match(/ - /)) {\n      t.tag('ClauseEnd', 'hypen-clause');\n      continue;\n    }\n  } //disambiguate the commas now\n\n\n  for (var _i = 0; _i < ts.terms.length; _i++) {\n    var _t = ts.terms[_i];\n\n    if (_t.tags.Comma) {\n      //if we already got it\n      if (_t.tags.List) {\n        continue;\n      } //like 'Hollywood, California'\n\n\n      if (isPlaceComma(ts, _i)) {\n        continue;\n      } //like 'cold, wet hands'\n\n\n      var found = isList(ts, _i); //otherwise, it's a phrasal comma, like 'you must, if you think so'\n\n      if (!found) {\n        _t.tag('ClauseEnd', 'phrasal-comma');\n      }\n    }\n  }\n\n  return ts;\n};\n\nmodule.exports = commaStep;\n\n},{}],113:[function(_dereq_,module,exports){\n'use strict';\n\nvar quotemarks = {\n  \"\\\"\": {\n    close: \"\\\"\",\n    tag: 'StraightDoubleQuotes'\n  },\n  \"\\uFF02\": {\n    close: \"\\uFF02\",\n    tag: 'StraightDoubleQuotesWide'\n  },\n  \"'\": {\n    close: \"'\",\n    tag: 'StraightSingleQuotes'\n  },\n  \"\\u201C\": {\n    close: \"\\u201D\",\n    tag: 'CommaDoubleQuotes'\n  },\n  \"\\u2018\": {\n    close: \"\\u2019\",\n    tag: 'CommaSingleQuotes'\n  },\n  \"\\u201F\": {\n    close: \"\\u201D\",\n    tag: 'CurlyDoubleQuotesReversed'\n  },\n  \"\\u201B\": {\n    close: \"\\u2019\",\n    tag: 'CurlySingleQuotesReversed'\n  },\n  \"\\u201E\": {\n    close: \"\\u201D\",\n    tag: 'LowCurlyDoubleQuotes'\n  },\n  \"\\u2E42\": {\n    close: \"\\u201D\",\n    tag: 'LowCurlyDoubleQuotesReversed'\n  },\n  \"\\u201A\": {\n    close: \"\\u2019\",\n    tag: 'LowCurlySingleQuotes'\n  },\n  \"\\xAB\": {\n    close: \"\\xBB\",\n    tag: 'AngleDoubleQuotes'\n  },\n  \"\\u2039\": {\n    close: \"\\u203A\",\n    tag: 'AngleSingleQuotes'\n  },\n  // Prime 'non quotation'\n  \"\\u2035\": {\n    close: \"\\u2032\",\n    tag: 'PrimeSingleQuotes'\n  },\n  \"\\u2036\": {\n    close: \"\\u2033\",\n    tag: 'PrimeDoubleQuotes'\n  },\n  \"\\u2037\": {\n    close: \"\\u2034\",\n    tag: 'PrimeTripleQuotes'\n  },\n  // Prime 'quotation' variation\n  \"\\u301D\": {\n    close: \"\\u301E\",\n    tag: 'PrimeDoubleQuotes'\n  },\n  \"`\": {\n    close: \"\\xB4\",\n    tag: 'PrimeSingleQuotes'\n  },\n  \"\\u301F\": {\n    close: \"\\u301E\",\n    tag: 'LowPrimeDoubleQuotesReversed'\n  }\n}; // Convert the close quote to a regex.\n\nObject.keys(quotemarks).forEach(function (open) {\n  quotemarks[open].regex = new RegExp(quotemarks[open].close + '[;:,.]*');\n  quotemarks[open].open = open;\n}); // Improve open match detection.\n\nvar startQuote = new RegExp('[' + Object.keys(quotemarks).join('') + ']'); //tag a inline quotation as such\n\nvar quotation_step = function quotation_step(ts) {\n  // Isolate the text so it doesn't change.\n  var terms = ts.terms.slice(0); //.map(e => e.text);\n\n  for (var i = 0; i < terms.length; i++) {\n    var t = ts.terms[i];\n\n    if (startQuote.test(t.whitespace.before)) {\n      // Get the match and split it into groups\n      var quotes = t.whitespace.before.match(startQuote).shift().split(''); // Get close and tag info.\n\n      quotes = quotes.map(function (mark) {\n        return quotemarks[mark];\n      }); // Look for the ending\n\n      for (var o = 0; o < ts.terms.length; o++) {\n        // max-length don't go-on forever\n        if (!terms[i + o] || o > 28) {\n          break;\n        } // Find the close.\n\n\n        var index = -1;\n\n        for (var qi = 0; qi < quotes.length; qi += 1) {\n          if (quotes[qi].regex.test(terms[i + o].whitespace.after) === true) {\n            index = qi;\n            break;\n          }\n        }\n\n        if (index !== -1) {\n          // Remove the found\n          var quote = quotes.splice(index, 1).pop();\n\n          if (quote.regex.test(ts.terms[i + o].normal)) {\n            ts.terms[i + o].whitespace.after.replace(quote.regex, '');\n          } // Tag the things.\n\n\n          t.tag('StartQuotation', 'quotation_open');\n          ts.terms[i + o].tag('EndQuotation', 'quotation_close');\n          ts.slice(i, i + o + 1).tag('Quotation', 'quotation_step'); // Compensate for multiple close quotes ('\"Really\"')\n\n          o -= 1;\n\n          if (!quotes.length) {\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  return ts;\n};\n\nmodule.exports = quotation_step;\n\n},{}],114:[function(_dereq_,module,exports){\n'use strict'; //decide if an apostrophe s is a contraction or not\n// 'spencer's nice' -> 'spencer is nice'\n// 'spencer's house' -> 'spencer's house'\n\nvar singleQuotes = [[\"'\", \"'\"], // Straight Single Quotes\n[\"\\u2018\", \"\\u2019\"], // Comma Single Quotes\n[\"\\u201B\", \"\\u2019\"], // Curly Single Quotes Reversed\n[\"\\u201A\", \"\\u2019\"], // Low Curly Single Quotes\n[\"\\u2035\", \"\\u2032\"], // Prime Single Quotes Alt\n[\"`\", \"\\xB4\"] // Prime Single Quotes\n]; //these are always contractions\n\nvar blacklist = ['it\\'s', 'that\\'s']; // Get all types of single quote.\n\nvar apostrophes = '\\'‘’‛‚‵′`´';\nvar afterWord = new RegExp('([a-z]s[' + apostrophes + '])\\\\W*$'); // [^\\w]* match 0 or more of any char that is NOT alphanumeric\n\nvar hasApostrophe = new RegExp('[' + apostrophes + ']');\nvar trailers = new RegExp('[^' + apostrophes + '\\\\w]+$');\nvar quoteRegex = {};\nsingleQuotes.forEach(function (quote) {\n  quoteRegex[quote[0]] = new RegExp(quote[1] + '[^' + quote[1] + '\\\\w]*$');\n}); // Compensate for different `'`s in the blacklist\n\nblacklist.map(function (item) {\n  return new RegExp(item.replace('\\'', '[' + apostrophes + ']'));\n}); // A possessive means `'s` describes ownership\n// Not a contraction, like it's -> `it is`\n\nvar is_possessive = function is_possessive(terms, text, index) {\n  var thisWord = terms.get(index);\n  var nextWord = terms.get(index + 1);\n  var stepWord = terms.get(index + 2); //our booleans:\n  // `blacklist` are always contractions, not possessive\n\n  var inBlacklist = blacklist.map(function (r) {\n    return text.match(r);\n  }).find(function (m) {\n    return m;\n  }); // If no apostrophe s or s apostrophe\n\n  var endTick = hasApostrophe.test(thisWord.whitespace.after); // \"spencers'\" - this is always possessive - eg \"flanders'\"\n\n  var hasPronoun = thisWord.tags.Pronoun;\n\n  if (inBlacklist || hasPronoun || !endTick) {\n    return false;\n  }\n\n  if (afterWord.test(text) || nextWord === undefined) {\n    return true;\n  } // Next word is 'house'\n\n\n  if (nextWord.tags.Noun === true || thisWord.tags.ClauseEnd === true) {\n    return true;\n  } //rocket's red glare\n\n\n  if (stepWord !== undefined && nextWord.tags.Adjective && stepWord.tags.Noun) {\n    return true;\n  }\n\n  return false;\n}; // Tag each term as possessive, if it should\n\n\nvar possessiveStep = function possessiveStep(ts) {\n  var expectingClosers = [];\n\n  for (var i = 0; i < ts.length; i++) {\n    var term = ts.get(i);\n    var text = term.text; // First detect open quotes before detecting apostrophes\n\n    if (typeof quoteRegex[text[0]] !== 'undefined') {\n      // Add the expected closing quotes to our inspection array.\n      expectingClosers[expectingClosers.length] = quoteRegex[text[0]];\n      text = text.slice(1);\n    } // Pre checking for quotes. e.g: Carlos'.’. -> Carlos'.’\n\n\n    text = text.replace(trailers, ''); // If the string ends with an expected closer.\n\n    var closer = -1;\n\n    for (var qi = 0; qi < expectingClosers.length; qi += 1) {\n      if (expectingClosers[qi].test(text) === true) {\n        closer = qi;\n        break;\n      }\n    }\n\n    if (closer !== -1) {\n      text = text.replace(expectingClosers[closer], '');\n      delete expectingClosers[closer];\n    } // Post checking for quotes. e.g: Carlos'. -> Carlos'\n\n\n    text = text.replace(trailers, '');\n\n    if (is_possessive(ts, text, i)) {\n      // If it's not already a noun, co-erce it to one\n      if (!term.tags['Noun']) {\n        term.tag('Noun', 'possessive_pass');\n      }\n\n      term.tag('Possessive', 'possessive_pass'); // If it's been detected as a `Contraction`\n\n      if (term.tags.Contraction === true) {\n        // Remove the `Contraction` tag and silent_terms\n        term.unTag('Contraction');\n        ts.terms.splice(i + 1, 1);\n        term.silent_term = '';\n      }\n    }\n  }\n\n  return ts;\n};\n\nmodule.exports = possessiveStep;\n\n},{}],115:[function(_dereq_,module,exports){\n'use strict'; //tag 'FBI' as letters-representing-words.\n//we guess if letters are an acronym in the Term class.\n\nvar acronym_step = function acronym_step(ts) {\n  ts.terms.forEach(function (t) {\n    if (t.isAcronym()) {\n      t.tag('Acronym', 'acronym-step');\n    }\n  });\n  return ts;\n};\n\nmodule.exports = acronym_step;\n\n},{}],116:[function(_dereq_,module,exports){\n'use strict'; //sort-out things like 'theresa may', or 'will jones'.\n\nvar person_step = function person_step(ts) {\n  //mr Putin\n  ts.match('(mr|mrs|ms|dr) (#TitleCase|#Possessive)+').tag('#Person', 'mr-putin'); //a bunch of ambiguous first names\n\n  var maybeNoun = '(rose|robin|dawn|ray|holly|bill|joy|viola|penny|sky|violet|daisy|melody|kelvin|hope|mercedes|olive|jewel|faith|van|charity|miles|lily|summer|dolly|rod|dick|cliff|lane|reed|kitty|art|jean|trinity)';\n\n  if (ts.has(maybeNoun)) {\n    ts.match('(#Determiner|#Adverb|#Pronoun|#Possessive) [' + maybeNoun + ']').tag('Noun', 'the-ray');\n    ts.match(maybeNoun + ' (#Person|#Acronym|#TitleCase)').canBe('#Person').tag('Person', 'ray-smith');\n  } //verbs or people-names\n\n\n  var maybeVerb = '(pat|wade|ollie|will|rob|buck|bob|mark|jack)';\n\n  if (ts.has(maybeVerb)) {\n    ts.match('(#Modal|#Adverb) [' + maybeVerb + ']').tag('Verb', 'would-mark');\n    ts.match(maybeVerb + ' (#Person|#TitleCase)').tag('Person', 'rob-smith');\n  } //adjectives or people-names\n\n\n  var maybeAdj = '(misty|rusty|dusty|rich|randy)';\n\n  if (ts.has(maybeAdj)) {\n    ts.match('#Adverb [' + maybeAdj + ']').tag('Adjective', 'really-rich');\n    ts.match(maybeAdj + ' (#Person|#TitleCase)').tag('Person', 'randy-smith');\n  } //dates as people names\n\n\n  var maybeDate = '(april|june|may|jan|august|eve)';\n\n  if (ts.has(maybeDate)) {\n    ts.match(String(maybeDate) + ' (#Person|#TitleCase)').canBe('#Person').tag('Person', 'june-smith');\n    ts.match('(in|during|on|by|before|#Date) [' + maybeDate + ']').canBe('#Date').tag('Date', 'in-june');\n    ts.match(maybeDate + ' (#Date|#Value)').canBe('#Date').tag('Date', 'june-5th');\n  } //place-names as people-names\n\n\n  var maybePlace = '(paris|alexandria|houston|kobe|salvador|sydney)';\n\n  if (ts.has(maybePlace)) {\n    ts.match('(in|near|at|from|to|#Place) [' + maybePlace + ']').canBe('#Place').tag('Place', 'in-paris');\n    ts.match('[' + maybePlace + '] #Place').canBe('#Place').tag('Place', 'paris-france');\n    ts.match('[' + maybePlace + '] #Person').canBe('#Person').tag('Person', 'paris-hilton');\n  } //this one is tricky\n\n\n  if (ts.match('al')) {\n    ts.match('al (#Person|#TitleCase)').canBe('#Person').tag('#Person', 'al-borlen');\n    ts.match('#TitleCase al #TitleCase').canBe('#Person').tag('#Person', 'arabic-al-arabic');\n  } //ambiguous honorifics\n\n\n  ts.match('(private|general|major|corporal|lord|lady|secretary|premier) #Honorific? #Person').terms(0).tag('Honorific', 'ambg-honorifics'); //first general..\n\n  ts.match('(1st|2nd|first|second) #Honorific').terms(0).tag('Honorific', 'ordinal-honorific'); // let firstNames = '()';\n  // let names = ts.match(firstNames);\n  // if (names.found) {\n  //   //prolly not a name:\n  //   if (ts.has('(#Determiner|#Adverb|#Pronoun|#Possessive) ' + firstNames)) {\n  //     names.unTag('Person', 'the-bill');\n  //   } else {\n  //     //probably a name here:\n  //     let name = ts.match('(#Honorific|#Person) ' + firstNames);\n  //     if (!name.found) {\n  //       name = ts.match(firstNames + ' (#Person|#Honorific|#TitleCase)');\n  //     }\n  //     if (name.found && name.has('(#Place|#Date|#Organization)') === false) {\n  //       name.tag('Person', 'dr-bill');\n  //       names.tag('FirstName', 'ambiguous-name');\n  //     }\n  //   }\n  // }\n  //tighter-matches for other ambiguous names:\n  // ts.match('(al|) #Acronym? #LastName').firstTerm().tag('#FirstName', 'ambig-lastname');\n  //methods requiring a firstname match\n\n  if (ts.has('#FirstName')) {\n    // Firstname x (dangerous)\n    var tmp = ts.match('#FirstName #Noun').ifNo('^#Possessive').ifNo('#ClauseEnd .');\n    tmp.lastTerm().canBe('#LastName').tag('#LastName', 'firstname-noun'); //ferdinand de almar\n\n    ts.match('#FirstName de #Noun').canBe('#Person').tag('#Person', 'firstname-de-noun'); //Osama bin Laden\n\n    ts.match('#FirstName (bin|al) #Noun').canBe('#Person').tag('#Person', 'firstname-al-noun'); //John L. Foo\n\n    ts.match('#FirstName #Acronym #TitleCase').tag('Person', 'firstname-acronym-titlecase'); //Andrew Lloyd Webber\n\n    ts.match('#FirstName #FirstName #TitleCase').tag('Person', 'firstname-firstname-titlecase'); //Mr Foo\n\n    ts.match('#Honorific #FirstName? #TitleCase').tag('Person', 'Honorific-TitleCase'); //John Foo\n\n    ts.match('#FirstName #TitleCase #TitleCase?').match('#Noun+').tag('Person', 'firstname-titlecase'); //peter the great\n\n    ts.match('#FirstName the #Adjective').tag('Person', 'correction-determiner5'); //very common-but-ambiguous lastnames\n\n    ts.match('#FirstName (green|white|brown|hall|young|king|hill|cook|gray|price)').tag('#Person', 'firstname-maybe'); //Joe K. Sombrero\n\n    ts.match('#FirstName #Acronym #Noun').ifNo('#Date').tag('#Person', 'n-acro-noun').lastTerm().tag('#LastName', 'n-acro-noun'); // Dwayne 'the rock' Johnson\n\n    ts.match('#FirstName [#Determiner? #Noun] #LastName').tag('#NickName', 'first-noun-last').tag('#Person', 'first-noun-last'); //john bodego's\n\n    ts.match('#FirstName (#Singular|#Possessive)').ifNo('#Date').ifNo('#NickName').tag('#Person', 'first-possessive').lastTerm().tag('#LastName', 'first-possessive');\n  } //methods requiring a lastname match\n\n\n  if (ts.has('#LastName')) {\n    // x Lastname\n    ts.match('#Noun #LastName').firstTerm().canBe('#FirstName').tag('#FirstName', 'noun-lastname'); //ambiguous-but-common firstnames\n\n    ts.match('(will|may|april|june|said|rob|wade|ray|rusty|drew|miles|jack|chuck|randy|jan|pat|cliff|bill) #LastName').firstTerm().tag('#FirstName', 'maybe-lastname'); //Jani K. Smith\n\n    ts.match('#TitleCase #Acronym? #LastName').ifNo('#Date').tag('#Person', 'title-acro-noun').lastTerm().tag('#LastName', 'title-acro-noun'); //is foo Smith\n\n    ts.match('#Copula (#Noun|#PresentTense) #LastName').term(1).tag('#FirstName', 'copula-noun-lastname');\n  } //methods requiring a titlecase\n\n\n  if (ts.has('#TitleCase')) {\n    ts.match('#Acronym #TitleCase').canBe('#Person').tag('#Person', 'acronym-titlecase'); //ludwig van beethovan\n\n    ts.match('#TitleCase (van|al|bin) #TitleCase').canBe('#Person').tag('Person', 'correction-titlecase-van-titlecase');\n    ts.match('#TitleCase (de|du) la? #TitleCase').canBe('#Person').tag('Person', 'correction-titlecase-van-titlecase'); //Morgan Shlkjsfne\n\n    ts.match('#Person #TitleCase').match('#TitleCase #Noun').canBe('#Person').tag('Person', 'correction-person-titlecase'); //pope francis\n\n    ts.match('(lady|queen|sister) #TitleCase').ifNo('#Date').ifNo('#Honorific').tag('#FemaleName', 'lady-titlecase');\n    ts.match('(king|pope|father) #TitleCase').ifNo('#Date').tag('#MaleName', 'correction-poe');\n  } //j.k Rowling\n\n\n  ts.match('#Noun van der? #Noun').canBe('#Person').tag('#Person', 'von der noun'); //king of spain\n\n  ts.match('(king|queen|prince|saint|lady) of? #Noun').canBe('#Person').tag('#Person', 'king-of-noun'); //mr X\n\n  ts.match('#Honorific #Acronym').tag('Person', 'Honorific-TitleCase'); //peter II\n\n  ts.match('#Person #Person the? #RomanNumeral').tag('Person', 'correction-roman-numeral'); //'Professor Fink', 'General McCarthy'\n\n  ts.match('#Honorific #Person').tag('Person', 'Honorific-Person'); //remove single 'mr'\n\n  ts.match('^#Honorific$').unTag('Person', 'single-honorific');\n  return ts;\n};\n\nmodule.exports = person_step;\n\n},{}],117:[function(_dereq_,module,exports){\n'use strict'; //orgwords like 'bank' in 'Foo Bank'\n\nvar orgWords = _dereq_('../../world/more-data/orgWords'); //could this word be an organization\n\n\nvar maybeOrg = function maybeOrg(t) {\n  //must be a noun\n  if (!t.tags.Noun) {\n    return false;\n  } //can't be these things\n\n\n  if (t.tags.Pronoun || t.tags.Comma || t.tags.Possessive || t.tags.Place) {\n    return false;\n  } //must be one of these\n\n\n  if (t.tags.TitleCase || t.tags.Organization || t.tags.Acronym) {\n    return true;\n  }\n\n  return false;\n};\n\nvar organization_step = function organization_step(ts) {\n  for (var i = 0; i < ts.terms.length; i++) {\n    var t = ts.terms[i];\n\n    if (orgWords.hasOwnProperty(t.root) === true) {\n      //eg. Toronto University\n      var lastTerm = ts.terms[i - 1];\n\n      if (lastTerm && maybeOrg(lastTerm)) {\n        lastTerm.tag('Organization', 'org-word-1');\n        t.tag('Organization', 'org-word-2');\n        continue;\n      } //eg. University of Toronto\n\n\n      var nextTerm = ts.terms[i + 1];\n\n      if (nextTerm && nextTerm.normal === 'of') {\n        if (ts.terms[i + 2] && maybeOrg(ts.terms[i + 2])) {\n          t.tag('Organization', 'org-of-word-1');\n          nextTerm.tag('Organization', 'org-of-word-2');\n          ts.terms[i + 2].tag('Organization', 'org-of-word-3');\n          continue;\n        }\n      }\n    }\n  }\n\n  if (ts.has('#Acronym')) {\n    ts.match('the #Acronym').not('(iou|fomo|yolo|diy|dui|nimby)').lastTerm().tag('Organization', 'the-acronym');\n    ts.match('#Acronym').match('#Possessive').tag('Organization', 'possessive-acronym');\n  }\n\n  return ts;\n};\n\nmodule.exports = organization_step;\n\n},{\"../../world/more-data/orgWords\":221}],118:[function(_dereq_,module,exports){\n'use strict'; //tag the words between '(' and ')' as #Parentheses\n\nvar parenthesesStep = function parenthesesStep(ts) {\n  ts.terms.forEach(function (t, i) {\n    if (t.tags.StartBracket) {\n      for (var o = i; o < ts.terms.length; o += 1) {\n        if (ts.terms[o].tags.EndBracket === true) {\n          ts.slice(i, o + 1).tag('Parentheses');\n          break;\n        }\n      }\n    }\n  });\n  return ts;\n};\n\nmodule.exports = parenthesesStep;\n\n},{}],119:[function(_dereq_,module,exports){\n'use strict';\n\nvar isPlural = _dereq_('../../subset/nouns/isPlural');\n\nvar pluralStep = function pluralStep(ts) {\n  for (var i = 0; i < ts.terms.length; i++) {\n    var t = ts.terms[i];\n\n    if (t.tags.Noun) {\n      //skip existing fast\n      if (t.tags.Singular || t.tags.Plural) {\n        continue;\n      } //check if it's plural\n\n\n      var plural = isPlural(t, t.world); //can be null if unknown\n\n      if (plural === true) {\n        t.tag('Plural', 'pluralStep');\n      } else if (plural === false) {\n        t.tag('Singular', 'pluralStep');\n      }\n    }\n  }\n\n  return ts;\n};\n\nmodule.exports = pluralStep;\n\n},{\"../../subset/nouns/isPlural\":39}],120:[function(_dereq_,module,exports){\n'use strict'; //regs-\n\nvar numericCardinal = /^\\$?[0-9,](\\.[0-9])?/;\nvar isOrdinal = /[0-9](st|nd|rd|th)$/; // const hasText = /^[a-z]/;\n\nvar value_step = function value_step(ts) {\n  for (var i = 0; i < ts.terms.length; i++) {\n    var t = ts.terms[i];\n\n    if (t.tags.Value === true) {\n      //ordinal/cardinal\n      if (t.tags.Ordinal === undefined && t.tags.Cardinal === undefined) {\n        if (numericCardinal.test(t.normal) === true) {\n          t.tag('Cardinal', 'cardinal-val-regex');\n          t.tag('NumericValue', 'NumericValue-regex');\n        } else if (isOrdinal.test(t.normal) === true) {\n          t.tag('Ordinal', 'ordinal-value-regex');\n          t.tag('NumericValue', 'NumericValue-regex');\n        }\n      }\n    }\n  } //5 books\n\n\n  ts.match('#Cardinal [#Plural]').tag('Unit', 'cardinal-plural'); //5th book\n\n  ts.match('#Ordinal [#Singular]').tag('Unit', 'ordinal-singular'); //1 book\n\n  ts.match('(one|first|1|1st) [#Singular]').tag('Unit', 'one-singular');\n  return ts;\n};\n\nmodule.exports = value_step;\n\n},{}],121:[function(_dereq_,module,exports){\n'use strict'; //mostly pos-corections here\n\nvar corrections = function corrections(ts) {\n  //ambig prepositions/conjunctions\n  if (ts.has('so')) {\n    //so funny\n    ts.match('so #Adjective').match('so').tag('Adverb', 'so-adv'); //so the\n\n    ts.match('so #Noun').match('so').tag('Conjunction', 'so-conj'); //do so\n\n    ts.match('do so').match('so').tag('Noun', 'so-noun');\n  }\n\n  if (ts.has('all')) {\n    //all students\n    ts.match('[all] #Determiner? #Noun').tag('Adjective', 'all-noun'); //it all fell apart\n\n    ts.match('[all] #Verb').tag('Adverb', 'all-verb');\n  } //the ambiguous word 'that' and 'which'\n\n\n  if (ts.has('(that|which)')) {\n    //remind john that\n    ts.match('#Verb #Adverb? #Noun (that|which)').lastTerm().tag('Preposition', 'that-prep'); //that car goes\n\n    ts.match('that #Noun #Verb').firstTerm().tag('Determiner', 'that-determiner'); //work, which has been done.\n\n    ts.match('#Comma [which] (#Pronoun|#Verb)').tag('Preposition', 'which-copula'); //things that provide\n    // ts.match('#Plural (that|which) #Adverb? #Verb').term(1).tag('Preposition', 'noun-that');\n  } //Determiner-signals\n\n\n  if (ts.has('#Determiner')) {\n    //the wait to vote\n    ts.match('(the|this) [#Verb] #Preposition .').tag('Noun', 'correction-determiner1'); //the swim\n\n    ts.match('(the|those|these) (#Infinitive|#PresentTense|#PastTense)').term(1).tag('Noun', 'correction-determiner2'); //a staggering cost\n\n    ts.match('(a|an) [#Gerund]').tag('Adjective', 'correction-a|an');\n    ts.match('(a|an) #Adjective (#Infinitive|#PresentTense)').term(2).tag('Noun', 'correction-a|an2'); //some pressing issues\n\n    ts.match('some [#Verb] #Plural').tag('Noun', 'correction-determiner6'); //the test string\n\n    ts.match('#Determiner [#Infinitive] #Noun').tag('Noun', 'correction-determiner7'); //the orange.\n\n    ts.match('#Determiner #Adjective$').not('(#Comparative|#Superlative)').term(1).tag('Noun', 'the-adj-1'); //the orange is\n\n    ts.match('#Determiner [#Adjective] (#Copula|#PastTense|#Auxiliary)').tag('Noun', 'the-adj-2'); //the nice swim\n\n    ts.match('(the|this|those|these) #Adjective [#Verb]').tag('Noun', 'the-adj-verb'); //the truly nice swim\n\n    ts.match('(the|this|those|these) #Adverb #Adjective [#Verb]').tag('Noun', 'correction-determiner4'); //a stream runs\n\n    ts.match('(the|this|a|an) [#Infinitive] #Adverb? #Verb').tag('Noun', 'correction-determiner5'); //a sense of\n\n    ts.match('#Determiner [#Verb] of').tag('Noun', 'the-verb-of'); //the threat of force\n\n    ts.match('#Determiner #Noun of [#Verb]').tag('Noun', 'noun-of-noun'); //a close\n\n    ts.match('#Determiner #Adverb? [close]').tag('Adjective', 'a-close'); //did a 900, paid a 20\n\n    ts.match('#Verb (a|an) [#Value]').tag('Singular', 'a-value'); //a tv show\n\n    ts.match('(a|an) #Noun [#Infinitive]').tag('Noun', 'a-noun-inf');\n  } //like\n\n\n  if (ts.has('like')) {\n    ts.match('just [like]').tag('Preposition', 'like-preposition'); //folks like her\n\n    ts.match('#Noun [like] #Noun').tag('Preposition', 'noun-like'); //look like\n\n    ts.match('#Verb [like]').tag('Adverb', 'verb-like'); //exactly like\n\n    ts.match('#Adverb like').not('(really|generally|typically|usually|sometimes|often) like').lastTerm().tag('Adverb', 'adverb-like');\n  }\n\n  if (ts.has('#Value')) {\n    //half a million\n    ts.match('half a? #Value').tag('Value', 'half-a-value'); //quarter not ready\n\n    ts.match('#Value and a (half|quarter)').tag('Value', 'value-and-a-half'); //all values are either ordinal or cardinal\n    // ts.match('#Value').match('!#Ordinal').tag('#Cardinal', 'not-ordinal');\n    //money\n\n    ts.match('#Value+ #Currency').tag('Money', 'value-currency').lastTerm().tag('Unit', 'money-unit');\n    ts.match('#Money and #Money #Currency?').tag('Money', 'money-and-money'); //1 800 PhoneNumber\n\n    ts.match('1 #Value #PhoneNumber').tag('PhoneNumber', '1-800-Value'); //(454) 232-9873\n\n    ts.match('#NumericValue #PhoneNumber').tag('PhoneNumber', '(800) PhoneNumber'); //two hundredth\n\n    ts.match('#TextValue+').match('#Cardinal+ #Ordinal').tag('Ordinal', 'two-hundredth');\n  }\n\n  if (ts.has('#Noun')) {\n    //'more' is not always an adverb\n    ts.match('more #Noun').tag('Noun', 'more-noun'); //the word 'second'\n\n    ts.match('[second] #Noun').not('#Honorific').unTag('Unit').tag('Ordinal', 'second-noun'); //he quickly foo\n\n    ts.match('#Noun #Adverb [#Noun]').tag('Verb', 'correction'); //fix for busted-up phrasalVerbs\n\n    ts.match('#Noun [#Particle]').tag('Preposition', 'repair-noPhrasal'); //John & Joe's\n\n    ts.match('#Noun (&|n) #Noun').tag('Organization', 'Noun-&-Noun'); //Aircraft designer\n\n    ts.match('#Noun #Actor').tag('Actor', 'thing-doer'); //this rocks\n\n    ts.match('(this|that) [#Plural]').tag('PresentTense', 'this-verbs'); //by a bear.\n\n    ts.match('#Determiner #Infinitive$').lastTerm().tag('Noun', 'a-inf'); //the western line\n\n    ts.match('#Determiner [(western|eastern|northern|southern|central)] #Noun').tag('Noun', 'western-line');\n    ts.match('(#Determiner|#Value) [(linear|binary|mobile|lexical|technical|computer|scientific|formal)] #Noun').tag('Noun', 'technical-noun'); //organization\n\n    if (ts.has('#Organization')) {\n      ts.match('#Organization of the? #TitleCase').tag('Organization', 'org-of-place');\n      ts.match('#Organization #Country').tag('Organization', 'org-country');\n      ts.match('(world|global|international|national|#Demonym) #Organization').tag('Organization', 'global-org');\n    }\n\n    if (ts.has('#Possessive')) {\n      //my buddy\n      ts.match('#Possessive [#FirstName]').unTag('Person', 'possessive-name'); //spencer kelly's\n\n      ts.match('#FirstName #Acronym? #Possessive').notIf('#Comma').match('#FirstName #Acronym? #LastName').tag('Possessive'); //Super Corp's fundraiser\n\n      ts.match('#Organization+ #Possessive').notIf('#Comma').tag('Possessive'); //Los Angeles's fundraiser\n\n      ts.match('#Place+ #Possessive').notIf('#Comma').tag('Possessive');\n    }\n  }\n\n  if (ts.has('#Verb')) {\n    //still make\n    ts.match('[still] #Verb').tag('Adverb', 'still-verb'); //'u' as pronoun\n\n    ts.match('[u] #Verb').tag('Pronoun', 'u-pronoun-1'); //is no walk\n\n    ts.match('is no [#Verb]').tag('Noun', 'is-no-verb'); //different views than\n\n    ts.match('[#Verb] than').tag('Noun', 'correction'); //her polling\n\n    ts.match('#Possessive [#Verb]').tag('Noun', 'correction-possessive'); //there are reasons\n\n    ts.match('there (are|were) #Adjective? [#PresentTense]').tag('Plural', 'there-are'); //jack seems guarded\n\n    ts.match('#Singular (seems|appears) #Adverb? [#PastTense$]').tag('Adjective', 'seems-filled');\n\n    if (ts.has('(who|what|where|why|how|when)')) {\n      //the word 'how'\n      ts.match('^how').tag('QuestionWord', 'how-question').tag('QuestionWord', 'how-question');\n      ts.match('how (#Determiner|#Copula|#Modal|#PastTense)').term(0).tag('QuestionWord', 'how-is'); // //the word 'which'\n\n      ts.match('^which').tag('QuestionWord', 'which-question').tag('QuestionWord', 'which-question');\n      ts.match('which . (#Noun)+ #Pronoun').term(0).tag('QuestionWord', 'which-question2');\n      ts.match('which').tag('QuestionWord', 'which-question3'); //where\n      //how he is driving\n\n      var word = ts.match('#QuestionWord #Noun #Copula #Adverb? (#Verb|#Adjective)').firstTerm();\n      word.unTag('QuestionWord').tag('Conjunction', 'how-he-is-x'); //when i go fishing\n\n      word = ts.match('#QuestionWord #Noun #Adverb? #Infinitive not? #Gerund').firstTerm();\n      word.unTag('QuestionWord').tag('Conjunction', 'when i go fishing');\n    }\n\n    if (ts.has('#Copula')) {\n      //is eager to go\n      ts.match('#Copula #Adjective to #Verb').match('#Adjective to').tag('Verb', 'correction'); //is mark hughes\n\n      ts.match('#Copula [#Infinitive] #Noun').tag('Noun', 'is-pres-noun');\n      ts.match('[#Infinitive] #Copula').tag('Noun', 'infinitive-copula'); //sometimes adverbs - 'pretty good','well above'\n\n      ts.match('#Copula (pretty|dead|full|well) (#Adjective|#Noun)').notIf('#Comma').tag('#Copula #Adverb #Adjective', 'sometimes-adverb'); //sometimes not-adverbs\n\n      ts.match('#Copula [(just|alone)$]').tag('Adjective', 'not-adverb'); //jack is guarded\n\n      ts.match('#Singular is #Adverb? [#PastTense$]').tag('Adjective', 'is-filled');\n    } //went to sleep\n    // ts.match('#Verb to #Verb').lastTerm().tag('Noun', 'verb-to-verb');\n    //support a splattering of auxillaries before a verb\n\n\n    var advb = '(#Adverb|not)+?';\n\n    if (ts.has(advb)) {\n      //had walked\n      ts.match(\"(has|had) \".concat(advb, \" #PastTense\")).not('#Verb$').tag('Auxiliary', 'had-walked'); //was walking\n\n      ts.match(\"#Copula \".concat(advb, \" #Gerund\")).not('#Verb$').tag('Auxiliary', 'copula-walking'); //been walking\n\n      ts.match(\"(be|been) \".concat(advb, \" #Gerund\")).not('#Verb$').tag('Auxiliary', 'be-walking'); //would walk\n\n      ts.match(\"(#Modal|did) \".concat(advb, \" #Verb\")).not('#Verb$').tag('Auxiliary', 'modal-verb'); //would have had\n\n      ts.match(\"#Modal \".concat(advb, \" have \").concat(advb, \" had \").concat(advb, \" #Verb\")).not('#Verb$').tag('Auxiliary', 'would-have'); //would be walking\n\n      ts.match(\"(#Modal) \".concat(advb, \" be \").concat(advb, \" #Verb\")).not('#Verb$').tag('Auxiliary', 'would-be'); //would been walking\n\n      ts.match(\"(#Modal|had|has) \".concat(advb, \" been \").concat(advb, \" #Verb\")).not('#Verb$').tag('Auxiliary', 'would-be'); //infinitive verbs suggest plural nouns - 'XYZ walk to the store'\n      // r.match(`#Singular+ #Infinitive`).match('#Singular+').tag('Plural', 'infinitive-make-plural');\n    } //fall over\n\n\n    ts.match('#PhrasalVerb #PhrasalVerb').lastTerm().tag('Particle', 'phrasal-particle');\n\n    if (ts.has('#Gerund')) {\n      //walking is cool\n      ts.match('#Gerund #Adverb? not? #Copula').firstTerm().tag('Activity', 'gerund-copula'); //walking should be fun\n\n      ts.match('#Gerund #Modal').firstTerm().tag('Activity', 'gerund-modal'); //running-a-show\n\n      ts.match('#Gerund #Determiner [#Infinitive]').tag('Noun', 'running-a-show'); //setting records\n      // ts.match('#Gerund [#PresentTense]').tag('Plural', 'setting-records');\n    } //will be cool -> Copula\n\n\n    if (ts.has('will #Adverb? not? #Adverb? be')) {\n      //will be running (not copula\n      if (ts.has('will #Adverb? not? #Adverb? be #Gerund') === false) {\n        //tag it all\n        ts.match('will not? be').tag('Copula', 'will-be-copula'); //for more complex forms, just tag 'be'\n\n        ts.match('will #Adverb? not? #Adverb? be #Adjective').match('be').tag('Copula', 'be-copula');\n      }\n    }\n  }\n\n  if (ts.has('#Adjective')) {\n    //still good\n    ts.match('still #Adjective').match('still').tag('Adverb', 'still-advb'); //big dreams, critical thinking\n\n    ts.match('#Adjective [#PresentTense]').tag('Noun', 'adj-presentTense'); //will secure our\n\n    ts.match('will [#Adjective]').tag('Verb', 'will-adj'); //cheering hard - dropped -ly's\n\n    ts.match('#PresentTense (hard|quick|long|bright|slow)').lastTerm().tag('Adverb', 'lazy-ly'); //his fine\n\n    ts.match('(his|her|its) [#Adjective]').tag('Noun', 'his-fine'); //\n\n    ts.match('#Noun #Adverb? [left]').tag('PastTense', 'left-verb');\n  }\n\n  if (ts.has('#TitleCase')) {\n    //FitBit Inc\n    ts.match('#TitleCase (ltd|co|inc|dept|assn|bros)').tag('Organization', 'org-abbrv'); //Foo District\n\n    ts.match('#TitleCase+ (district|region|province|county|prefecture|municipality|territory|burough|reservation)').tag('Region', 'foo-district'); //District of Foo\n\n    ts.match('(district|region|province|municipality|territory|burough|state) of #TitleCase').tag('Region', 'district-of-Foo');\n  }\n\n  if (ts.has('#Hyphenated')) {\n    //air-flow\n    ts.match('#Hyphenated #Hyphenated').match('#Noun #Verb').tag('Noun', 'hyphen-verb');\n    var hyphen = ts.match('#Hyphenated+');\n\n    if (hyphen.has('#Expression')) {\n      //ooh-wee\n      hyphen.tag('Expression', 'ooh-wee');\n    }\n  }\n\n  if (ts.has('#Place')) {\n    //West Norforlk\n    ts.match('(west|north|south|east|western|northern|southern|eastern)+ #Place').tag('Region', 'west-norfolk'); //some us-state acronyms (exlude: al, in, la, mo, hi, me, md, ok..)\n\n    ts.match('#City [#Acronym]').match('(al|ak|az|ar|ca|ct|dc|fl|ga|id|il|nv|nh|nj|ny|oh|or|pa|sc|tn|tx|ut|vt|pr)').tag('Region', 'us-state');\n  } //misc:\n  //foot/feet\n\n\n  ts.match('(foot|feet)').tag('Noun', 'foot-noun');\n  ts.match('#Value (foot|feet)').term(1).tag('Unit', 'foot-unit'); //'u' as pronoun\n\n  ts.match('#Conjunction [u]').tag('Pronoun', 'u-pronoun-2'); //'a/an' can mean 1 - \"a hour\"\n\n  ts.match('(a|an) (#Duration|hundred|thousand|million|billion|trillion|quadrillion|quintillion|sextillion|septillion)').ifNo('#Plural').term(0).tag('Value', 'a-is-one'); //swear-words as non-expression POS\n  //nsfw\n\n  ts.match('holy (shit|fuck|hell)').tag('Expression', 'swears-expression');\n  ts.match('#Determiner (shit|damn|hell)').term(1).tag('Noun', 'swears-noun');\n  ts.match('(shit|damn|fuck) (#Determiner|#Possessive|them)').term(0).tag('Verb', 'swears-verb');\n  ts.match('#Copula fucked up?').not('#Copula').tag('Adjective', 'swears-adjective'); //6 am\n\n  ts.match('#Holiday (day|eve)').tag('Holiday', 'holiday-day'); //timezones\n\n  ts.match('(standard|daylight|summer|eastern|pacific|central|mountain) standard? time').tag('Time', 'timezone'); //canadian dollar, Brazilian pesos\n\n  ts.match('#Demonym #Currency').tag('Currency', 'demonym-currency'); //about to go\n\n  ts.match('about to #Adverb? #Verb').match('about to').tag(['Auxiliary', 'Verb'], 'about-to'); //Doctor john smith jr\n\n  ts.match('#Honorific #Person').tag('Person', 'honorific-person');\n  ts.match('#Person (jr|sr|md)').tag('Person', 'person-honorific'); //right of way\n\n  ts.match('(right|rights) of .').tag('Noun', 'right-of');\n  return ts;\n};\n\nmodule.exports = corrections;\n\n},{}],122:[function(_dereq_,module,exports){\n\"use strict\";\n\n//a specificly-named thing, that should be capitalized\nvar properNoun = function properNoun(ts) {\n  if (ts.has('#Person') === true) {\n    ts.match('#FirstName #Person+').tag('ProperNoun');\n    ts.match('#Person+ #LastName').tag('ProperNoun');\n  }\n\n  if (ts.has('#Place') === true) {\n    ts.match('(#City|#Region|#Country)').tag('ProperNoun');\n  }\n\n  ts.match('#Organization').tag('ProperNoun');\n  ts.match('#Month').tag('ProperNoun');\n  return ts;\n};\n\nmodule.exports = properNoun;\n\n},{}],123:[function(_dereq_,module,exports){\n\"use strict\";\n\n//patterns are .match() statements to be run after the tagger\nvar posthoc = function posthoc(ts) {\n  var patterns = ts.world.patterns;\n  Object.keys(patterns).forEach(function (k) {\n    ts.match(k).tag(patterns[k], 'post-hoc: ' + k);\n  });\n  return ts;\n};\n\nmodule.exports = posthoc;\n\n},{}],124:[function(_dereq_,module,exports){\n'use strict';\n\nvar fixContraction = _dereq_('./fix');\n\nvar irregulars = {\n  wanna: ['want', 'to'],\n  gonna: ['going', 'to'],\n  im: ['i', 'am'],\n  alot: ['a', 'lot'],\n  dont: ['do', 'not'],\n  dun: ['do', 'not'],\n  ive: ['i', 'have'],\n  \"won't\": ['will', 'not'],\n  wont: ['will', 'not'],\n  \"can't\": ['can', 'not'],\n  cant: ['can', 'not'],\n  cannot: ['can', 'not'],\n  // aint: ['is', 'not'], //or 'are'\n  // \"ain't\": ['is', 'not'],\n  \"shan't\": ['should', 'not'],\n  imma: ['I', 'will'],\n  \"where'd\": ['where', 'did'],\n  whered: ['where', 'did'],\n  \"when'd\": ['when', 'did'],\n  whend: ['when', 'did'],\n  \"how'd\": ['how', 'did'],\n  howd: ['how', 'did'],\n  \"what'd\": ['what', 'did'],\n  whatd: ['what', 'did'],\n  \"let's\": ['let', 'us'],\n  //multiple word contractions\n  dunno: ['do', 'not', 'know'],\n  brb: ['be', 'right', 'back'],\n  gtg: ['got', 'to', 'go'],\n  irl: ['in', 'real', 'life'],\n  tbh: ['to', 'be', 'honest'],\n  imo: ['in', 'my', 'opinion'],\n  til: ['today', 'i', 'learned'],\n  rn: ['right', 'now'],\n  twas: ['it', 'was'],\n  '@': ['at']\n}; //check irregulars\n\nvar checkIrregulars = function checkIrregulars(ts) {\n  for (var i = 0; i < ts.terms.length; i++) {\n    var t = ts.terms[i];\n\n    if (irregulars[t.normal]) {\n      var fix = irregulars[t.normal];\n      ts = fixContraction(ts, fix, i);\n      i += fix.length - 1;\n    }\n  }\n\n  return ts;\n};\n\nmodule.exports = checkIrregulars;\n\n},{\"./fix\":128}],125:[function(_dereq_,module,exports){\n'use strict';\n\nvar fixContraction = _dereq_('./fix');\n\nvar splitContraction = _dereq_('./split'); //these are always contractions\n\n\nvar blacklist = {\n  'that\\'s': true,\n  'there\\'s': true\n};\nvar are = {\n  we: true,\n  they: true,\n  you: true\n}; // \"'s\" may be a contraction or a possessive\n// 'spencer's house' vs 'spencer's good'\n\nvar isPossessive = function isPossessive(ts, i) {\n  var t = ts.terms[i];\n  var next_t = ts.terms[i + 1]; //a pronoun can't be possessive - \"he's house\"\n\n  if (t.tags.Pronoun || t.tags.QuestionWord) {\n    return false;\n  }\n\n  if (blacklist[t.normal]) {\n    return false;\n  } //if end of sentence, it is possessive - \"was spencer's\"\n\n\n  if (!next_t) {\n    return true;\n  } //an infinitive is probably mis-tagged - 'jamie's bite'\n\n\n  if (next_t.tags.Infinitive) {\n    return true;\n  } //a gerund suggests 'is walking'\n\n\n  if (next_t.tags.VerbPhrase) {\n    return false;\n  } //spencer's house\n\n\n  if (next_t.tags.Noun) {\n    return true;\n  } //rocket's red glare\n\n\n  if (next_t.tags.Adjective && ts.terms[i + 2] && ts.terms[i + 2].tags.Noun) {\n    return true;\n  } //an adjective suggests 'is good'\n\n\n  if (next_t.tags.Adjective || next_t.tags.Adverb || next_t.tags.Verb) {\n    return false;\n  }\n\n  return false;\n}; // you ain't / i ain't.\n\n\nvar isAre = function isAre(ts, i) {\n  var arr = ['is', 'not']; //default\n  //get what's it 'about'\n\n  if (ts.terms[i - 1]) {\n    var about = ts.terms[i - 1]; //go back one more..\n\n    if (about.tags.Adverb && ts.terms[i - 2]) {\n      about = ts.terms[i - 2];\n    }\n\n    if (about.tags.Plural || are[about.normal] === true) {\n      arr[0] = 'are';\n    }\n  }\n\n  return arr;\n}; //handle ambigous contraction \"'s\"\n\n\nvar hardOne = function hardOne(ts) {\n  for (var i = 0; i < ts.terms.length; i++) {\n    //skip existing\n    if (ts.terms[i].silent_term) {\n      continue;\n    }\n\n    if (ts.terms[i].normal === 'ain\\'t' || ts.terms[i].normal === 'aint') {\n      var arr = isAre(ts, i);\n      ts = fixContraction(ts, arr, i);\n      i += 1;\n      continue;\n    }\n\n    var parts = splitContraction(ts.terms[i]);\n\n    if (parts) {\n      //have we found a hard one\n      if (parts.end === 's') {\n        //spencer's house\n        if (isPossessive(ts, i)) {\n          ts.terms[i].tag('#Possessive', 'hard-contraction');\n          continue;\n        }\n\n        var _arr = [parts.start, 'is'];\n\n        if (ts.terms[i + 1]) {\n          var str = ts.terms[i].normal; //he's walking -> is/was\n\n          if (ts.match(str + ' (#Negative|#Adverb|#Auxiliary)+? #Gerund').found) {\n            _arr = [parts.start, 'is'];\n          } else if (ts.match(str + ' (#Negative|#Adverb|#Auxiliary)+? #Verb').found) {\n            //is vs has ('he's got milk')\n            _arr = [parts.start, 'has'];\n          }\n        }\n\n        ts = fixContraction(ts, _arr, i);\n        i += 1;\n      }\n    }\n  }\n\n  return ts;\n};\n\nmodule.exports = hardOne;\n\n},{\"./fix\":128,\"./split\":129}],126:[function(_dereq_,module,exports){\n'use strict';\n\nvar fixContraction = _dereq_('./fix');\n\nvar split = _dereq_('./split'); //the formulaic contraction types:\n\n\nvar easy_ends = {\n  ll: 'will',\n  // 'd': 'would',\n  ve: 'have',\n  re: 'are',\n  m: 'am',\n  'n\\'t': 'not' //these ones are a bit tricksier:\n  // 't': 'not',\n  // 's': 'is' //or was\n\n}; //unambiguous contractions, like \"'ll\"\n\nvar easyOnes = function easyOnes(ts) {\n  for (var i = 0; i < ts.terms.length; i++) {\n    //skip existing\n    if (ts.terms[i].silent_term) {\n      continue;\n    }\n\n    var parts = split(ts.terms[i]);\n\n    if (parts) {\n      parts.start = parts.start.toLowerCase(); //make sure its an easy one\n\n      if (easy_ends[parts.end]) {\n        var arr = [parts.start, easy_ends[parts.end]];\n        ts = fixContraction(ts, arr, i);\n        i += 1;\n      } //handle i'd -> 'i would' vs 'i had'\n\n\n      if (parts.end === 'd') {\n        //assume 'would'\n        var _arr = [parts.start, 'would']; //if next verb is past-tense, choose 'had'\n\n        if (ts.terms[i + 1] && ts.terms[i + 1].tags.PastTense) {\n          _arr[1] = 'had';\n        } //also support '#Adverb #PastTense'\n\n\n        if (ts.terms[i + 2] && ts.terms[i + 2].tags.PastTense && ts.terms[i + 1].tags.Adverb) {\n          _arr[1] = 'had';\n        }\n\n        ts = fixContraction(ts, _arr, i);\n        i += 1;\n      }\n    }\n  }\n\n  return ts;\n};\n\nmodule.exports = easyOnes;\n\n},{\"./fix\":128,\"./split\":129}],127:[function(_dereq_,module,exports){\n'use strict';\n\nvar fixContraction = _dereq_('./fix');\n\nvar Term = _dereq_('../../../term');\n\nvar hasDash = function hasDash(t) {\n  var dashes = /(-|–|—)/;\n  return dashes.test(t.whitespace.before) || dashes.test(t.whitespace.after);\n};\n\nvar numberRange = function numberRange(ts) {\n  //try to support number range, like 5-9, this way:\n  ts.match('#Hyphenated #Hyphenated').match('#NumericValue #NumericValue').tag('NumberRange'); //otherwise, loop through and find them\n\n  for (var i = 0; i < ts.terms.length; i++) {\n    var t = ts.terms[i]; //skip existing\n\n    if (t.silent_term) {\n      continue;\n    }\n\n    if (t.tags.TextValue) {\n      continue;\n    } //hyphens found in whitespace - '5 - 7'\n\n\n    if (t.tags.Value && ts.terms[i + 1] && i > 0 && (hasDash(t) || hasDash(ts.terms[i - 1])) && ts.terms[i - 1].tags.Value) {\n      var to = new Term('', ts.world);\n      to.silent_term = 'to';\n      ts.insertAt(i, to);\n      ts.terms[i - 1].tag('NumberRange', 'number-number1');\n      ts.terms[i].tag('NumberRange', 'number-number2');\n      ts.terms[i].whitespace.before = '';\n      ts.terms[i].whitespace.after = '';\n      ts.terms[i + 1].tag('NumberRange', 'number-number3');\n      return ts;\n    } //add a silent term\n\n\n    if (t.tags.NumberRange) {\n      var arr = t.text.split(/(-|–|—)/);\n      arr[1] = 'to';\n      ts = fixContraction(ts, arr, i);\n      ts.terms[i].tag(['NumberRange', 'NumericValue'], 'numRange-1');\n      ts.terms[i + 1].tag(['NumberRange', 'Preposition'], 'numRange-silent');\n      ts.terms[i + 2].tag(['NumberRange', 'NumericValue'], 'numRange-3');\n      i += 2;\n    }\n  }\n\n  return ts;\n};\n\nmodule.exports = numberRange;\n\n},{\"../../../term\":143,\"./fix\":128}],128:[function(_dereq_,module,exports){\n'use strict';\n\nvar Term = _dereq_('../../../term');\n\nvar tags = {\n  not: 'Negative',\n  will: 'Verb',\n  would: 'Modal',\n  have: 'Verb',\n  are: 'Copula',\n  is: 'Copula',\n  am: 'Verb'\n}; //make sure the newly created term gets the easy tags\n\nvar easyTag = function easyTag(t) {\n  if (tags[t.silent_term]) {\n    t.tag(tags[t.silent_term]);\n  }\n}; //add a silent term\n\n\nvar fixContraction = function fixContraction(ts, parts, i) {\n  //add the interpretation to the contracted term\n  var one = ts.terms[i];\n  one.silent_term = parts[0]; //tag it as a contraction\n\n  one.tag('Contraction', 'tagger-contraction'); //add a new empty term\n\n  if (parts[1]) {\n    var two = new Term('', ts.world);\n    two.silent_term = parts[1];\n    two.tag('Contraction', 'tagger-contraction');\n    ts.insertAt(i + 1, two); //ensure new term has no auto-whitspace\n\n    two.whitespace.before = '';\n    two.whitespace.after = '';\n    easyTag(two);\n  } //potentially it's three-contracted-terms, like 'dunno'\n\n\n  if (parts[2]) {\n    var three = new Term('', ts.world);\n    three.silent_term = parts[2]; // ts.terms.push(three);\n\n    ts.insertAt(i + 2, three);\n    three.tag('Contraction', 'tagger-contraction');\n    easyTag(three);\n  }\n\n  return ts;\n};\n\nmodule.exports = fixContraction;\n\n},{\"../../../term\":143}],129:[function(_dereq_,module,exports){\n'use strict';\n\nvar contraction = /^([a-z]+)'([a-z][a-z]?)$/i;\nvar possessive = /[a-z]s'$/i;\nvar allowed = {\n  re: 1,\n  ve: 1,\n  ll: 1,\n  t: 1,\n  s: 1,\n  d: 1,\n  m: 1\n};\n/** interpret a terms' contraction */\n\nvar splitContraction = function splitContraction(t) {\n  //handle this irregular one (shared trailing n)\n  if (t.normal === 'can\\'t') {\n    return {\n      start: 'can',\n      end: 'n\\'t'\n    };\n  }\n\n  var parts = t.normal.match(contraction);\n\n  if (parts && parts[1] && allowed[parts[2]] === 1) {\n    //handle n't\n    if (parts[2] === 't' && parts[1].match(/[a-z]n$/)) {\n      parts[1] = parts[1].replace(/n$/, '');\n      parts[2] = 'n\\'t'; //dunno..\n    } //fix titlecase\n\n\n    if (t.tags.TitleCase === true) {\n      parts[1] = parts[1].replace(/^[a-z]/, function (x) {\n        return x.toUpperCase();\n      });\n    }\n\n    return {\n      start: parts[1],\n      end: parts[2]\n    };\n  } // \"flanders' house\"\n\n\n  if (possessive.test(t.text) === true) {\n    return {\n      start: t.normal.replace(/s'?$/, ''),\n      end: ''\n    };\n  }\n\n  return null;\n};\n\nmodule.exports = splitContraction;\n\n},{}],130:[function(_dereq_,module,exports){\n\"use strict\";\n\n//yep,\n//https://github.com/mathiasbynens/emoji-regex/blob/master/index.js\nmodule.exports = /(?:0\\u20E3\\n1\\u20E3|2\\u20E3|3\\u20E3|4\\u20E3|5\\u20E3|6\\u20E3|7\\u20E3|8\\u20E3|9\\u20E3|#\\u20E3|\\*\\u20E3|\\uD83C(?:\\uDDE6\\uD83C(?:\\uDDE8|\\uDDE9|\\uDDEA|\\uDDEB|\\uDDEC|\\uDDEE|\\uDDF1|\\uDDF2|\\uDDF4|\\uDDF6|\\uDDF7|\\uDDF8|\\uDDF9|\\uDDFA|\\uDDFC|\\uDDFD|\\uDDFF)|\\uDDE7\\uD83C(?:\\uDDE6|\\uDDE7|\\uDDE9|\\uDDEA|\\uDDEB|\\uDDEC|\\uDDED|\\uDDEE|\\uDDEF|\\uDDF1|\\uDDF2|\\uDDF3|\\uDDF4|\\uDDF6|\\uDDF7|\\uDDF8|\\uDDF9|\\uDDFB|\\uDDFC|\\uDDFE|\\uDDFF)|\\uDDE8\\uD83C(?:\\uDDE6|\\uDDE8|\\uDDE9|\\uDDEB|\\uDDEC|\\uDDED|\\uDDEE|\\uDDF0|\\uDDF1|\\uDDF2|\\uDDF3|\\uDDF4|\\uDDF5|\\uDDF7|\\uDDFA|\\uDDFB|\\uDDFC|\\uDDFD|\\uDDFE|\\uDDFF)|\\uDDE9\\uD83C(?:\\uDDEA|\\uDDEC|\\uDDEF|\\uDDF0|\\uDDF2|\\uDDF4|\\uDDFF)|\\uDDEA\\uD83C(?:\\uDDE6|\\uDDE8|\\uDDEA|\\uDDEC|\\uDDED|\\uDDF7|\\uDDF8|\\uDDF9|\\uDDFA)|\\uDDEB\\uD83C(?:\\uDDEE|\\uDDEF|\\uDDF0|\\uDDF2|\\uDDF4|\\uDDF7)|\\uDDEC\\uD83C(?:\\uDDE6|\\uDDE7|\\uDDE9|\\uDDEA|\\uDDEB|\\uDDEC|\\uDDED|\\uDDEE|\\uDDF1|\\uDDF2|\\uDDF3|\\uDDF5|\\uDDF6|\\uDDF7|\\uDDF8|\\uDDF9|\\uDDFA|\\uDDFC|\\uDDFE)|\\uDDED\\uD83C(?:\\uDDF0|\\uDDF2|\\uDDF3|\\uDDF7|\\uDDF9|\\uDDFA)|\\uDDEE\\uD83C(?:\\uDDE8|\\uDDE9|\\uDDEA|\\uDDF1|\\uDDF2|\\uDDF3|\\uDDF4|\\uDDF6|\\uDDF7|\\uDDF8|\\uDDF9)|\\uDDEF\\uD83C(?:\\uDDEA|\\uDDF2|\\uDDF4|\\uDDF5)|\\uDDF0\\uD83C(?:\\uDDEA|\\uDDEC|\\uDDED|\\uDDEE|\\uDDF2|\\uDDF3|\\uDDF5|\\uDDF7|\\uDDFC|\\uDDFE|\\uDDFF)|\\uDDF1\\uD83C(?:\\uDDE6|\\uDDE7|\\uDDE8|\\uDDEE|\\uDDF0|\\uDDF7|\\uDDF8|\\uDDF9|\\uDDFA|\\uDDFB|\\uDDFE)|\\uDDF2\\uD83C(?:\\uDDE6|\\uDDE8|\\uDDE9|\\uDDEA|\\uDDEB|\\uDDEC|\\uDDED|\\uDDF0|\\uDDF1|\\uDDF2|\\uDDF3|\\uDDF4|\\uDDF5|\\uDDF6|\\uDDF7|\\uDDF8|\\uDDF9|\\uDDFA|\\uDDFB|\\uDDFC|\\uDDFD|\\uDDFE|\\uDDFF)|\\uDDF3\\uD83C(?:\\uDDE6|\\uDDE8|\\uDDEA|\\uDDEB|\\uDDEC|\\uDDEE|\\uDDF1|\\uDDF4|\\uDDF5|\\uDDF7|\\uDDFA|\\uDDFF)|\\uDDF4\\uD83C\\uDDF2|\\uDDF5\\uD83C(?:\\uDDE6|\\uDDEA|\\uDDEB|\\uDDEC|\\uDDED|\\uDDF0|\\uDDF1|\\uDDF2|\\uDDF3|\\uDDF7|\\uDDF8|\\uDDF9|\\uDDFC|\\uDDFE)|\\uDDF6\\uD83C\\uDDE6|\\uDDF7\\uD83C(?:\\uDDEA|\\uDDF4|\\uDDF8|\\uDDFA|\\uDDFC)|\\uDDF8\\uD83C(?:\\uDDE6|\\uDDE7|\\uDDE8|\\uDDE9|\\uDDEA|\\uDDEC|\\uDDED|\\uDDEE|\\uDDEF|\\uDDF0|\\uDDF1|\\uDDF2|\\uDDF3|\\uDDF4|\\uDDF7|\\uDDF8|\\uDDF9|\\uDDFB|\\uDDFD|\\uDDFE|\\uDDFF)|\\uDDF9\\uD83C(?:\\uDDE6|\\uDDE8|\\uDDE9|\\uDDEB|\\uDDEC|\\uDDED|\\uDDEF|\\uDDF0|\\uDDF1|\\uDDF2|\\uDDF3|\\uDDF4|\\uDDF7|\\uDDF9|\\uDDFB|\\uDDFC|\\uDDFF)|\\uDDFA\\uD83C(?:\\uDDE6|\\uDDEC|\\uDDF2|\\uDDF8|\\uDDFE|\\uDDFF)|\\uDDFB\\uD83C(?:\\uDDE6|\\uDDE8|\\uDDEA|\\uDDEC|\\uDDEE|\\uDDF3|\\uDDFA)|\\uDDFC\\uD83C(?:\\uDDEB|\\uDDF8)|\\uDDFD\\uD83C\\uDDF0|\\uDDFE\\uD83C(?:\\uDDEA|\\uDDF9)|\\uDDFF\\uD83C(?:\\uDDE6|\\uDDF2|\\uDDFC)))|[\\xA9\\xAE\\u203C\\u2049\\u2122\\u2139\\u2194-\\u2199\\u21A9\\u21AA\\u231A\\u231B\\u2328\\u23CF\\u23E9-\\u23F3\\u23F8-\\u23FA\\u24C2\\u25AA\\u25AB\\u25B6\\u25C0\\u25FB-\\u25FE\\u2600-\\u2604\\u260E\\u2611\\u2614\\u2615\\u2618\\u261D\\u2620\\u2622\\u2623\\u2626\\u262A\\u262E\\u262F\\u2638-\\u263A\\u2648-\\u2653\\u2660\\u2663\\u2665\\u2666\\u2668\\u267B\\u267F\\u2692-\\u2694\\u2696\\u2697\\u2699\\u269B\\u269C\\u26A0\\u26A1\\u26AA\\u26AB\\u26B0\\u26B1\\u26BD\\u26BE\\u26C4\\u26C5\\u26C8\\u26CE\\u26CF\\u26D1\\u26D3\\u26D4\\u26E9\\u26EA\\u26F0-\\u26F5\\u26F7-\\u26FA\\u26FD\\u2702\\u2705\\u2708-\\u270D\\u270F\\u2712\\u2714\\u2716\\u271D\\u2721\\u2728\\u2733\\u2734\\u2744\\u2747\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2763\\u2764\\u2795-\\u2797\\u27A1\\u27B0\\u27BF\\u2934\\u2935\\u2B05-\\u2B07\\u2B1B\\u2B1C\\u2B50\\u2B55\\u3030\\u303D\\u3297\\u3299]|\\uD83C[\\uDC04\\uDCCF\\uDD70\\uDD71\\uDD7E\\uDD7F\\uDD8E\\uDD91-\\uDD9A\\uDE01\\uDE02\\uDE1A\\uDE2F\\uDE32-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF21\\uDF24-\\uDF93\\uDF96\\uDF97\\uDF99-\\uDF9B\\uDF9E-\\uDFF0\\uDFF3-\\uDFF5\\uDFF7-\\uDFFF]|\\uD83D[\\uDC00-\\uDCFD\\uDCFF-\\uDD3D\\uDD49-\\uDD4E\\uDD50-\\uDD67\\uDD6F\\uDD70\\uDD73-\\uDD79\\uDD87\\uDD8A-\\uDD8D\\uDD90\\uDD95\\uDD96\\uDDA5\\uDDA8\\uDDB1\\uDDB2\\uDDBC\\uDDC2-\\uDDC4\\uDDD1-\\uDDD3\\uDDDC-\\uDDDE\\uDDE1\\uDDE3\\uDDEF\\uDDF3\\uDDFA-\\uDE4F\\uDE80-\\uDEC5\\uDECB-\\uDED0\\uDEE0-\\uDEE5\\uDEE9\\uDEEB\\uDEEC\\uDEF0\\uDEF3]|\\uD83E[\\uDD10-\\uDD18\\uDD80-\\uDD84\\uDDC0]/g;\n\n},{}],131:[function(_dereq_,module,exports){\n\"use strict\";\n\n//just some of the most common emoticons\n//faster than\n//http://stackoverflow.com/questions/28077049/regex-matching-emoticons\nmodule.exports = {\n  ':(': true,\n  ':)': true,\n  ':P': true,\n  ':p': true,\n  ':O': true,\n  ':3': true,\n  ':|': true,\n  ':/': true,\n  ':\\\\': true,\n  ':$': true,\n  ':*': true,\n  ':@': true,\n  ':-(': true,\n  ':-)': true,\n  ':-P': true,\n  ':-p': true,\n  ':-O': true,\n  ':-3': true,\n  ':-|': true,\n  ':-/': true,\n  ':-\\\\': true,\n  ':-$': true,\n  ':-*': true,\n  ':-@': true,\n  ':^(': true,\n  ':^)': true,\n  ':^P': true,\n  ':^p': true,\n  ':^O': true,\n  ':^3': true,\n  ':^|': true,\n  ':^/': true,\n  ':^\\\\': true,\n  ':^$': true,\n  ':^*': true,\n  ':^@': true,\n  '):': true,\n  '(:': true,\n  '$:': true,\n  '*:': true,\n  ')-:': true,\n  '(-:': true,\n  '$-:': true,\n  '*-:': true,\n  ')^:': true,\n  '(^:': true,\n  '$^:': true,\n  '*^:': true,\n  '<3': true,\n  '</3': true,\n  '<\\\\3': true\n};\n\n},{}],132:[function(_dereq_,module,exports){\n'use strict'; //markov-like stats about co-occurance, for hints about unknown terms\n//basically, a little-bit better than the noun-fallback\n//just top n-grams from nlp tags, generated from nlp-corpus\n//after this word, here's what happens usually\n\nvar afterThisWord = {\n  i: 'Verb',\n  //44% //i walk..\n  first: 'Noun',\n  //50% //first principles..\n  it: 'Verb',\n  //33%\n  there: 'Verb',\n  //35%\n  // to: 'Verb', //32%\n  not: 'Verb',\n  //33%\n  because: 'Noun',\n  //31%\n  if: 'Noun',\n  //32%\n  but: 'Noun',\n  //26%\n  who: 'Verb',\n  //40%\n  this: 'Noun',\n  //37%\n  his: 'Noun',\n  //48%\n  when: 'Noun',\n  //33%\n  you: 'Verb',\n  //35%\n  very: 'Adjective',\n  // 39%\n  old: 'Noun',\n  //51%\n  never: 'Verb',\n  //42%\n  before: 'Noun' //28%\n\n}; //in advance of this word, this is what happens usually\n\nvar beforeThisWord = {\n  there: 'Verb',\n  //23% // be there\n  me: 'Verb',\n  //31% //see me\n  man: 'Adjective',\n  // 80% //quiet man\n  only: 'Verb',\n  //27% //sees only\n  him: 'Verb',\n  //32% //show him\n  were: 'Noun',\n  //48% //we were\n  // what: 'Verb', //25% //know what\n  took: 'Noun',\n  //38% //he took\n  himself: 'Verb',\n  //31% //see himself\n  went: 'Noun',\n  //43% //he went\n  who: 'Noun',\n  //47% //person who\n  jr: 'Person'\n}; //following this POS, this is likely\n\nvar afterThisPos = {\n  Adjective: 'Noun',\n  //36% //blue dress\n  Possessive: 'Noun',\n  //41% //his song\n  Determiner: 'Noun',\n  //47%\n  Adverb: 'Verb',\n  //20%\n  // Person: 'Verb', //40%\n  Pronoun: 'Verb',\n  //40%\n  Value: 'Noun',\n  //47%\n  Ordinal: 'Noun',\n  //53%\n  Modal: 'Verb',\n  //35%\n  Superlative: 'Noun',\n  //43%\n  Demonym: 'Noun',\n  //38%\n  // Organization: 'Verb', //33%\n  Honorific: 'Person' //\n  // FirstName: 'Person', //\n\n}; //in advance of this POS, this is likely\n\nvar beforeThisPos = {\n  Copula: 'Noun',\n  //44% //spencer is\n  PastTense: 'Noun',\n  //33% //spencer walked\n  Conjunction: 'Noun',\n  //36%\n  Modal: 'Noun',\n  //38%\n  PluperfectTense: 'Noun',\n  //40%\n  PerfectTense: 'Verb' //32%\n  // LastName: 'FirstName', //\n\n};\nmodule.exports = {\n  beforeThisWord: beforeThisWord,\n  afterThisWord: afterThisWord,\n  beforeThisPos: beforeThisPos,\n  afterThisPos: afterThisPos\n};\n\n},{}],133:[function(_dereq_,module,exports){\n'use strict'; //regex suffix patterns and their most common parts of speech,\n//built using wordnet, by spencer kelly.\n//this mapping shrinks-down the uglified build\n\nvar Adj = 'Adjective';\nvar Inf = 'Infinitive';\nvar Pres = 'PresentTense';\nvar Sing = 'Singular';\nvar Past = 'PastTense';\nvar Adverb = 'Adverb';\nvar Exp = 'Expression';\nvar Actor = 'Actor';\nvar Verb = 'Verb';\nvar Noun = 'Noun';\nvar Last = 'LastName'; //the order here matters.\n//regexes indexed by mandated last-character\n\nmodule.exports = {\n  a: [[/.[aeiou]na$/, Noun], [/.[oau][wvl]ska$/, Last], //polish (female)\n  [/.[^aeiou]ica$/, Sing], [/^([hyj]a)+$/, Exp] //hahah\n  ],\n  c: [[/.[^aeiou]ic$/, Adj]],\n  d: [[/.[ia]sed$/, Adj], [/.[gt]led$/, Adj], [/.[aeiou][td]ed$/, Past], [/.[^aeiou]led$/, Past], //rumbled\n  [/[^aeiou]ard$/, Sing], [/[aeiou][^aeiou]id$/, Adj], [/[aeiou]c?ked$/, Past], //hooked\n  [/[^aeiou][aeiou][tvx]ed$/, Past], //boxed\n  [/[aeiou]red$/, Past], //cheered\n  [/.[vrl]id$/, Adj]],\n  e: [[/.[lnr]ize$/, Inf], [/.[^aeiou]ise$/, Inf], [/.[aeiou]te$/, Inf], [/.[^aeiou][ai]ble$/, Adj], [/.[^aeiou]eable$/, Adj], [/.[^aeiou]ive$/, Adj]],\n  h: [[/.[^aeiouf]ish$/, Adj], [/.v[iy]ch$/, Last], //east-europe\n  [/^ug?h+$/, Exp], //uhh\n  [/^uh[ -]?oh$/, Exp] //uhoh\n  ],\n  i: [[/.[oau][wvl]ski$/, Last] //polish (male)\n  ],\n  k: [[/^(k)+$/, Exp] //kkkk\n  ],\n  l: [[/.[gl]ial$/, Adj], [/.[^aeiou]ful$/, Adj], [/.[nrtumcd]al$/, Adj], [/.[^aeiou][ei]al$/, Adj]],\n  m: [[/.[^aeiou]ium$/, Sing], [/[^aeiou]ism$/, Sing], [/^h*u*m+$/, Exp], //mmmmmmm / ummmm / huuuuuummmmmm\n  [/^\\d+ ?[ap]m$/, 'Date']],\n  n: [[/.[lsrnpb]ian$/, Adj], [/[^aeiou]ician$/, Actor], [/okin$/, 'Gerund']],\n  o: [[/^no+$/, Exp], //noooo\n  [/^(yo)+$/, Exp], //yoyo\n  [/^woo+[pt]?$/, Exp] //woo\n  ],\n  r: [[/.[ilk]er$/, 'Comparative'], [/[aeiou][pns]er$/, Sing], [/[^i]fer$/, Inf], [/.[^aeiou][ao]pher$/, Actor]],\n  t: [[/.[di]est$/, 'Superlative'], [/.[icldtgrv]ent$/, Adj], [/[aeiou].*ist$/, Adj], [/^[a-z]et$/, Verb]],\n  s: [[/.[rln]ates$/, Pres], [/.[^z]ens$/, Verb], [/.[lstrn]us$/, Sing], [/[aeiou][^aeiou]is$/, Sing], [/[a-z]\\'s$/, Noun], [/^yes+$/, Exp] //yessss\n  ],\n  v: [[/.[^aeiou][ai][kln]ov$/, Last] //east-europe\n  ],\n  y: [[/.[cts]hy$/, Adj], [/.[st]ty$/, Adj], [/.[gk]y$/, Adj], [/.[tnl]ary$/, Adj], [/.[oe]ry$/, Sing], [/[rdntkbhs]ly$/, Adverb], [/...lly$/, Adverb], [/[bszmp]{2}y$/, Adj], [/.(gg|bb|zz)ly$/, Adj], [/.[aeiou]my$/, Adj], [/[ea]{2}zy$/, Adj], [/.[^aeiou]ity$/, Sing]]\n};\n\n},{}],134:[function(_dereq_,module,exports){\n'use strict'; //just a foolish lookup of known suffixes\n\nvar Adj = 'Adjective';\nvar Inf = 'Infinitive';\nvar Pres = 'PresentTense';\nvar Sing = 'Singular';\nvar Past = 'PastTense';\nvar Avb = 'Adverb';\nvar Plrl = 'Plural';\nvar Actor = 'Actor';\nvar Vb = 'Verb';\nvar Noun = 'Noun';\nvar Last = 'LastName';\nvar Modal = 'Modal';\nmodule.exports = [null, //0\nnull, //1\n{\n  //2-letter\n  ea: Sing,\n  ia: Noun,\n  ic: Adj,\n  ly: Avb,\n  '\\'n': Vb,\n  '\\'t': Vb\n}, {\n  //3-letter\n  que: Adj,\n  lar: Adj,\n  ike: Adj,\n  ffy: Adj,\n  nny: Adj,\n  rmy: Adj,\n  azy: Adj,\n  oid: Adj,\n  mum: Adj,\n  ous: Adj,\n  end: Vb,\n  sis: Sing,\n  rol: Sing,\n  ize: Inf,\n  ify: Inf,\n  zes: Pres,\n  nes: Pres,\n  ing: 'Gerund',\n  //likely to be converted to Adj after lexicon pass\n  ' so': Avb,\n  '\\'ll': Modal,\n  '\\'re': 'Copula'\n}, {\n  //4-letter\n  teen: 'Value',\n  tors: Noun,\n  amed: Past,\n  ched: Past,\n  ends: Vb,\n  oses: Pres,\n  fies: Pres,\n  ects: Pres,\n  nded: Past,\n  cede: Inf,\n  tage: Inf,\n  gate: Inf,\n  vice: Sing,\n  tion: Sing,\n  cted: Past,\n  ette: Sing,\n  some: Adj,\n  llen: Adj,\n  ried: Adj,\n  gone: Adj,\n  made: Adj,\n  fore: Avb,\n  less: Avb,\n  ices: Plrl,\n  ions: Plrl,\n  ints: Plrl,\n  aped: Past,\n  lked: Past,\n  ould: Modal,\n  tive: Actor,\n  sson: Last,\n  //swedish male\n  czyk: Last,\n  //polish (male)\n  chuk: Last,\n  //east-europe\n  enko: Last,\n  //east-europe\n  akis: Last,\n  //greek\n  nsen: Last //norway\n\n}, {\n  //5-letter\n  fully: Avb,\n  where: Avb,\n  wards: Avb,\n  urned: Past,\n  tized: Past,\n  eased: Past,\n  ances: Plrl,\n  tures: Plrl,\n  ports: Plrl,\n  ettes: Plrl,\n  ities: Plrl,\n  rough: Adj,\n  bound: Adj,\n  tieth: 'Ordinal',\n  ishes: Pres,\n  tches: Pres,\n  nssen: Last,\n  //norway\n  marek: Last //polish (male)\n\n}, {\n  //6-letter\n  keeper: Actor,\n  logist: Actor,\n  auskas: Last,\n  //lithuania\n  teenth: 'Value'\n}, {\n  //7-letter\n  sdottir: Last,\n  //swedish female\n  opoulos: Last //greek\n\n}];\n\n},{}],135:[function(_dereq_,module,exports){\n'use strict'; //add 'downward' tags (that immediately depend on this one)\n\nvar addDownword = function addDownword(tags) {\n  var keys = Object.keys(tags);\n  keys.forEach(function (k) {\n    tags[k].downward = []; //look for tags with this as parent\n\n    for (var i = 0; i < keys.length; i++) {\n      if (tags[keys[i]].isA && tags[keys[i]].isA === k) {\n        tags[k].downward.push(keys[i]);\n      }\n    }\n  });\n};\n\nmodule.exports = addDownword;\n\n},{}],136:[function(_dereq_,module,exports){\n'use strict'; //list of inconsistent parts-of-speech\n\nmodule.exports = [//top-level pos are all inconsistent\n['Noun', 'Verb', 'Adjective', 'Adverb', 'Determiner', 'Conjunction', 'Preposition', 'QuestionWord', 'Expression', 'Url', 'PhoneNumber', 'Email', 'Emoji'], //exlusive-nouns\n['Person', 'Organization', 'Value', 'Place', 'Actor', 'Demonym', 'Pronoun'], //acronyms\n['Acronym', 'Pronoun', 'Actor', 'Unit', 'Address'], ['Acronym', 'Plural'], //things that can't be plural\n['Plural', 'Singular'], // ['Plural', 'Pronoun'],\n// ['Plural', 'Person'],\n// ['Plural', 'Organization'],\n// ['Plural', 'Currency'],\n// ['Plural', 'Ordinal'],\n//exlusive-people\n['MaleName', 'FemaleName'], ['FirstName', 'LastName', 'Honorific'], //adjectives\n['Comparative', 'Superlative'], //values\n['Value', 'Verb', 'Adjective'], // ['Value', 'Year'],\n['Ordinal', 'Cardinal'], ['TextValue', 'NumericValue'], ['NiceNumber', 'TextValue'], ['Ordinal', 'Currency'], //$5.50th\n//verbs\n['PastTense', 'PresentTense', 'FutureTense'], ['Pluperfect', 'Copula', 'Modal', 'Participle', 'Infinitive', 'Gerund', 'FuturePerfect', 'PerfectTense'], ['Auxiliary', 'Noun', 'Value'], //date\n['Month', 'WeekDay', 'Year', 'Duration', 'Holiday'], ['Particle', 'Conjunction', 'Adverb', 'Preposition'], ['Date', 'Verb', 'Adjective', 'Person'], ['Date', 'Money', 'RomanNumeral', 'Fraction'], //a/an -> 1\n['Value', 'Determiner'], ['Url', 'Value', 'HashTag', 'PhoneNumber', 'Emoji'], //roman numerals\n['RomanNumeral', 'Fraction', 'NiceNumber'], ['RomanNumeral', 'Money'], //cases\n['UpperCase', 'TitleCase', 'CamelCase'], //phrases\n['VerbPhrase', 'Noun', 'Adjective', 'Value'], //QuestionWord\n['QuestionWord', 'VerbPhrase'], //acronyms\n['Acronym', 'VerbPhrase']];\n\n},{}],137:[function(_dereq_,module,exports){\n'use strict';\n\nvar conflicts = _dereq_('./conflicts');\n\nvar nouns = _dereq_('./tags/nouns');\n\nvar verbs = _dereq_('./tags/verbs');\n\nvar values = _dereq_('./tags/values');\n\nvar dates = _dereq_('./tags/dates');\n\nvar misc = _dereq_('./tags/misc');\n\nvar addDownward = _dereq_('./addDownward'); //used for pretty-printing on the server-side\n\n\nvar colors = {\n  Noun: 'blue',\n  Date: 'red',\n  Value: 'red',\n  Verb: 'green',\n  Auxiliary: 'green',\n  Negative: 'green',\n  VerbPhrase: 'green',\n  Preposition: 'cyan',\n  Condition: 'cyan',\n  Conjunction: 'cyan',\n  Determiner: 'cyan',\n  Adjective: 'magenta',\n  Adverb: 'cyan'\n}; //extend tagset with new tags\n\nvar addIn = function addIn(obj, tags) {\n  Object.keys(obj).forEach(function (k) {\n    tags[k] = obj[k];\n  });\n}; //add tags to remove when tagging this one\n\n\nvar addConflicts = function addConflicts(tags) {\n  Object.keys(tags).forEach(function (k) {\n    tags[k].notA = {};\n\n    for (var i = 0; i < conflicts.length; i++) {\n      var arr = conflicts[i];\n\n      if (arr.indexOf(k) !== -1) {\n        arr = arr.filter(function (a) {\n          return a !== k;\n        });\n        arr.forEach(function (e) {\n          tags[k].notA[e] = true;\n        });\n      }\n    }\n\n    tags[k].notA = Object.keys(tags[k].notA);\n  });\n};\n\nvar addColors = function addColors(tags) {\n  Object.keys(tags).forEach(function (k) {\n    if (colors[k]) {\n      tags[k].color = colors[k];\n      return;\n    }\n\n    if (tags[k].isA && colors[tags[k].isA]) {\n      tags[k].color = colors[tags[k].isA];\n      return;\n    }\n\n    if (tags[k].isA && tags[tags[k].isA].color) {\n      tags[k].color = tags[tags[k].isA].color;\n    }\n  });\n};\n\nvar build = function build() {\n  var tags = {};\n  addIn(nouns, tags);\n  addIn(verbs, tags);\n  addIn(values, tags);\n  addIn(dates, tags);\n  addIn(misc, tags); //downstream\n\n  addDownward(tags); //add enemies\n\n  addConflicts(tags); //for nice-logging\n\n  addColors(tags);\n  return tags;\n};\n\nmodule.exports = build();\n\n},{\"./addDownward\":135,\"./conflicts\":136,\"./tags/dates\":138,\"./tags/misc\":139,\"./tags/nouns\":140,\"./tags/values\":141,\"./tags/verbs\":142}],138:[function(_dereq_,module,exports){\n\"use strict\";\n\nmodule.exports = {\n  Date: {},\n  //not a noun, but usually is\n  Month: {\n    isA: 'Date',\n    also: 'Singular'\n  },\n  WeekDay: {\n    isA: 'Date',\n    also: 'Noun'\n  },\n  RelativeDay: {\n    isA: 'Date'\n  },\n  Year: {\n    isA: 'Date'\n  },\n  Duration: {\n    isA: 'Date',\n    also: 'Noun'\n  },\n  Time: {\n    isA: 'Date',\n    also: 'Noun'\n  },\n  Holiday: {\n    isA: 'Date',\n    also: 'Noun'\n  }\n};\n\n},{}],139:[function(_dereq_,module,exports){\n\"use strict\";\n\nmodule.exports = {\n  Adjective: {},\n  Comparable: {\n    isA: 'Adjective'\n  },\n  Comparative: {\n    isA: 'Adjective'\n  },\n  Superlative: {\n    isA: 'Adjective'\n  },\n  NumberRange: {\n    isA: 'Contraction'\n  },\n  Adverb: {},\n  Currency: {},\n  //glue\n  Determiner: {},\n  Conjunction: {},\n  Preposition: {},\n  QuestionWord: {},\n  RelativeProunoun: {\n    isA: 'Pronoun'\n  },\n  Expression: {},\n  Abbreviation: {},\n  Url: {},\n  PhoneNumber: {},\n  HashTag: {},\n  AtMention: {\n    is: 'Noun'\n  },\n  Emoji: {},\n  Email: {},\n  //non-exclusive\n  Condition: {},\n  VerbPhrase: {},\n  Auxiliary: {},\n  Negative: {},\n  Contraction: {},\n  TitleCase: {},\n  CamelCase: {},\n  UpperCase: {},\n  Hyphenated: {},\n  Acronym: {},\n  ClauseEnd: {},\n  // Quotes\n  Quotation: {},\n  StartQuotation: {\n    isA: 'Quotation'\n  },\n  EndQuotation: {\n    isA: 'Quotation'\n  },\n  //parentheses\n  Parentheses: {},\n  EndBracket: {\n    isA: 'Parentheses'\n  },\n  StartBracket: {\n    isA: 'Parentheses'\n  }\n};\n\n},{}],140:[function(_dereq_,module,exports){\n\"use strict\";\n\nmodule.exports = {\n  Noun: {},\n  // - singular\n  Singular: {\n    isA: 'Noun'\n  },\n  //a specific thing that's capitalized\n  ProperNoun: {\n    isA: 'Noun'\n  },\n  // -- people\n  Person: {\n    isA: 'Singular'\n  },\n  FirstName: {\n    isA: 'Person'\n  },\n  MaleName: {\n    isA: 'FirstName'\n  },\n  FemaleName: {\n    isA: 'FirstName'\n  },\n  LastName: {\n    isA: 'Person'\n  },\n  Honorific: {\n    isA: 'Noun'\n  },\n  Place: {\n    isA: 'Singular'\n  },\n  // -- places\n  Country: {\n    isA: 'Place'\n  },\n  City: {\n    isA: 'Place'\n  },\n  Region: {\n    isA: 'Place'\n  },\n  Address: {\n    isA: 'Place'\n  },\n  Organization: {\n    isA: 'Singular'\n  },\n  SportsTeam: {\n    isA: 'Organization'\n  },\n  Company: {\n    isA: 'Organization'\n  },\n  School: {\n    isA: 'Organization'\n  },\n  // - plural\n  Plural: {\n    isA: 'Noun'\n  },\n  Uncountable: {\n    //(not plural or singular)\n    isA: 'Noun'\n  },\n  Pronoun: {\n    isA: 'Noun'\n  },\n  //a word for someone doing something -'plumber'\n  Actor: {\n    isA: 'Noun'\n  },\n  //a gerund-as-noun - 'swimming'\n  Activity: {\n    isA: 'Noun'\n  },\n  //'kilograms'\n  Unit: {\n    isA: 'Noun'\n  },\n  //'Canadians'\n  Demonym: {\n    isA: 'Noun'\n  },\n  //`john's`\n  Possessive: {\n    isA: 'Noun'\n  }\n};\n\n},{}],141:[function(_dereq_,module,exports){\n\"use strict\";\n\nmodule.exports = {\n  Value: {},\n  Ordinal: {\n    isA: 'Value'\n  },\n  Cardinal: {\n    isA: 'Value'\n  },\n  Multiple: {\n    isA: 'Value'\n  },\n  RomanNumeral: {\n    isA: 'Cardinal'\n  },\n  Fraction: {\n    isA: 'Value'\n  },\n  TextValue: {\n    isA: 'Value'\n  },\n  NumericValue: {\n    isA: 'Value'\n  },\n  NiceNumber: {\n    isA: 'Value'\n  },\n  Money: {//isA: 'Cardinal'\n  },\n  Percent: {\n    isA: 'Value'\n  }\n};\n\n},{}],142:[function(_dereq_,module,exports){\n\"use strict\";\n\nmodule.exports = {\n  Verb: {\n    isA: 'VerbPhrase'\n  },\n  PresentTense: {\n    isA: 'Verb'\n  },\n  Infinitive: {\n    isA: 'PresentTense'\n  },\n  Gerund: {\n    isA: 'PresentTense'\n  },\n  PastTense: {\n    isA: 'Verb'\n  },\n  PerfectTense: {\n    isA: 'Verb'\n  },\n  FuturePerfect: {\n    isA: 'Verb'\n  },\n  Pluperfect: {\n    isA: 'Verb'\n  },\n  Copula: {\n    isA: 'Verb'\n  },\n  Modal: {\n    isA: 'Verb'\n  },\n  Participle: {\n    isA: 'Verb'\n  },\n  Particle: {\n    isA: 'Verb'\n  },\n  PhrasalVerb: {\n    isA: 'Verb'\n  }\n};\n\n},{}],143:[function(_dereq_,module,exports){\n'use strict';\n\nvar fns = _dereq_('./paths').fns;\n\nvar build_whitespace = _dereq_('./whitespace');\n\nvar makeUID = _dereq_('./makeUID'); //normalization\n\n\nvar addNormal = _dereq_('./methods/normalize/normalize').addNormal;\n\nvar addRoot = _dereq_('./methods/normalize/root');\n\nvar Term = function Term(str, world) {\n  this.tags = {};\n  this._text = fns.ensureString(str); // this.world = world;\n\n  Object.defineProperty(this, 'world', {\n    enumerable: false,\n    // hide it from for..in\n    value: world\n  }); // this.world = function() {\n  //   return world;\n  // };\n  //seperate whitespace from the text\n\n  var parsed = build_whitespace(this._text);\n  this.whitespace = parsed.whitespace;\n  this._text = parsed.text;\n  this.parent = null;\n  this.silent_term = '';\n  this.lumped = false; //normalize the _text\n\n  addNormal(this);\n  addRoot(this); //has this term been modified\n\n  this.dirty = false; //make a unique id for this term\n\n  this.uid = makeUID(this.normal); //getters/setters\n\n  Object.defineProperty(this, 'text', {\n    get: function get() {\n      return this._text;\n    },\n    set: function set(txt) {\n      txt = txt || '';\n      this._text = txt.trim();\n      this.dirty = true; // if (this._text !== txt) {\n      //   console.log('|' + txt + '|');\n      // console.log(build_whitespace(txt));\n      // this.whitespace = build_whitespace(txt);\n      //   console.log(this.whitespace);\n      // }\n\n      this.normalize();\n    }\n  }); //bit faster than .constructor.name or w/e\n\n  Object.defineProperty(this, 'isA', {\n    get: function get() {\n      return 'Term';\n    }\n  });\n};\n/**run each time a new text is set */\n\n\nTerm.prototype.normalize = function () {\n  addNormal(this);\n  addRoot(this);\n  return this;\n};\n/** where in the sentence is it? zero-based. */\n\n\nTerm.prototype.index = function () {\n  var ts = this.parentTerms;\n\n  if (!ts) {\n    return null;\n  }\n\n  return ts.terms.indexOf(this);\n};\n/** make a copy with no originals to the original  */\n\n\nTerm.prototype.clone = function () {\n  var term = new Term(this._text, this.world);\n  term.tags = fns.copy(this.tags);\n  term.whitespace = fns.copy(this.whitespace);\n  term.silent_term = this.silent_term;\n  return term;\n};\n\n_dereq_('./methods/misc')(Term);\n\n_dereq_('./methods/out')(Term);\n\n_dereq_('./methods/tag')(Term);\n\n_dereq_('./methods/case')(Term);\n\n_dereq_('./methods/punctuation')(Term);\n\nmodule.exports = Term;\n\n},{\"./makeUID\":144,\"./methods/case\":146,\"./methods/misc\":147,\"./methods/normalize/normalize\":149,\"./methods/normalize/root\":150,\"./methods/out\":153,\"./methods/punctuation\":156,\"./methods/tag\":158,\"./paths\":161,\"./whitespace\":162}],144:[function(_dereq_,module,exports){\n'use strict'; //this is a not-well-thought-out way to reduce our dependence on `object===object` original stuff\n//generates a unique id for this term\n//may need to change when the term really-transforms? not sure.\n\nvar uid = function uid(str) {\n  var nums = '';\n\n  for (var i = 0; i < 5; i++) {\n    nums += parseInt(Math.random() * 9, 10);\n  }\n\n  return str + '-' + nums;\n};\n\nmodule.exports = uid;\n\n},{}],145:[function(_dereq_,module,exports){\n'use strict'; // const tagSet = require('../paths').tags;\n\nvar boringTags = {\n  Auxiliary: 1,\n  Possessive: 1,\n  TitleCase: 1,\n  ClauseEnd: 1,\n  Comma: 1,\n  CamelCase: 1,\n  UpperCase: 1,\n  Hyphenated: 1,\n  VerbPhrase: 1,\n  EndBracket: 1,\n  StartBracket: 1,\n  Parentheses: 1,\n  Quotation: 1\n};\n\nvar bestTag = function bestTag(t) {\n  var tagSet = t.world.tags;\n  var tags = Object.keys(t.tags);\n  tags = tags.sort(); //alphabetical, first\n  //then sort by #of parent tags\n\n  tags = tags.sort(function (a, b) {\n    //bury the tags we dont want\n    if (!tagSet[a]) {\n      return 1;\n    }\n\n    if (boringTags[b] || !tagSet[b]) {\n      return -1;\n    }\n\n    if (tagSet[a].downward.length > tagSet[b].downward.length) {\n      return 1;\n    }\n\n    return 1;\n  });\n  return tags[0];\n};\n\nmodule.exports = bestTag;\n\n},{}],146:[function(_dereq_,module,exports){\n'use strict';\n\nvar addMethods = function addMethods(Term) {\n  var methods = {\n    toUpperCase: function toUpperCase() {\n      this.text = this._text.toUpperCase();\n      this.tag('#UpperCase', 'toUpperCase');\n      return this;\n    },\n    toLowerCase: function toLowerCase() {\n      this.text = this._text.toLowerCase();\n      this.unTag('#TitleCase');\n      this.unTag('#UpperCase');\n      return this;\n    },\n    toTitleCase: function toTitleCase() {\n      this.text = this._text.replace(/^ *[a-z]/, function (x) {\n        return x.toUpperCase();\n      });\n      this.tag('#TitleCase', 'toTitleCase');\n      return this;\n    },\n    //(camelCase() is handled in `./terms` )\n\n    /** is it titlecased because it deserves it? Like a person's name? */\n    needsTitleCase: function needsTitleCase() {\n      var titleCases = ['Person', 'Place', 'Organization', 'Acronym', 'UpperCase', 'Currency', 'RomanNumeral', 'Month', 'WeekDay', 'Holiday', 'Demonym'];\n\n      for (var i = 0; i < titleCases.length; i++) {\n        if (this.tags[titleCases[i]]) {\n          return true;\n        }\n      } //specific words that keep their titlecase\n      //https://en.wikipedia.org/wiki/Capitonym\n\n\n      var irregulars = ['i', 'god', 'allah'];\n\n      for (var _i = 0; _i < irregulars.length; _i++) {\n        if (this.normal === irregulars[_i]) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }; //hook them into result.proto\n\n  Object.keys(methods).forEach(function (k) {\n    Term.prototype[k] = methods[k];\n  });\n  return Term;\n};\n\nmodule.exports = addMethods;\n\n},{}],147:[function(_dereq_,module,exports){\n'use strict';\n\nvar _isAcronym = _dereq_('./normalize/isAcronym');\n\nvar _bestTag = _dereq_('./bestTag'); //regs-\n\n\nvar hasVowel = /[aeiouy]/i;\nvar hasLetter = /[a-z]/;\nvar hasNumber = /[0-9]/;\n\nvar addMethods = function addMethods(Term) {\n  var methods = {\n    /** which tag best-represents this term?*/\n    bestTag: function bestTag() {\n      return _bestTag(this);\n    },\n\n    /** is this term like F.B.I. or NBA */\n    isAcronym: function isAcronym() {\n      return _isAcronym(this._text);\n    },\n\n    /** check if it is word-like in english */\n    isWord: function isWord() {\n      var t = this; //assume a contraction produces a word-word\n\n      if (t.silent_term) {\n        return true;\n      } //no letters or numbers\n\n\n      if (/[a-z|A-Z|0-9]/.test(t.text) === false) {\n        return false;\n      } //has letters, but with no vowels\n\n\n      if (t.normal.length > 3 && hasLetter.test(t.normal) === true && hasVowel.test(t.normal) === false && t.isAcronym() === false) {\n        return false;\n      } //has numbers but not a 'value'\n\n\n      if (hasNumber.test(t.normal) === true && t.tags.hasOwnProperty('Value') === false) {\n        //s4e\n        if (/[a-z][0-9][a-z]/.test(t.normal) === true) {\n          return false;\n        } //ensure it looks like a 'value' eg '-$4,231.00'\n        // if (/^([$-])*?([0-9,\\.])*?([s\\$%])*?$/.test(t.normal) === false) {\n        //   return false;\n        // }\n\n      }\n\n      return true;\n    }\n  }; //hook them into result.proto\n\n  Object.keys(methods).forEach(function (k) {\n    Term.prototype[k] = methods[k];\n  });\n  return Term;\n};\n\nmodule.exports = addMethods;\n\n},{\"./bestTag\":145,\"./normalize/isAcronym\":148}],148:[function(_dereq_,module,exports){\n'use strict'; //regs -\n\nvar periodAcronym = /([A-Z]\\.)+[A-Z]?,?$/;\nvar oneLetterAcronym = /^[A-Z]\\.,?$/;\nvar noPeriodAcronym = /[A-Z]{2}('s|,)?$/;\n/** does it appear to be an acronym, like FBI or M.L.B. */\n\nvar isAcronym = function isAcronym(str) {\n  //like N.D.A\n  if (periodAcronym.test(str) === true) {\n    return true;\n  } //like 'F.'\n\n\n  if (oneLetterAcronym.test(str) === true) {\n    return true;\n  } //like NDA\n\n\n  if (noPeriodAcronym.test(str) === true) {\n    return true;\n  }\n\n  return false;\n};\n\nmodule.exports = isAcronym;\n\n},{}],149:[function(_dereq_,module,exports){\n'use strict';\n\nvar killUnicode = _dereq_('./unicode');\n\nvar isAcronym = _dereq_('./isAcronym'); //some basic operations on a string to reduce noise\n\n\nexports.normalize = function (str) {\n  str = str || '';\n  str = str.toLowerCase();\n  str = str.trim();\n  var original = str; //(very) rough ASCII transliteration -  bjŏrk -> bjork\n\n  str = killUnicode(str); //#tags, @mentions\n\n  str = str.replace(/^[#@]/, ''); //punctuation\n\n  str = str.replace(/[,;.!?]+$/, ''); // coerce single curly quotes\n\n  str = str.replace(/[\\u0027\\u0060\\u00B4\\u2018\\u2019\\u201A\\u201B\\u2032\\u2035\\u2039\\u203A]+/g, '\\''); // coerce double curly quotes\n\n  str = str.replace(/[\\u0022\\u00AB\\u00BB\\u201C\\u201D\\u201E\\u201F\\u2033\\u2034\\u2036\\u2037\\u2E42\\u301D\\u301E\\u301F\\uFF02]+/g, '\"'); //coerce Unicode ellipses\n\n  str = str.replace(/\\u2026/g, '...'); //en-dash\n\n  str = str.replace(/\\u2013/g, '-'); //lookin'->looking (make it easier for conjugation)\n\n  if (/[a-z][^aeiou]in['’]$/.test(str) === true) {\n    str = str.replace(/in['’]$/, 'ing');\n  } //turn re-enactment to reenactment\n\n\n  if (/^(re|un)-?[^aeiou]./.test(str) === true) {\n    str = str.replace('-', '');\n  } //strip leading & trailing grammatical punctuation\n\n\n  if (/^[:;]/.test(str) === false) {\n    str = str.replace(/\\.{3,}$/g, '');\n    str = str.replace(/['\",\\.!:;\\?\\)]+$/g, '');\n    str = str.replace(/^['\"\\(]+/g, '');\n  } //do this again..\n\n\n  str = str.trim(); //oh shucks,\n\n  if (str === '') {\n    str = original;\n  }\n\n  return str;\n};\n\nexports.addNormal = function (term) {\n  var str = term._text || '';\n  str = exports.normalize(str); //compact acronyms\n\n  if (isAcronym(term._text)) {\n    str = str.replace(/\\./g, '');\n  } //nice-numbers\n\n\n  str = str.replace(/([0-9]),([0-9])/g, '$1$2');\n  term.normal = str;\n}; // console.log(normalize('Dr. V Cooper'));\n\n},{\"./isAcronym\":148,\"./unicode\":151}],150:[function(_dereq_,module,exports){\n'use strict'; //\n\nvar rootForm = function rootForm(term) {\n  var str = term.normal || term.silent_term || ''; //handle apostrophes and stuff (go further than normalize())\n\n  str = str.replace(/'s\\b/, '');\n  str = str.replace(/'$/, '');\n  term.root = str;\n};\n\nmodule.exports = rootForm;\n\n},{}],151:[function(_dereq_,module,exports){\n'use strict'; //a hugely-ignorant, and widely subjective transliteration of latin, cryllic, greek unicode characters to english ascii.\n//approximate visual (not semantic or phonetic) relationship between unicode and ascii characters\n//http://en.wikipedia.org/wiki/List_of_Unicode_characters\n//https://docs.google.com/spreadsheet/ccc?key=0Ah46z755j7cVdFRDM1A2YVpwa1ZYWlpJM2pQZ003M0E\n\nvar compact = {\n  '!': '¡',\n  '?': '¿Ɂ',\n  '\"': '“”\"❝❞',\n  '\\'': '‘‛❛❜',\n  '-': '—–',\n  'a': 'ªÀÁÂÃÄÅàáâãäåĀāĂăĄąǍǎǞǟǠǡǺǻȀȁȂȃȦȧȺΆΑΔΛάαλАДадѦѧӐӑӒӓƛɅæ',\n  'b': 'ßþƀƁƂƃƄƅɃΒβϐϦБВЪЬбвъьѢѣҌҍҔҕƥƾ',\n  'c': '¢©ÇçĆćĈĉĊċČčƆƇƈȻȼͻͼͽϲϹϽϾϿЄСсєҀҁҪҫ',\n  'd': 'ÐĎďĐđƉƊȡƋƌǷ',\n  'e': 'ÈÉÊËèéêëĒēĔĕĖėĘęĚěƎƏƐǝȄȅȆȇȨȩɆɇΈΕΞΣέεξϱϵ϶ЀЁЕЭеѐёҼҽҾҿӖӗӘәӚӛӬӭ',\n  'f': 'ƑƒϜϝӺӻҒғӶӷſ',\n  'g': 'ĜĝĞğĠġĢģƓǤǥǦǧǴǵ',\n  'h': 'ĤĥĦħƕǶȞȟΉΗЂЊЋНнђћҢңҤҥҺһӉӊ',\n  'I': 'ÌÍÎÏ',\n  'i': 'ìíîïĨĩĪīĬĭĮįİıƖƗȈȉȊȋΊΐΪίιϊІЇії',\n  'j': 'ĴĵǰȷɈɉϳЈј',\n  'k': 'ĶķĸƘƙǨǩΚκЌЖКжкќҚқҜҝҞҟҠҡ',\n  'l': 'ĹĺĻļĽľĿŀŁłƚƪǀǏǐȴȽΙӀӏ',\n  'm': 'ΜϺϻМмӍӎ',\n  'n': 'ÑñŃńŅņŇňŉŊŋƝƞǸǹȠȵΝΠήηϞЍИЙЛПийлпѝҊҋӅӆӢӣӤӥπ',\n  'o': 'ÒÓÔÕÖØðòóôõöøŌōŎŏŐőƟƠơǑǒǪǫǬǭǾǿȌȍȎȏȪȫȬȭȮȯȰȱΌΘΟθοσόϕϘϙϬϭϴОФоѲѳӦӧӨөӪӫ¤ƍΏ',\n  'p': 'ƤƿΡρϷϸϼРрҎҏÞ',\n  'q': 'Ɋɋ',\n  'r': 'ŔŕŖŗŘřƦȐȑȒȓɌɍЃГЯгяѓҐґ',\n  's': 'ŚśŜŝŞşŠšƧƨȘșȿςϚϛϟϨϩЅѕ',\n  't': 'ŢţŤťŦŧƫƬƭƮȚțȶȾΓΤτϮϯТт҂Ҭҭ',\n  'u': 'µÙÚÛÜùúûüŨũŪūŬŭŮůŰűŲųƯưƱƲǓǔǕǖǗǘǙǚǛǜȔȕȖȗɄΰμυϋύϑЏЦЧцџҴҵҶҷӋӌӇӈ',\n  'v': 'νѴѵѶѷ',\n  'w': 'ŴŵƜωώϖϢϣШЩшщѡѿ',\n  'x': '×ΧχϗϰХхҲҳӼӽӾӿ',\n  'y': 'ÝýÿŶŷŸƳƴȲȳɎɏΎΥΫγψϒϓϔЎУучўѰѱҮүҰұӮӯӰӱӲӳ',\n  'z': 'ŹźŻżŽžƩƵƶȤȥɀΖζ'\n}; //decompress data into two hashes\n\nvar unicode = {};\nObject.keys(compact).forEach(function (k) {\n  compact[k].split('').forEach(function (s) {\n    unicode[s] = k;\n  });\n});\n\nvar killUnicode = function killUnicode(str) {\n  var chars = str.split('');\n  chars.forEach(function (s, i) {\n    if (unicode[s]) {\n      chars[i] = unicode[s];\n    }\n  });\n  return chars.join('');\n};\n\nmodule.exports = killUnicode; // console.log(killUnicode('bjŏȒk—Ɏó'));\n\n},{}],152:[function(_dereq_,module,exports){\n'use strict';\n\nvar paths = _dereq_('../../paths');\n\nvar fns = paths.fns;\nvar tagset = paths.tags; //a nicer logger for the client-side\n\nvar clientSide = function clientSide(t) {\n  var color = 'silver';\n  var tags = Object.keys(t.tags);\n\n  for (var i = 0; i < tags.length; i++) {\n    if (tagset[tags[i]] && tagset[tags[i]].color) {\n      color = tagset[tags[i]].color;\n      break;\n    }\n  }\n\n  var word = fns.leftPad(t.text, 12);\n  word += ' ' + tags;\n  console.log('%c ' + word, 'color: ' + color);\n};\n\nmodule.exports = clientSide;\n\n},{\"../../paths\":161}],153:[function(_dereq_,module,exports){\n'use strict';\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar renderHtml = _dereq_('./renderHtml');\n\nvar clientDebug = _dereq_('./client');\n\nvar serverDebug = _dereq_('./server');\n\nvar methods = {\n  /** a pixel-perfect reproduction of the input, with whitespace preserved */\n  text: function text(r) {\n    return (r.whitespace.before || '') + r._text + (r.whitespace.after || '');\n  },\n\n  /** a lowercased, punctuation-cleaned, whitespace-trimmed version of the word */\n  normal: function normal(r) {\n    return r.normal;\n  },\n\n  /** even-more normalized than normal */\n  root: function root(r) {\n    return r.root || r.normal;\n  },\n\n  /** the &encoded term in a span element, with POS as classNames */\n  html: function html(r) {\n    return renderHtml(r);\n  },\n\n  /** a simplified response for Part-of-Speech tagging*/\n  tags: function tags(r) {\n    return {\n      text: r.text,\n      normal: r.normal,\n      tags: Object.keys(r.tags)\n    };\n  },\n\n  /** check-print information for the console */\n  debug: function debug(t) {\n    if ((typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) === 'object') {\n      clientDebug(t);\n    } else {\n      serverDebug(t);\n    }\n  }\n};\n\nvar addMethods = function addMethods(Term) {\n  //hook them into result.proto\n  Term.prototype.out = function (fn) {\n    if (!methods[fn]) {\n      fn = 'text';\n    }\n\n    return methods[fn](this);\n  };\n\n  return Term;\n};\n\nmodule.exports = addMethods;\n\n},{\"./client\":152,\"./renderHtml\":154,\"./server\":155}],154:[function(_dereq_,module,exports){\n'use strict'; //turn xml special characters into apersand-encoding.\n//i'm not sure this is perfectly safe.\n\nvar escapeHtml = function escapeHtml(s) {\n  var HTML_CHAR_MAP = {\n    '<': '&lt;',\n    '>': '&gt;',\n    '&': '&amp;',\n    '\"': '&quot;',\n    '\\'': '&#39;',\n    ' ': '&nbsp;'\n  };\n  return s.replace(/[<>&\"' ]/g, function (ch) {\n    return HTML_CHAR_MAP[ch];\n  });\n}; //remove html elements already in the text\n//not tested!\n//http://stackoverflow.com/questions/295566/sanitize-rewrite-html-on-the-client-side\n\n\nvar sanitize = function sanitize(html) {\n  var tagBody = '(?:[^\"\\'>]|\"[^\"]*\"|\\'[^\\']*\\')*';\n  var tagOrComment = new RegExp('<(?:' // Comment body.\n  + '!--(?:(?:-*[^->])*--+|-?)' // Special \"raw text\" elements whose content should be elided.\n  + '|script\\\\b' + tagBody + '>[\\\\s\\\\S]*?</script\\\\s*' + '|style\\\\b' + tagBody + '>[\\\\s\\\\S]*?</style\\\\s*' // Regular name\n  + '|/?[a-z]' + tagBody + ')>', 'gi');\n  var oldHtml;\n\n  do {\n    oldHtml = html;\n    html = html.replace(tagOrComment, '');\n  } while (html !== oldHtml);\n\n  return html.replace(/</g, '&lt;');\n}; //turn the term into ~properly~ formatted html\n\n\nvar renderHtml = function renderHtml(t) {\n  var classes = Object.keys(t.tags).filter(function (tag) {\n    return tag !== 'Term';\n  });\n  classes = classes.map(function (c) {\n    return 'nl-' + c;\n  });\n  classes = classes.join(' ');\n  var text = sanitize(t.text);\n  text = escapeHtml(text);\n  var el = '<span class=\"' + classes + '\">' + text + '</span>';\n  return escapeHtml(t.whitespace.before) + el + escapeHtml(t.whitespace.after);\n};\n\nmodule.exports = renderHtml;\n\n},{}],155:[function(_dereq_,module,exports){\n'use strict';\n\nvar fns = _dereq_('../../paths').fns; //pretty-print a term on the nodejs console\n\n\nvar serverDebug = function serverDebug(t) {\n  var tags = Object.keys(t.tags).map(function (tag) {\n    return fns.printTag(tag);\n  }).join(', ');\n  var word = t.text;\n  word = '\\'' + fns.yellow(word || '-') + '\\'';\n  var silent = '';\n\n  if (t.silent_term) {\n    silent = '[' + t.silent_term + ']';\n  }\n\n  word = fns.leftPad(word, 20);\n  word += fns.leftPad(silent, 8);\n  console.log('   ' + word + '   ' + '     - ' + tags);\n};\n\nmodule.exports = serverDebug;\n\n},{\"../../paths\":161}],156:[function(_dereq_,module,exports){\n'use strict'; // const endPunct = /([^\\/,:;.()!?]{0,1})([\\/,:;.()!?]+)$/i;\n\nvar endPunct = /([a-z0-9 ])([,:;.!?]+)$/i; //old\n\nvar addMethods = function addMethods(Term) {\n  var methods = {\n    /** the punctuation at the end of this term*/\n    getPunctuation: function getPunctuation() {\n      var m = this.text.match(endPunct);\n\n      if (m) {\n        return m[2];\n      }\n\n      m = this.whitespace.after.match(endPunct);\n\n      if (m) {\n        return m[2];\n      }\n\n      return null;\n    },\n    setPunctuation: function setPunctuation(punct) {\n      this.killPunctuation();\n      this.text += punct;\n\n      if (punct === ',') {\n        this.tags.Comma = true;\n      }\n\n      return this;\n    },\n\n    /** check if the term ends with a comma */\n    hasComma: function hasComma() {\n      if (this.getPunctuation() === ',') {\n        return true;\n      }\n\n      return false;\n    },\n    killPunctuation: function killPunctuation() {\n      this.text = this._text.replace(endPunct, '$1');\n      delete this.tags.Comma;\n      delete this.tags.ClauseEnd;\n      return this;\n    }\n  }; //hook them into result.proto\n\n  Object.keys(methods).forEach(function (k) {\n    Term.prototype[k] = methods[k];\n  });\n  return Term;\n};\n\nmodule.exports = addMethods;\n\n},{}],157:[function(_dereq_,module,exports){\n'use strict'; //recursively-check compatibility of this tag and term\n\nvar canBe = function canBe(term, tag) {\n  var tagset = term.world.tags; //fail-fast\n\n  if (tagset[tag] === undefined) {\n    return true;\n  } //loop through tag's contradictory tags\n\n\n  var enemies = tagset[tag].notA || [];\n\n  for (var i = 0; i < enemies.length; i++) {\n    if (term.tags[enemies[i]] === true) {\n      return false;\n    }\n  }\n\n  if (tagset[tag].isA !== undefined) {\n    return canBe(term, tagset[tag].isA); //recursive\n  }\n\n  return true;\n};\n\nmodule.exports = canBe;\n\n},{}],158:[function(_dereq_,module,exports){\n'use strict';\n\nvar setTag = _dereq_('./setTag');\n\nvar _unTag = _dereq_('./unTag');\n\nvar _canBe = _dereq_('./canBe'); //symbols used in sequential taggers which mean 'do nothing'\n//.tag('#Person #Place . #City')\n\n\nvar ignore = {\n  '.': true\n};\n\nvar addMethods = function addMethods(Term) {\n  var methods = {\n    /** set the term as this part-of-speech */\n    tag: function tag(_tag, reason) {\n      if (ignore[_tag] !== true) {\n        setTag(this, _tag, reason);\n      }\n    },\n\n    /** remove this part-of-speech from the term*/\n    unTag: function unTag(tag, reason) {\n      if (ignore[tag] !== true) {\n        _unTag(this, tag, reason);\n      }\n    },\n\n    /** is this tag compatible with this word */\n    canBe: function canBe(tag) {\n      tag = tag || '';\n\n      if (typeof tag === 'string') {\n        //everything can be '.'\n        if (ignore[tag] === true) {\n          return true;\n        }\n\n        tag = tag.replace(/^#/, '');\n      }\n\n      return _canBe(this, tag);\n    }\n  }; //hook them into term.prototype\n\n  Object.keys(methods).forEach(function (k) {\n    Term.prototype[k] = methods[k];\n  });\n  return Term;\n};\n\nmodule.exports = addMethods;\n\n},{\"./canBe\":157,\"./setTag\":159,\"./unTag\":160}],159:[function(_dereq_,module,exports){\n'use strict'; //set a term as a particular Part-of-speech\n\nvar path = _dereq_('../../paths');\n\nvar log = path.log;\nvar fns = path.fns;\n\nvar unTag = _dereq_('./unTag'); // const tagset = path.tags;\n// const tagset = require('../../../tagset');\n\n\nvar putTag = function putTag(term, tag, reason) {\n  var tagset = term.world.tags;\n  tag = tag.replace(/^#/, ''); //already got this\n\n  if (term.tags[tag] === true) {\n    return;\n  }\n\n  term.tags[tag] = true;\n  log.tag(term, tag, reason); //extra logic per-each POS\n\n  if (tagset[tag]) {\n    //drop any conflicting tags\n    var enemies = tagset[tag].notA || [];\n\n    for (var i = 0; i < enemies.length; i++) {\n      if (term.tags[enemies[i]] === true) {\n        unTag(term, enemies[i], reason);\n      }\n    } //apply implicit tags\n\n\n    if (tagset[tag].isA) {\n      var doAlso = tagset[tag].isA;\n\n      if (term.tags[doAlso] !== true) {\n        putTag(term, doAlso, ' --> ' + tag); //recursive\n      }\n    }\n  }\n}; //give term this tag\n\n\nvar wrap = function wrap(term, tag, reason) {\n  if (!term || !tag) {\n    return;\n  }\n\n  var tagset = term.world.tags; //handle multiple tags\n\n  if (fns.isArray(tag)) {\n    tag.forEach(function (t) {\n      return putTag(term, t, reason);\n    }); //recursive\n\n    return;\n  }\n\n  putTag(term, tag, reason); //add 'extra' tag (for some special tags)\n\n  if (tagset[tag] && tagset[tag].also !== undefined) {\n    putTag(term, tagset[tag].also, reason);\n  }\n};\n\nmodule.exports = wrap;\n\n},{\"../../paths\":161,\"./unTag\":160}],160:[function(_dereq_,module,exports){\n'use strict'; //set a term as a particular Part-of-speech\n\nvar path = _dereq_('../../paths');\n\nvar log = path.log; //remove a tag from a term\n\nvar unTag = function unTag(term, tag, reason) {\n  var tagset = term.world.tags;\n\n  if (term.tags[tag]) {\n    log.unTag(term, tag, reason);\n    delete term.tags[tag]; //delete downstream tags too\n\n    if (tagset[tag]) {\n      var also = tagset[tag].downward;\n\n      for (var i = 0; i < also.length; i++) {\n        unTag(term, also[i], ' - -   - ');\n      }\n    }\n  }\n};\n\nvar wrap = function wrap(term, tag, reason) {\n  if (!term || !tag) {\n    return;\n  } //support '*' flag - remove all-tags\n\n\n  if (tag === '*') {\n    term.tags = {};\n    return;\n  } //remove this tag\n\n\n  unTag(term, tag, reason);\n  return;\n};\n\nmodule.exports = wrap;\n\n},{\"../../paths\":161}],161:[function(_dereq_,module,exports){\n\"use strict\";\n\nmodule.exports = {\n  fns: _dereq_('../fns'),\n  log: _dereq_('../log'),\n  tags: _dereq_('../tags')\n};\n\n},{\"../fns\":3,\"../log\":6,\"../tags\":137}],162:[function(_dereq_,module,exports){\n'use strict'; //punctuation regs-  are we having fun yet?\n\nvar before = /^([\\t-\\r \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]|\\x2D+|\\.\\.+|\\/|\"|\"|\\uFF02|'|\\u201C|\\u2018|\\u201F|\\u201B|\\u201E|\\u2E42|\\u201A|\\xAB|\\u2039|\\u2035|\\u2036|\\u2037|\\u301D|`|\\u301F)+/; // const after = /(\\s+|-+|\\.\\.+|\"|\\u0022|\\uFF02|\\u0027|\\u201D|\\u2019|\\u00BB|\\u203A|\\u2032|\\u2033|\\u2034|\\u301E|\\u00B4)+$/u;\n\nvar afterSoft = /([\\t-\\r \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]+|\\x2D+|\\.\\.+|\"|\"|\\uFF02|'|\\u201D|\\u2019|\\xBB|\\u203A|\\u2032|\\u2033|\\u2034|\\u301E|\\xB4)+[ !,\\.;\\?]*$/;\nvar minusNumber = /^( *)-(\\$|€|¥|£)?([0-9])/; //seperate the 'meat' from the trailing/leading whitespace.\n//works in concert with ./src/text/tokenize.js\n\nvar build_whitespace = function build_whitespace(str) {\n  var whitespace = {\n    before: '',\n    after: ''\n  }; //get before punctuation/whitespace\n  //mangle 'far - fetched', but don't mangle '-2'\n\n  var m = str.match(minusNumber);\n\n  if (m !== null) {\n    whitespace.before = m[1];\n    str = str.replace(/^ */, '');\n  } else {\n    m = str.match(before);\n\n    if (m !== null) {\n      whitespace.before = m[0];\n      str = str.replace(before, '');\n    }\n  } //get after punctuation/whitespace\n\n\n  m = str.match(afterSoft);\n\n  if (m !== null) {\n    str = str.replace(afterSoft, '');\n    whitespace.after = m[0];\n  }\n\n  return {\n    whitespace: whitespace,\n    text: str\n  };\n};\n\nmodule.exports = build_whitespace;\n\n},{}],163:[function(_dereq_,module,exports){\n'use strict';\n\nvar Term = _dereq_('../term');\n\nvar wordlike = /\\S/;\nvar isBoundary = /^[!?.]+$/;\nvar notWord = {\n  '.': true,\n  '-': true,\n  //dash\n  '–': true,\n  //en-dash\n  '—': true,\n  //em-dash\n  '--': true,\n  '...': true\n};\n\nvar hasHyphen = function hasHyphen(str) {\n  //dont split 're-do'\n  if (/^(re|un)-?[^aeiou]./.test(str) === true) {\n    return false;\n  } //letter-number\n\n\n  var reg = /^([a-z`\"'/]+)(-|–|—)([a-z0-9].*)/i;\n\n  if (reg.test(str) === true) {\n    return true;\n  } //number-letter\n  // reg = /^([0-9]+)(-|–|—)([a-z].*)/i;\n  // if (reg.test(str) === true) {\n  //   return true;\n  // }\n  //support weird number-emdash combo '2010–2011'\n\n\n  var reg2 = /^([0-9]+)(–|—)([0-9].*)/i;\n\n  if (reg2.test(str)) {\n    return true;\n  }\n\n  return false;\n}; //support splitting terms like \"open/closed\"\n\n\nvar hasSlash = function hasSlash(word) {\n  var reg = /[a-z]\\/[a-z]/;\n\n  if (reg.test(word)) {\n    //only one slash though\n    if (word.split(/\\//g).length === 2) {\n      return true;\n    }\n  }\n\n  return false;\n}; //turn a string into an array of terms (naiive for now, lumped later)\n\n\nvar fromString = function fromString(str, world) {\n  var result = [];\n  var arr = []; //start with a naiive split\n\n  str = str || '';\n\n  if (typeof str === 'number') {\n    str = String(str);\n  }\n\n  var firstSplit = str.split(/(\\S+)/);\n\n  for (var i = 0; i < firstSplit.length; i++) {\n    var word = firstSplit[i];\n\n    if (hasHyphen(word) === true) {\n      //support multiple-hyphenated-terms\n      var hyphens = word.split(/[-–—]/);\n\n      for (var o = 0; o < hyphens.length; o++) {\n        if (o === hyphens.length - 1) {\n          arr.push(hyphens[o]);\n        } else {\n          arr.push(hyphens[o] + '-');\n        }\n      }\n    } else if (hasSlash(word) === true) {\n      var slashes = word.split(/\\//);\n      arr.push(slashes[0]);\n      arr.push('/' + slashes[1]);\n    } else {\n      arr.push(word);\n    }\n  } //greedy merge whitespace+arr to the right\n\n\n  var carry = '';\n\n  for (var _i = 0; _i < arr.length; _i++) {\n    //if it's more than a whitespace\n    if (wordlike.test(arr[_i]) === true && notWord.hasOwnProperty(arr[_i]) === false && isBoundary.test(arr[_i]) === false) {\n      result.push(carry + arr[_i]);\n      carry = '';\n    } else {\n      carry += arr[_i];\n    }\n  } //handle last one\n\n\n  if (carry && result.length > 0) {\n    result[result.length - 1] += carry; //put it on the end\n  }\n\n  return result.map(function (t) {\n    return new Term(t, world);\n  });\n};\n\nmodule.exports = fromString;\n\n},{\"../term\":143}],164:[function(_dereq_,module,exports){\n'use strict'; //getters/setters for the Terms class\n\nmodule.exports = {\n  parent: {\n    get: function get() {\n      return this.refText || this;\n    },\n    set: function set(r) {\n      this.refText = r;\n      return this;\n    }\n  },\n  parentTerms: {\n    get: function get() {\n      return this.refTerms || this;\n    },\n    set: function set(r) {\n      this.refTerms = r;\n      return this;\n    }\n  },\n  dirty: {\n    get: function get() {\n      for (var i = 0; i < this.terms.length; i++) {\n        if (this.terms[i].dirty === true) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n    set: function set(dirt) {\n      this.terms.forEach(function (t) {\n        t.dirty = dirt;\n      });\n    }\n  },\n  refTerms: {\n    get: function get() {\n      return this._refTerms || this;\n    },\n    set: function set(ts) {\n      this._refTerms = ts;\n      return this;\n    }\n  },\n  found: {\n    get: function get() {\n      return this.terms.length > 0;\n    }\n  },\n  length: {\n    get: function get() {\n      return this.terms.length;\n    }\n  },\n  isA: {\n    get: function get() {\n      return 'Terms';\n    }\n  },\n  whitespace: {\n    get: function get() {\n      var _this = this;\n\n      return {\n        before: function before(str) {\n          _this.firstTerm().whitespace.before = str;\n          return _this;\n        },\n        after: function after(str) {\n          _this.lastTerm().whitespace.after = str;\n          return _this;\n        }\n      };\n    }\n  }\n};\n\n},{}],165:[function(_dereq_,module,exports){\n'use strict';\n\nvar build = _dereq_('./build');\n\nvar getters = _dereq_('./getters');\n\nvar w = _dereq_('../world'); //Terms is an array of Term objects, and methods that wrap around them\n\n\nvar Terms = function Terms(arr, world, refText, refTerms) {\n  var _this = this;\n\n  this.terms = arr;\n  this.world = world || w;\n  this.refText = refText;\n  this._refTerms = refTerms;\n\n  this.get = function (n) {\n    return _this.terms[n];\n  }; //apply getters\n\n\n  var keys = Object.keys(getters);\n\n  for (var i = 0; i < keys.length; i++) {\n    Object.defineProperty(this, keys[i], getters[keys[i]]);\n  }\n};\n\nTerms.fromString = function (str, world) {\n  var termArr = build(str, world);\n  var ts = new Terms(termArr, world, null); //give each term a original to this ts\n\n  ts.terms.forEach(function (t) {\n    t.parentTerms = ts;\n  });\n  return ts;\n}; // Terms = require('./methods/lookup')(Terms);\n\n\n_dereq_('./match')(Terms);\n\n_dereq_('./methods/tag')(Terms);\n\n_dereq_('./methods/loops')(Terms);\n\n_dereq_('./match/not')(Terms);\n\n_dereq_('./methods/delete')(Terms);\n\n_dereq_('./methods/insert')(Terms);\n\n_dereq_('./methods/misc')(Terms);\n\n_dereq_('./methods/out')(Terms);\n\n_dereq_('./methods/replace')(Terms);\n\n_dereq_('./methods/split')(Terms);\n\n_dereq_('./methods/transform')(Terms);\n\n_dereq_('./methods/lump')(Terms);\n\nmodule.exports = Terms;\n\n},{\"../world\":215,\"./build\":163,\"./getters\":164,\"./match\":166,\"./match/not\":176,\"./methods/delete\":177,\"./methods/insert\":178,\"./methods/loops\":179,\"./methods/lump\":181,\"./methods/misc\":182,\"./methods/out\":183,\"./methods/replace\":184,\"./methods/split\":185,\"./methods/tag\":186,\"./methods/transform\":187}],166:[function(_dereq_,module,exports){\n'use strict';\n\nvar syntax = _dereq_('./lib/syntax');\n\nvar startHere = _dereq_('./lib/startHere');\n\nvar Text = _dereq_('../../text');\n\nvar _match = _dereq_('./lib');\n\nvar matchMethods = function matchMethods(Terms) {\n  var methods = {\n    //support regex-like whitelist-match\n    match: function match(reg, verbose) {\n      var _this = this;\n\n      //fail-fast #1\n      if (this.terms.length === 0) {\n        return new Text([], this.world, this.parent);\n      } //fail-fast #2\n\n\n      if (!reg) {\n        return new Text([], this.world, this.parent);\n      }\n\n      var matches = _match(this, reg, verbose);\n\n      matches = matches.map(function (a) {\n        return new Terms(a, _this.world, _this.refText, _this.refTerms);\n      });\n      return new Text(matches, this.world, this.parent);\n    },\n\n    /**return first match */\n    matchOne: function matchOne(str) {\n      //fail-fast\n      if (this.terms.length === 0) {\n        return null;\n      }\n\n      var regs = syntax(str);\n\n      for (var t = 0; t < this.terms.length; t++) {\n        //don't loop through if '^'\n        if (regs[0] && regs[0].starting && t > 0) {\n          break;\n        }\n\n        var m = startHere(this, t, regs);\n\n        if (m) {\n          return m;\n        }\n      }\n\n      return null;\n    },\n\n    /**return first match */\n    has: function has(str) {\n      return this.matchOne(str) !== null;\n    }\n  }; //hook them into result.proto\n\n  Object.keys(methods).forEach(function (k) {\n    Terms.prototype[k] = methods[k];\n  });\n  return Terms;\n};\n\nmodule.exports = matchMethods;\n\n},{\"../../text\":192,\"./lib\":170,\"./lib/startHere\":174,\"./lib/syntax\":175}],167:[function(_dereq_,module,exports){\n'use strict'; //applies the reg capture group setting to the term\n\nvar applyCaptureGroup = function applyCaptureGroup(term, reg) {\n  if (reg.capture) {\n    term.captureGroup = true;\n  } else {\n    term.captureGroup = undefined;\n  }\n};\n\nmodule.exports = applyCaptureGroup;\n\n},{}],168:[function(_dereq_,module,exports){\n'use strict'; //take all the matches, and if there is a [capture group], only return that.\n\nvar onlyCaptureGroup = function onlyCaptureGroup(matches) {\n  var results = [];\n  matches.forEach(function (terms) {\n    //if there's no capture group, we good.\n    if (terms.filter(function (t) {\n      return t.captureGroup === true;\n    }).length === 0) {\n      results.push(terms);\n      return;\n    } //otherwise, just return them as seperate subsets\n\n\n    var current = [];\n\n    for (var i = 0; i < terms.length; i += 1) {\n      if (terms[i].captureGroup) {\n        current.push(terms[i]);\n      } else if (current.length > 0) {\n        results.push(current);\n        current = [];\n      }\n    }\n\n    if (current.length > 0) {\n      results.push(current);\n    }\n  });\n  return results;\n};\n\nmodule.exports = onlyCaptureGroup;\n\n},{}],169:[function(_dereq_,module,exports){\n'use strict'; //\n//find easy reasons to skip running the full match on this\n\nvar fastPass = function fastPass(ts, regs) {\n  for (var i = 0; i < regs.length; i++) {\n    var reg = regs[i];\n    var found = false; //we can't cheat on these fancy rules:\n\n    if (reg.optional === true || reg.negative === true || reg.minMax !== undefined) {\n      continue;\n    } //look-for missing term-matches\n\n\n    if (reg.normal !== undefined) {\n      for (var o = 0; o < ts.terms.length; o++) {\n        if (ts.terms[o].normal === reg.normal || ts.terms[o].silent_term === reg.normal) {\n          found = true;\n          break;\n        } //we can't handle lumped-terms with this method\n\n\n        if (ts.terms[o].lumped === true) {\n          return false;\n        }\n      }\n\n      if (found === false) {\n        return true;\n      }\n    } //look for missing tags\n\n\n    if (reg.tag !== undefined) {\n      for (var _o = 0; _o < ts.terms.length; _o++) {\n        if (ts.terms[_o].tags[reg.tag] === true) {\n          found = true;\n          break;\n        }\n      }\n\n      if (found === false) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\nmodule.exports = fastPass;\n\n},{}],170:[function(_dereq_,module,exports){\n'use strict';\n\nvar syntax = _dereq_('./syntax');\n\nvar startHere = _dereq_('./startHere');\n\nvar fastPass = _dereq_('./fastPass');\n\nvar handleCaptureGroup = _dereq_('./captureGroup'); //ensure we have atleast one non-optional demand\n// const isTautology = function(regs) {\n//   for (let i = 0; i < regs.length; i++) {\n//     if (!regs[i].optional && !regs[i].astrix && !regs[i].anyOne) {\n//       return false;\n//     }\n//   }\n//   return true;\n// };\n//make a reg syntax from a text object\n\n\nvar findFromTerms = function findFromTerms(ts) {\n  if (!ts) {\n    return [];\n  }\n\n  var arr = ts.terms.map(function (t) {\n    return {\n      id: t.uid\n    };\n  });\n  return arr;\n}; //\n\n\nvar match = function match(ts, reg, verbose) {\n  //parse for backwards-compatibility\n  if (typeof reg === 'string') {\n    reg = syntax(reg);\n  } else if (reg && reg.isA === 'Text') {\n    reg = findFromTerms(reg.list[0]);\n  } else if (reg && reg.isA === 'Terms') {\n    reg = findFromTerms(reg);\n  }\n\n  if (!reg || reg.length === 0) {\n    return [];\n  } //do a fast-pass for easy negatives\n\n\n  if (fastPass(ts, reg, verbose) === true) {\n    return [];\n  } //ok, start long-match\n\n\n  var matches = [];\n\n  for (var t = 0; t < ts.terms.length; t += 1) {\n    //don't loop through if '^'\n    if (t > 0 && reg[0] && reg[0].starting) {\n      break;\n    }\n\n    var m = startHere(ts, t, reg, verbose);\n\n    if (m && m.length > 0) {\n      matches.push(m); //handle capture-groups subset\n      // let hasCapture=matches\n      //ok, don't try to match these again.\n\n      var skip = m.length - 1;\n      t += skip; //this could use some work\n    }\n  } //handle capture-group subset\n\n\n  matches = handleCaptureGroup(matches);\n  return matches;\n};\n\nmodule.exports = match;\n\n},{\"./captureGroup\":168,\"./fastPass\":169,\"./startHere\":174,\"./syntax\":175}],171:[function(_dereq_,module,exports){\n'use strict';\n\nvar applyCaptureGroup = _dereq_('./applyCaptureGroup'); //compare 1 term to one reg\n\n\nvar perfectMatch = function perfectMatch(term, reg) {\n  if (!term || !reg) {\n    return false;\n  } //support '.' - any\n\n\n  if (reg.anyOne === true) {\n    return true;\n  } //pos-match\n\n\n  if (reg.tag !== undefined) {\n    return term.tags[reg.tag];\n  } //id-match\n\n\n  if (reg.id !== undefined) {\n    return reg.id === term.uid;\n  } //text-match\n\n\n  if (reg.normal !== undefined) {\n    return reg.normal === term.normal || reg.normal === term.silent_term;\n  } //suffix matches '-nny'\n\n\n  if (reg.suffix === true && reg.partial !== undefined) {\n    var len = term.normal.length;\n    return term.normal.substr(len - reg.partial.length, len) === reg.partial;\n  } //prefix matches 'fun-'\n\n\n  if (reg.prefix === true && reg.partial !== undefined) {\n    return term.normal.substr(0, reg.partial.length) === reg.partial;\n  } //infix matches '-nn-'\n\n\n  if (reg.infix === true && reg.partial) {\n    return term.normal.indexOf(reg.partial) !== -1;\n  } //full-on regex-match '/a*?/'\n\n\n  if (reg.regex !== undefined) {\n    return reg.regex.test(term.normal) || reg.regex.test(term.text);\n  } //one-of term-match\n\n\n  if (reg.oneOf !== undefined) {\n    for (var i = 0; i < reg.oneOf.tagArr.length; i++) {\n      if (term.tags.hasOwnProperty(reg.oneOf.tagArr[i]) === true) {\n        return true;\n      }\n    }\n\n    return reg.oneOf.terms.hasOwnProperty(term.normal) || reg.oneOf.terms.hasOwnProperty(term.silent_term);\n  }\n\n  return false;\n}; //wrap above method, to support '!' negation\n\n\nvar isMatch = function isMatch(term, reg, verbose) {\n  if (!term || !reg) {\n    return false;\n  }\n\n  var found = perfectMatch(term, reg, verbose); //reverse it for .not()\n\n  if (reg.negative) {\n    found = !Boolean(found);\n  }\n\n  if (found) {\n    //only apply capture group settings to matches\n    applyCaptureGroup(term, reg);\n  }\n\n  return found;\n};\n\nmodule.exports = isMatch;\n\n},{\"./applyCaptureGroup\":167}],172:[function(_dereq_,module,exports){\n'use strict';\n\nvar almostMatch = function almostMatch(reg_str, term) {\n  var want = term.normal.substr(0, reg_str.length);\n  return want === reg_str;\n}; // match ['john', 'smith'] regs, when the term is lumped\n\n\nvar lumpMatch = function lumpMatch(term, regs, reg_i) {\n  var reg_str = regs[reg_i].normal; //is this a partial match? 'tony'& 'tony hawk'\n\n  if (reg_str !== undefined && almostMatch(reg_str, term)) {\n    //try to grow it\n    reg_i = reg_i + 1;\n\n    for (reg_i; reg_i < regs.length; reg_i++) {\n      reg_str += ' ' + regs[reg_i].normal; // is it now perfect?\n\n      if (reg_str === term.normal) {\n        return reg_i;\n      } // is it still almost?\n\n\n      if (almostMatch(reg_str, term) === false) {\n        return null;\n      }\n    }\n  }\n\n  return null;\n};\n\nmodule.exports = lumpMatch;\n\n},{}],173:[function(_dereq_,module,exports){\narguments[4][73][0].apply(exports,arguments)\n},{\"../../paths\":189,\"dup\":73}],174:[function(_dereq_,module,exports){\n'use strict';\n\nvar lumpMatch = _dereq_('./lumpMatch');\n\nvar isMatch = _dereq_('./isMatch');\n\nvar applyCaptureGroup = _dereq_('./applyCaptureGroup'); // match everything until this point - '*'\n\n\nvar greedyUntil = function greedyUntil(ts, i, reg) {\n  for (; i < ts.length; i++) {\n    if (isMatch(ts.terms[i], reg)) {\n      return i;\n    }\n  }\n\n  return null;\n}; //keep matching this reg as long as possible\n\n\nvar greedyOf = function greedyOf(ts, i, reg, until) {\n  for (; i < ts.length; i++) {\n    var t = ts.terms[i]; //found next reg ('until')\n\n    if (until && isMatch(t, until)) {\n      return i;\n    } //stop here\n\n\n    if (!isMatch(t, reg)) {\n      return i;\n    }\n  }\n\n  return i;\n}; //try and match all regs, starting at this term\n\n\nvar startHere = function startHere(ts, startAt, regs, verbose) {\n  var term_i = startAt; //check each regex-thing\n\n  for (var reg_i = 0; reg_i < regs.length; reg_i++) {\n    var term = ts.terms[term_i];\n    var reg = regs[reg_i];\n    var next_reg = regs[reg_i + 1];\n\n    if (!term) {\n      //we didn't need it anyways\n      if (reg.optional === true) {\n        continue;\n      }\n\n      return null;\n    } //catch '^' errors\n\n\n    if (reg.starting === true && term_i > 0) {\n      return null;\n    } //catch '$' errors\n\n\n    if (reg.ending === true && term_i !== ts.length - 1 && !reg.minMax) {\n      return null;\n    } //support '*'\n\n\n    if (reg.astrix === true) {\n      //just grab until the end..\n      if (!next_reg) {\n        var terms = ts.terms.slice(startAt, ts.length); //apply capture group settings for all wildcard terms\n\n        for (var wildcardTerm_i = term_i - startAt; wildcardTerm_i < terms.length; wildcardTerm_i++) {\n          applyCaptureGroup(terms[wildcardTerm_i], reg);\n        }\n\n        return terms;\n      }\n\n      var foundAt = greedyUntil(ts, term_i, regs[reg_i + 1]);\n\n      if (!foundAt) {\n        return null;\n      } //apply capture group settings for all wildcard terms\n\n\n      for (var _wildcardTerm_i = term_i; _wildcardTerm_i < foundAt; _wildcardTerm_i++) {\n        applyCaptureGroup(ts.terms[_wildcardTerm_i], reg);\n      }\n\n      term_i = foundAt + 1;\n      reg_i += 1;\n      continue;\n    } //support '#Noun{x,y}'\n\n\n    if (regs[reg_i].minMax !== undefined) {\n      var min = regs[reg_i].minMax.min || 0;\n      var max = regs[reg_i].minMax.max;\n      var until = regs[reg_i + 1];\n\n      for (var i = 0; i < max; i++) {\n        //ergh, please clean this loop up..\n        var t = ts.terms[term_i + i];\n\n        if (!t) {\n          return null;\n        } //end here\n\n\n        if (isMatch(t, reg) === false) {\n          return null;\n        } //should we be greedier?\n\n\n        if (i < min - 1) {\n          continue; //gotta keep going!\n        } //we can end here, after the minimum\n\n\n        if (!until) {\n          term_i += 1;\n          break;\n        } // we're greedy-to-now\n\n\n        if (i >= min && isMatch(t, until)) {\n          break;\n        } //end with a greedy-match for next term\n\n\n        var nextT = ts.terms[term_i + i + 1];\n\n        if (nextT && isMatch(nextT, until)) {\n          term_i += i + 2;\n          reg_i += 1;\n          break;\n        } else if (i === max - 1) {\n          //we've maxed-out\n          return null;\n        }\n      }\n\n      continue;\n    } //if optional, check next one\n\n\n    if (reg.optional === true) {\n      var _until = regs[reg_i + 1];\n      term_i = greedyOf(ts, term_i, reg, _until);\n      continue;\n    } //check a perfect match\n\n\n    if (isMatch(term, reg, verbose)) {\n      term_i += 1; //try to greedy-match '+'\n\n      if (reg.consecutive === true) {\n        var _until2 = regs[reg_i + 1];\n        term_i = greedyOf(ts, term_i, reg, _until2);\n      }\n\n      continue;\n    }\n\n    if (term.silent_term && !term.normal) {\n      //skip over silent contraction terms\n      //we will continue on it, but not start on it\n      if (reg_i === 0) {\n        return null;\n      } //try the next term, but with this regex again\n\n\n      term_i += 1;\n      reg_i -= 1;\n      continue;\n    } //handle partial-matches of lumped terms\n\n\n    var lumpUntil = lumpMatch(term, regs, reg_i, verbose);\n\n    if (lumpUntil !== null) {\n      reg_i = lumpUntil;\n      term_i += 1;\n      continue;\n    } //was it optional anways?\n\n\n    if (reg.optional === true) {\n      continue;\n    }\n\n    return null;\n  }\n\n  return ts.terms.slice(startAt, term_i);\n};\n\nmodule.exports = startHere;\n\n},{\"./applyCaptureGroup\":167,\"./isMatch\":171,\"./lumpMatch\":172}],175:[function(_dereq_,module,exports){\n'use strict'; // parse a search lookup term find the regex-like syntax in this term\n\nvar fns = _dereq_('./paths').fns; //regs-\n\n\nvar range = /\\{[0-9,]+\\}$/; //trim char#0\n\nvar noFirst = function noFirst(str) {\n  return str.substr(1, str.length);\n};\n\nvar noLast = function noLast(str) {\n  return str.substring(0, str.length - 1);\n}; //turn 'regex-like' search string into parsed json\n\n\nvar parse_term = function parse_term(term) {\n  term = term || '';\n  term = term.trim();\n  var reg = {}; //order matters here\n  //1-character hasta be a text-match\n\n  if (term.length === 1 && term !== '.' && term !== '*') {\n    reg.normal = term.toLowerCase();\n    return reg;\n  } //negation ! flag\n\n\n  if (term.charAt(0) === '!') {\n    term = noFirst(term);\n    reg.negative = true;\n  } //leading ^ flag\n\n\n  if (term.charAt(0) === '^') {\n    term = noFirst(term);\n    reg.starting = true;\n  } //trailing $ flag means ending\n\n\n  if (term.charAt(term.length - 1) === '$') {\n    term = noLast(term);\n    reg.ending = true;\n  } //optional flag\n\n\n  if (term.charAt(term.length - 1) === '?') {\n    term = noLast(term);\n    reg.optional = true;\n  } //atleast-one-but-greedy flag\n\n\n  if (term.charAt(term.length - 1) === '+') {\n    term = noLast(term);\n    reg.consecutive = true;\n  } //prefix/suffix/infix matches\n\n\n  if (term.charAt(term.length - 1) === '_') {\n    term = noLast(term);\n    reg.prefix = true; //try both '-match-'\n\n    if (term.charAt(0) === '_') {\n      term = noFirst(term);\n      reg.prefix = undefined;\n      reg.infix = true;\n    }\n\n    reg.partial = term;\n    term = '';\n  } else if (term.charAt(0) === '_') {\n    term = noFirst(term);\n    reg.suffix = true;\n    reg.partial = term;\n    term = '';\n  } //min/max any '{1,3}'\n\n\n  if (term.charAt(term.length - 1) === '}' && range.test(term) === true) {\n    var m = term.match(/\\{([0-9])*,? ?([0-9]+)\\}/);\n    reg.minMax = {\n      min: parseInt(m[1], 10) || 0,\n      max: parseInt(m[2], 10)\n    };\n    term = term.replace(range, '');\n  } //pos flag\n\n\n  if (term.charAt(0) === '#') {\n    term = noFirst(term);\n    reg.tag = fns.titleCase(term);\n    term = '';\n  } //support /regex/ mode\n\n\n  if (term.charAt(0) === '/' && term.charAt(term.length - 1) === '/') {\n    term = noLast(term);\n    term = noFirst(term); //actually make the regex\n\n    reg.regex = new RegExp(term, 'i');\n    term = '';\n  } //one_of options flag\n\n\n  if (term.charAt(0) === '(' && term.charAt(term.length - 1) === ')') {\n    term = noLast(term);\n    term = noFirst(term);\n    var arr = term.split(/\\|/g);\n    reg.oneOf = {\n      terms: {},\n      tagArr: []\n    };\n    arr.forEach(function (str) {\n      //try a tag match\n      if (str.charAt(0) === '#') {\n        var tag = str.substr(1, str.length);\n        tag = fns.titleCase(tag);\n        reg.oneOf.tagArr.push(tag);\n      } else {\n        reg.oneOf.terms[str] = true;\n      }\n    });\n    term = '';\n  } //a period means any one term\n\n\n  if (term === '.') {\n    reg.anyOne = true;\n    term = '';\n  } //a * means anything until sentence end\n\n\n  if (term === '*') {\n    reg.astrix = true;\n    term = '';\n  }\n\n  if (term !== '') {\n    //support \\ encoding of #[]()*+?^\n    term = term.replace(/\\\\([\\\\#\\*\\.\\[\\]\\(\\)\\+\\?\\^])/g, '');\n    reg.normal = term.toLowerCase();\n  }\n\n  return reg;\n}; //turn a match string into an array of objects\n\n\nvar parse_all = function parse_all(input) {\n  input = input || '';\n  var regs = input.split(/ +/); //bundle-up multiple-words inside parentheses\n\n  for (var i = 0; i < regs.length; i += 1) {\n    if (regs[i].indexOf('(') !== -1 && regs[i].indexOf(')') === -1) {\n      var nextWord = regs[i + 1];\n\n      if (nextWord && nextWord.indexOf('(') === -1 && nextWord.indexOf(')') !== -1) {\n        regs[i + 1] = regs[i] + ' ' + regs[i + 1];\n        regs[i] = '';\n      }\n    }\n  }\n\n  regs = regs.filter(function (f) {\n    return f;\n  });\n  var captureOn = false;\n  regs = regs.map(function (reg) {\n    var hasEnd = false; //support [#Noun] capture-group syntax\n\n    if (reg.charAt(0) === '[') {\n      reg = noFirst(reg);\n      captureOn = true;\n    }\n\n    if (reg.charAt(reg.length - 1) === ']') {\n      reg = noLast(reg);\n      captureOn = false;\n      hasEnd = true;\n    }\n\n    reg = parse_term(reg);\n\n    if (captureOn === true || hasEnd === true) {\n      reg.capture = true;\n    }\n\n    return reg;\n  });\n  return regs;\n};\n\nmodule.exports = parse_all; // console.log(JSON.stringify(parse_all('the (canadian|united states|british) senate'), null, 2));\n\n},{\"./paths\":173}],176:[function(_dereq_,module,exports){\n'use strict'; //\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar syntax = _dereq_('./lib/syntax');\n\nvar startHere = _dereq_('./lib/startHere');\n\nvar Text = _dereq_('../../text');\n\nvar addfns = function addfns(Terms) {\n  var fns = {\n    //blacklist from a {word:true} object\n    notObj: function notObj(r, obj) {\n      var matches = [];\n      var current = [];\n      r.terms.forEach(function (t) {\n        //TODO? support multi-word blacklists\n        //we should blacklist this term\n        if (obj.hasOwnProperty(t.normal)) {\n          if (current.length) {\n            matches.push(current);\n          }\n\n          current = [];\n        } else {\n          current.push(t);\n        }\n      }); //add remainder\n\n      if (current.length) {\n        matches.push(current);\n      }\n\n      matches = matches.map(function (a) {\n        return new Terms(a, r.world, r.refText, r.refTerms);\n      });\n      return new Text(matches, r.world, r.parent);\n    },\n    //blacklist from a match string\n    notString: function notString(r, want, verbose) {\n      var matches = [];\n      var regs = syntax(want);\n      var terms = []; //try the match starting from each term\n\n      for (var i = 0; i < r.terms.length; i++) {\n        var bad = startHere(r, i, regs, verbose);\n\n        if (bad && bad.length > 0) {\n          //reset matches\n          if (terms.length > 0) {\n            matches.push(terms);\n            terms = [];\n          } //skip these terms now\n\n\n          i += bad.length - 1;\n          continue;\n        }\n\n        terms.push(r.terms[i]);\n      } //remaining ones\n\n\n      if (terms.length > 0) {\n        matches.push(terms);\n      }\n\n      matches = matches.map(function (a) {\n        return new Terms(a, r.world, r.refText, r.refTerms);\n      }); // return matches\n\n      return new Text(matches, r.world, r.parent);\n    }\n  }; //blacklist from a [word, word] array\n\n  fns.notArray = function (r, arr) {\n    var obj = arr.reduce(function (h, a) {\n      h[a] = true;\n      return h;\n    }, {});\n    return fns.notObj(r, obj);\n  };\n\n  fns.notText = function (r, m) {\n    var arr = m.out('array'); //i guess this is fine..\n\n    return fns.notArray(r, arr);\n  };\n  /**return everything but these matches*/\n\n\n  Terms.prototype.not = function (want, verbose) {\n    //support [word, word] blacklist\n    if (_typeof(want) === 'object') {\n      var type = Object.prototype.toString.call(want);\n\n      if (type === '[object Array]') {\n        return fns.notArray(this, want, verbose);\n      }\n\n      if (type === '[object Object]') {\n        if (want.isA === 'Text') {\n          return fns.notText(this, want, verbose);\n        } else {\n          return fns.notObj(this, want, verbose);\n        }\n      }\n    }\n\n    if (typeof want === 'string') {\n      return fns.notString(this, want, verbose);\n    }\n\n    return this;\n  };\n\n  return Terms;\n};\n\nmodule.exports = addfns;\n\n},{\"../../text\":192,\"./lib/startHere\":174,\"./lib/syntax\":175}],177:[function(_dereq_,module,exports){\n'use strict';\n\nvar mutate = _dereq_('../mutate');\n\nvar addMethod = function addMethod(Terms) {\n  //hook it into Terms.proto\n  Terms.prototype.delete = function (reg) {\n    //don't touch parent if empty\n    if (!this.found) {\n      return this;\n    } //remove all selected\n\n\n    if (!reg) {\n      this.parentTerms = mutate.deleteThese(this.parentTerms, this);\n      return this;\n    } //only remove a portion of this\n\n\n    var found = this.match(reg);\n\n    if (found.found) {\n      var r = mutate.deleteThese(this, found);\n      return r;\n    }\n\n    return this.parentTerms;\n  };\n\n  return Terms;\n};\n\nmodule.exports = addMethod;\n\n},{\"../mutate\":188}],178:[function(_dereq_,module,exports){\n'use strict';\n\nvar mutate = _dereq_('../mutate'); //whitespace\n\n\nvar addSpaceAt = function addSpaceAt(ts, i) {\n  if (!ts.terms.length || !ts.terms[i]) {\n    return ts;\n  }\n\n  ts.terms[i].whitespace.before = ' ';\n  return ts;\n};\n\nvar insertMethods = function insertMethods(Terms) {\n  //accept any sorta thing\n  var ensureTerms = function ensureTerms(input, world) {\n    if (input.isA === 'Terms') {\n      return input;\n    }\n\n    if (input.isA === 'Term') {\n      return new Terms([input], world);\n    } //handle a string\n\n\n    var ts = Terms.fromString(input, world);\n    ts.tagger();\n    return ts;\n  };\n\n  var methods = {\n    insertBefore: function insertBefore(input, tag) {\n      var original_l = this.terms.length;\n      var ts = ensureTerms(input, this.world);\n\n      if (tag) {\n        ts.tag(tag);\n      }\n\n      var index = this.index(); //pad a space on parent\n\n      addSpaceAt(this.parentTerms, index);\n\n      if (index > 0) {\n        addSpaceAt(ts, 0); //if in middle of sentence\n      }\n\n      this.parentTerms.terms = mutate.insertAt(this.parentTerms.terms, index, ts); //also copy them to current selection\n\n      if (this.terms.length === original_l) {\n        this.terms = ts.terms.concat(this.terms);\n      }\n\n      return this;\n    },\n    insertAfter: function insertAfter(input, tag) {\n      var original_l = this.terms.length;\n      var ts = ensureTerms(input, this.world);\n\n      if (tag) {\n        ts.tag(tag);\n      }\n\n      var index = this.terms[this.terms.length - 1].index(); //beginning whitespace to ts\n\n      addSpaceAt(ts, 0);\n      this.parentTerms.terms = mutate.insertAt(this.parentTerms.terms, index + 1, ts); //also copy them to current selection\n\n      if (this.terms.length === original_l) {\n        this.terms = this.terms.concat(ts.terms);\n      }\n\n      return this;\n    },\n    insertAt: function insertAt(index, input, tag) {\n      if (index < 0) {\n        index = 0;\n      }\n\n      var original_l = this.terms.length;\n      var ts = ensureTerms(input, this.world); //tag that thing too\n\n      if (tag) {\n        ts.tag(tag);\n      }\n\n      if (index > 0) {\n        addSpaceAt(ts, 0); //if in middle of sentence\n      }\n\n      this.parentTerms.terms = mutate.insertAt(this.parentTerms.terms, index, ts); //also copy them to current selection\n\n      if (this.terms.length === original_l) {\n        //splice the new terms into this (yikes!)\n        Array.prototype.splice.apply(this.terms, [index, 0].concat(ts.terms));\n      } //beginning whitespace to ts\n\n\n      if (index === 0) {\n        this.terms[0].whitespace.before = '';\n        ts.terms[ts.terms.length - 1].whitespace.after = ' ';\n      }\n\n      return this;\n    }\n  }; //hook them into result.proto\n\n  Object.keys(methods).forEach(function (k) {\n    Terms.prototype[k] = methods[k];\n  });\n  return Terms;\n};\n\nmodule.exports = insertMethods;\n\n},{\"../mutate\":188}],179:[function(_dereq_,module,exports){\n'use strict'; //these methods are simply term-methods called in a loop\n\nvar addMethods = function addMethods(Terms) {\n  var foreach = [// ['tag'],\n  // ['unTag'],\n  // ['canBe'],\n  ['toUpperCase', 'UpperCase'], ['toLowerCase'], ['toTitleCase', 'TitleCase']];\n  foreach.forEach(function (arr) {\n    var k = arr[0];\n    var tag = arr[1];\n\n    var myFn = function myFn() {\n      var args = arguments;\n      this.terms.forEach(function (t) {\n        t[k].apply(t, args);\n      });\n\n      if (tag) {\n        this.tag(tag, k);\n      }\n\n      return this;\n    };\n\n    Terms.prototype[k] = myFn;\n  });\n  return Terms;\n};\n\nmodule.exports = addMethods;\n\n},{}],180:[function(_dereq_,module,exports){\n'use strict';\n\nvar Term = _dereq_('../../../term'); //merge two term objects.. carefully\n\n\nvar makeText = function makeText(a, b) {\n  var text = a.whitespace.before + a.text + a.whitespace.after;\n  text += b.whitespace.before + b.text + b.whitespace.after;\n  return text;\n};\n\nvar combine = function combine(s, i) {\n  var a = s.terms[i];\n  var b = s.terms[i + 1];\n\n  if (!b) {\n    return;\n  }\n\n  var text = makeText(a, b);\n  s.terms[i] = new Term(text, a.context);\n  s.terms[i].normal = a.normal + ' ' + b.normal;\n  s.terms[i].lumped = true;\n  s.terms[i].parentTerms = s.terms[i + 1].parentTerms;\n  s.terms[i + 1] = null;\n  s.terms = s.terms.filter(function (t) {\n    return t !== null;\n  });\n  return;\n};\n\nmodule.exports = combine;\n\n},{\"../../../term\":143}],181:[function(_dereq_,module,exports){\n'use strict';\n\nvar combine = _dereq_('./combine');\n\nvar mutate = _dereq_('../../mutate'); //merge-together our current match into one term\n\n\nvar combineThem = function combineThem(ts, tags) {\n  var len = ts.terms.length;\n\n  for (var i = 0; i < len; i++) {\n    combine(ts, 0);\n  }\n\n  var lumped = ts.terms[0];\n  lumped.tags = tags;\n  return lumped;\n};\n\nvar lumpMethods = function lumpMethods(Terms) {\n  Terms.prototype.lump = function () {\n    //collect the tags up\n    var index = this.index();\n    var tags = {};\n    this.terms.forEach(function (t) {\n      Object.keys(t.tags).forEach(function (tag) {\n        return tags[tag] = true;\n      });\n    }); //just lump the whole-thing together\n\n    if (this.parentTerms === this) {\n      var _lumped = combineThem(this, tags);\n\n      this.terms = [_lumped];\n      return this;\n    } //otherwise lump just part of it. delete/insert.\n\n\n    this.parentTerms = mutate.deleteThese(this.parentTerms, this); //merge-together our current match into one term\n\n    var lumped = combineThem(this, tags); //put it back (in the same place)\n\n    this.parentTerms.terms = mutate.insertAt(this.parentTerms.terms, index, lumped);\n    return this;\n  };\n\n  return Terms;\n};\n\nmodule.exports = lumpMethods;\n\n},{\"../../mutate\":188,\"./combine\":180}],182:[function(_dereq_,module,exports){\n'use strict';\n\nvar _tagger = _dereq_('../../tagger');\n\nvar miscMethods = function miscMethods(Terms) {\n  var methods = {\n    tagger: function tagger() {\n      _tagger(this);\n\n      return this;\n    },\n    firstTerm: function firstTerm() {\n      return this.terms[0];\n    },\n    lastTerm: function lastTerm() {\n      return this.terms[this.terms.length - 1];\n    },\n    all: function all() {\n      return this.parent;\n    },\n    data: function data() {\n      return {\n        text: this.out('text'),\n        normal: this.out('normal')\n      };\n    },\n    term: function term(n) {\n      return this.terms[n];\n    },\n    first: function first() {\n      var t = this.terms[0];\n      return new Terms([t], this.world, this.refText, this.refTerms);\n    },\n    last: function last() {\n      var t = this.terms[this.terms.length - 1];\n      return new Terms([t], this.world, this.refText, this.refTerms);\n    },\n    slice: function slice(start, end) {\n      var terms = this.terms.slice(start, end);\n      return new Terms(terms, this.world, this.refText, this.refTerms);\n    },\n    index: function index() {\n      var parent = this.parentTerms;\n      var first = this.terms[0];\n\n      if (!parent || !first) {\n        return null; //maybe..\n      }\n\n      for (var i = 0; i < parent.terms.length; i++) {\n        if (first === parent.terms[i]) {\n          return i;\n        }\n      }\n\n      return null;\n    },\n    termIndex: function termIndex() {\n      var first = this.terms[0];\n      var ref = this.refText || this;\n\n      if (!ref || !first) {\n        return null; //maybe..\n      }\n\n      var n = 0;\n\n      for (var i = 0; i < ref.list.length; i++) {\n        var ts = ref.list[i];\n\n        for (var o = 0; o < ts.terms.length; o++) {\n          if (ts.terms[o] === first) {\n            return n;\n          }\n\n          n += 1;\n        }\n      }\n\n      return n;\n    },\n    //number of characters in this match\n    chars: function chars() {\n      return this.terms.reduce(function (i, t) {\n        i += t.whitespace.before.length;\n        i += t.text.length;\n        i += t.whitespace.after.length;\n        return i;\n      }, 0);\n    },\n    //just .length\n    wordCount: function wordCount() {\n      return this.terms.length;\n    },\n\n    /** punctuation */\n    setPunctuation: function setPunctuation(punct) {\n      var last = this.terms[this.terms.length - 1];\n      last.setPunctuation(punct);\n    },\n    getPunctuation: function getPunctuation() {\n      var lastTerm = this.last().terms[0];\n\n      if (!lastTerm) {\n        return '';\n      }\n\n      return lastTerm.getPunctuation() || '';\n    },\n    //this has term-order logic, so has to be here\n    toCamelCase: function toCamelCase() {\n      this.toTitleCase();\n      this.terms.forEach(function (t, i) {\n        if (i !== 0) {\n          t.whitespace.before = '';\n        }\n\n        t.whitespace.after = '';\n      });\n      this.tag('#CamelCase', 'toCamelCase');\n      return this;\n    }\n  }; //hook them into result.proto\n\n  Object.keys(methods).forEach(function (k) {\n    Terms.prototype[k] = methods[k];\n  });\n  return Terms;\n};\n\nmodule.exports = miscMethods;\n\n},{\"../../tagger\":95}],183:[function(_dereq_,module,exports){\n'use strict';\n\nvar fns = _dereq_('../paths').fns;\n\nvar methods = {\n  text: function text(ts) {\n    return ts.terms.reduce(function (str, t) {\n      str += t.out('text');\n      return str;\n    }, '');\n  },\n  //like 'text', but no leading/trailing whitespace\n  match: function match(ts) {\n    var str = '';\n    var len = ts.terms.length;\n\n    for (var i = 0; i < len; i++) {\n      if (i > 0) {\n        str += ts.terms[i].whitespace.before;\n      }\n\n      str += ts.terms[i].text.replace(/[,.?!]$/, ''); //remove comma\n\n      if (i < len - 1) {\n        str += ts.terms[i].whitespace.after;\n      }\n    }\n\n    return str;\n  },\n  normal: function normal(ts) {\n    var terms = ts.terms.filter(function (t) {\n      return t.text;\n    });\n    terms = terms.map(function (t) {\n      return t.normal; //+ punct;\n    });\n    return terms.join(' ');\n  },\n  grid: function grid(ts) {\n    var str = '  ';\n    str += ts.terms.reduce(function (s, t) {\n      s += fns.leftPad(t.text, 11);\n      return s;\n    }, '');\n    return str + '\\n\\n';\n  },\n  color: function color(ts) {\n    return ts.terms.reduce(function (s, t) {\n      s += fns.printTerm(t);\n      return s;\n    }, '');\n  },\n  csv: function csv(ts) {\n    return ts.terms.map(function (t) {\n      return t.normal.replace(/,/g, '');\n    }).join(',');\n  },\n  newlines: function newlines(ts) {\n    return ts.terms.reduce(function (str, t) {\n      str += t.out('text').replace(/\\n/g, ' ');\n      return str;\n    }, '').replace(/^\\s/, '');\n  },\n\n  /** no punctuation, fancy business **/\n  root: function root(ts) {\n    return ts.terms.map(function (t) {\n      return t.silent_term || t.root;\n    }).join(' ').toLowerCase();\n  },\n  html: function html(ts) {\n    return ts.terms.map(function (t) {\n      return t.render.html();\n    }).join(' ');\n  },\n  debug: function debug(ts) {\n    ts.terms.forEach(function (t) {\n      t.out('debug');\n    });\n  },\n  custom: function custom(ts, obj) {\n    return ts.terms.map(function (t) {\n      return Object.keys(obj).reduce(function (h, k) {\n        if (obj[k] && t[k]) {\n          if (typeof t[k] === 'function') {\n            h[k] = t[k]();\n          } else {\n            h[k] = t[k];\n          }\n        }\n\n        return h;\n      }, {});\n    });\n  }\n};\nmethods.plaintext = methods.text;\nmethods.normalize = methods.normal;\nmethods.normalized = methods.normal;\nmethods.colors = methods.color;\nmethods.tags = methods.terms;\n\nvar renderMethods = function renderMethods(Terms) {\n  Terms.prototype.out = function (fn) {\n    if (typeof fn === 'string') {\n      if (methods[fn]) {\n        return methods[fn](this);\n      }\n    } else if (fns.isObject(fn) === true) {\n      //support .out({})\n      return methods.custom(this, fn);\n    }\n\n    return methods.text(this);\n  }; //check method\n\n\n  Terms.prototype.debug = function () {\n    return methods.debug(this);\n  };\n\n  return Terms;\n};\n\nmodule.exports = renderMethods;\n\n},{\"../paths\":189}],184:[function(_dereq_,module,exports){\n'use strict';\n\nvar mutate = _dereq_('../mutate');\n\nvar replaceMethods = function replaceMethods(Terms) {\n  var methods = {\n    /**swap this for that */\n    replace: function replace(str1, str2, keepTags) {\n      //in this form, we 'replaceWith'\n      if (str2 === undefined) {\n        return this.replaceWith(str1, keepTags);\n      }\n\n      this.match(str1).replaceWith(str2, keepTags);\n      return this;\n    },\n\n    /**swap this for that */\n    replaceWith: function replaceWith(str, keepTags) {\n      var newTs = Terms.fromString(str, this.world);\n      newTs.tagger(); //if instructed, apply old tags to new terms\n\n      if (keepTags) {\n        this.terms.forEach(function (t, i) {\n          var tags = Object.keys(t.tags);\n\n          if (newTs.terms[i] !== undefined) {\n            tags.forEach(function (tg) {\n              return newTs.terms[i].tag(tg, 'from-memory');\n            });\n          }\n        });\n      } //keep its ending punctation..\n\n\n      var endPunct = this.getPunctuation(); //grab the insertion place..\n\n      var index = this.index();\n      this.parentTerms = mutate.deleteThese(this.parentTerms, this);\n      this.parentTerms.terms = mutate.insertAt(this.parentTerms.terms, index, newTs);\n      this.terms = newTs.terms; //add-in the punctuation at the end..\n\n      if (this.terms.length > 0) {\n        this.terms[this.terms.length - 1].whitespace.after += endPunct;\n      }\n\n      return this;\n    }\n  }; //hook them into result.proto\n\n  Object.keys(methods).forEach(function (k) {\n    Terms.prototype[k] = methods[k];\n  });\n  return Terms;\n};\n\nmodule.exports = replaceMethods;\n\n},{\"../mutate\":188}],185:[function(_dereq_,module,exports){\n'use strict'; //break apart a termlist into (before, match after)\n\nvar breakUpHere = function breakUpHere(terms, ts) {\n  var firstTerm = ts.terms[0];\n  var len = ts.terms.length;\n\n  for (var i = 0; i < terms.length; i++) {\n    if (terms[i] === firstTerm) {\n      return {\n        before: terms.slice(0, i),\n        match: terms.slice(i, i + len),\n        after: terms.slice(i + len, terms.length)\n      };\n    }\n  }\n\n  return {\n    after: terms\n  };\n};\n\nvar splitMethods = function splitMethods(Terms) {\n  var methods = {\n    /** at the end of the match, split the terms **/\n    splitAfter: function splitAfter(reg, verbose) {\n      var _this = this;\n\n      var ms = this.match(reg, verbose); //Array[ts]\n\n      var termArr = this.terms;\n      var all = [];\n      ms.list.forEach(function (lookFor) {\n        var section = breakUpHere(termArr, lookFor);\n\n        if (section.before && section.match) {\n          all.push(section.before.concat(section.match));\n        }\n\n        termArr = section.after;\n      }); //add the remaining\n\n      if (termArr.length) {\n        all.push(termArr);\n      } //make them termlists\n\n\n      all = all.map(function (ts) {\n        var parent = _this.refText; //|| this;\n\n        return new Terms(ts, _this.world, parent, _this.refTerms);\n      });\n      return all;\n    },\n\n    /** return only before & after  the match**/\n    splitOn: function splitOn(reg, verbose) {\n      var _this2 = this;\n\n      var ms = this.match(reg, verbose); //Array[ts]\n\n      var termArr = this.terms;\n      var all = [];\n      ms.list.forEach(function (lookFor) {\n        var section = breakUpHere(termArr, lookFor);\n\n        if (section.before) {\n          all.push(section.before);\n        }\n\n        if (section.match) {\n          all.push(section.match);\n        }\n\n        termArr = section.after;\n      }); //add the remaining\n\n      if (termArr.length) {\n        all.push(termArr);\n      } //make them termlists\n\n\n      all = all.filter(function (a) {\n        return a && a.length;\n      });\n      all = all.map(function (ts) {\n        return new Terms(ts, ts.world, ts.refText, _this2.refTerms);\n      });\n      return all;\n    },\n\n    /** at the start of the match, split the terms**/\n    splitBefore: function splitBefore(reg, verbose) {\n      var _this3 = this;\n\n      var ms = this.match(reg, verbose); //Array[ts]\n\n      var termArr = this.terms;\n      var all = [];\n      ms.list.forEach(function (lookFor) {\n        var section = breakUpHere(termArr, lookFor);\n\n        if (section.before) {\n          all.push(section.before);\n        }\n\n        if (section.match) {\n          all.push(section.match);\n        }\n\n        termArr = section.after;\n      }); //add the remaining\n\n      if (termArr.length) {\n        all.push(termArr);\n      } //cleanup-step: merge all (middle) matches with the next one\n\n\n      for (var i = 0; i < all.length; i++) {\n        for (var o = 0; o < ms.length; o++) {\n          if (ms.list[o].terms[0] === all[i][0]) {\n            if (all[i + 1]) {\n              all[i] = all[i].concat(all[i + 1]);\n              all[i + 1] = [];\n            }\n          }\n        }\n      } //make them termlists\n\n\n      all = all.filter(function (a) {\n        return a && a.length;\n      });\n      all = all.map(function (ts) {\n        return new Terms(ts, ts.world, ts.refText, _this3.refTerms);\n      });\n      return all;\n    }\n  }; //hook them into result.proto\n\n  Object.keys(methods).forEach(function (k) {\n    Terms.prototype[k] = methods[k];\n  });\n  return Terms;\n};\n\nmodule.exports = splitMethods;\nexports = splitMethods;\n\n},{}],186:[function(_dereq_,module,exports){\n'use strict';\n\nvar addMethod = function addMethod(Terms) {\n  var methods = {\n    tag: function tag(_tag, reason) {\n      var tags = [];\n\n      if (typeof _tag === 'string') {\n        tags = _tag.split(' ');\n      } //fancy version:\n\n\n      if (tags.length > 1) {\n        //do indepenent tags for each term:\n        this.terms.forEach(function (t, i) {\n          t.tag(tags[i], reason);\n        });\n        return this;\n      } //non-fancy version:\n\n\n      this.terms.forEach(function (t) {\n        t.tag(_tag, reason);\n      });\n      return this;\n    },\n    unTag: function unTag(tag, reason) {\n      var tags = [];\n\n      if (typeof tag === 'string') {\n        tags = tag.split(' ');\n      } //fancy version:\n\n\n      if (tags.length > 1) {\n        //do indepenent tags for each term:\n        this.terms.forEach(function (t, i) {\n          t.unTag(tags[i], reason);\n        });\n        return this;\n      } //non-fancy version:\n\n\n      this.terms.forEach(function (t) {\n        t.unTag(tag, reason);\n      });\n      return this;\n    },\n    //which terms are consistent with this tag\n    canBe: function canBe(tag) {\n      var terms = this.terms.filter(function (t) {\n        return t.canBe(tag);\n      });\n      return new Terms(terms, this.world, this.refText, this.refTerms);\n    }\n  }; //hook them into result.proto\n\n  Object.keys(methods).forEach(function (k) {\n    Terms.prototype[k] = methods[k];\n  });\n  return Terms;\n};\n\nmodule.exports = addMethod;\n\n},{}],187:[function(_dereq_,module,exports){\n'use strict';\n\nvar transforms = function transforms(Terms) {\n  var methods = {\n    clone: function clone() {\n      // this.world = this.world.clone();\n      var terms = this.terms.map(function (t) {\n        return t.clone();\n      });\n      return new Terms(terms, this.world, this.refText, null); //, this.refTerms\n    },\n    hyphenate: function hyphenate() {\n      var _this = this;\n\n      this.terms.forEach(function (t, i) {\n        if (i !== _this.terms.length - 1) {\n          t.whitespace.after = '-';\n        }\n\n        if (i !== 0) {\n          t.whitespace.before = '';\n        }\n      });\n      return this;\n    },\n    dehyphenate: function dehyphenate() {\n      this.terms.forEach(function (t) {\n        if (t.whitespace.after === '-') {\n          t.whitespace.after = ' ';\n        }\n      });\n      return this;\n    },\n    trim: function trim() {\n      if (this.length <= 0) {\n        return this;\n      }\n\n      this.terms[0].whitespace.before = '';\n      this.terms[this.terms.length - 1].whitespace.after = '';\n      return this;\n    }\n  }; //hook them into result.proto\n\n  Object.keys(methods).forEach(function (k) {\n    Terms.prototype[k] = methods[k];\n  });\n  return Terms;\n};\n\nmodule.exports = transforms;\n\n},{}],188:[function(_dereq_,module,exports){\n'use strict'; //\n\nvar getTerms = function getTerms(needle) {\n  var arr = [];\n\n  if (needle.isA === 'Terms') {\n    arr = needle.terms;\n  } else if (needle.isA === 'Text') {\n    arr = needle.flatten().list[0].terms;\n  } else if (needle.isA === 'Term') {\n    arr = [needle];\n  }\n\n  return arr;\n}; //remove them\n\n\nexports.deleteThese = function (source, needle) {\n  var arr = getTerms(needle);\n  source.terms = source.terms.filter(function (t) {\n    for (var i = 0; i < arr.length; i++) {\n      if (t === arr[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  });\n  return source;\n}; //add them\n\n\nexports.insertAt = function (terms, i, needle) {\n  needle.dirty = true;\n  var arr = getTerms(needle); //handle whitespace\n\n  if (i > 0 && arr[0] && !arr[0].whitespace.before) {\n    arr[0].whitespace.before = ' ';\n  } //gnarly splice\n  //-( basically  - terms.splice(i+1, 0, arr) )\n\n\n  Array.prototype.splice.apply(terms, [i, 0].concat(arr));\n  return terms;\n};\n\n},{}],189:[function(_dereq_,module,exports){\n\"use strict\";\n\nmodule.exports = {\n  fns: _dereq_('../fns'),\n  Term: _dereq_('../term')\n};\n\n},{\"../fns\":3,\"../term\":143}],190:[function(_dereq_,module,exports){\n'use strict';\n\nvar Text = _dereq_('./index');\n\nvar tokenize = _dereq_('./tokenize');\n\nvar paths = _dereq_('./paths');\n\nvar Terms = paths.Terms;\nvar fns = paths.fns;\n\nvar fromString = function fromString(str, world) {\n  var sentences = []; //allow pre-tokenized input\n\n  if (fns.isArray(str)) {\n    sentences = str;\n  } else {\n    str = fns.ensureString(str);\n    sentences = tokenize(str);\n  }\n\n  var list = sentences.map(function (s) {\n    return Terms.fromString(s, world);\n  });\n  var doc = new Text(list, world); //give each ts a ref to the result\n\n  doc.list.forEach(function (ts) {\n    ts.refText = doc;\n  });\n  return doc;\n};\n\nmodule.exports = fromString;\n\n},{\"./index\":192,\"./paths\":205,\"./tokenize\":207}],191:[function(_dereq_,module,exports){\n\"use strict\";\n\nmodule.exports = {\n  /** did it find anything? */\n  found: function found() {\n    return this.list.length > 0;\n  },\n\n  /** just a handy wrap*/\n  parent: function parent() {\n    return this.original || this;\n  },\n\n  /** how many Texts are there?*/\n  length: function length() {\n    return this.list.length;\n  },\n\n  /** nicer than constructor.call.name or whatever*/\n  isA: function isA() {\n    return 'Text';\n  },\n\n  /** the whitespace before and after this match*/\n  whitespace: function whitespace() {\n    var _this = this;\n\n    return {\n      before: function before(str) {\n        _this.list.forEach(function (ts) {\n          ts.whitespace.before(str);\n        });\n\n        return _this;\n      },\n      after: function after(str) {\n        _this.list.forEach(function (ts) {\n          ts.whitespace.after(str);\n        });\n\n        return _this;\n      }\n    };\n  }\n};\n\n},{}],192:[function(_dereq_,module,exports){\n'use strict'; //a Text is an array of termLists\n\nvar getters = _dereq_('./getters');\n\nfunction Text(arr, world, original) {\n  this.list = arr || [];\n\n  if (typeof world === 'function') {\n    world = world();\n  }\n\n  this.world = function () {\n    return world;\n  };\n\n  this.original = original; //apply getters\n\n  var keys = Object.keys(getters);\n\n  for (var i = 0; i < keys.length; i++) {\n    Object.defineProperty(this, keys[i], {\n      get: getters[keys[i]]\n    });\n  }\n}\n\nmodule.exports = Text;\n\nText.addMethods = function (cl, obj) {\n  var fns = Object.keys(obj);\n\n  for (var i = 0; i < fns.length; i++) {\n    cl.prototype[fns[i]] = obj[fns[i]];\n  }\n}; //make a sub-class of this class easily\n\n\nText.makeSubset = function (methods, find) {\n  var Subset = function Subset(arr, world, original) {\n    Text.call(this, arr, world, original);\n  }; //inheritance\n\n\n  Subset.prototype = Object.create(Text.prototype);\n  Text.addMethods(Subset, methods);\n  Subset.find = find;\n  return Subset;\n}; //apply instance methods\n\n\n_dereq_('./methods/misc')(Text);\n\n_dereq_('./methods/loops')(Text);\n\n_dereq_('./methods/match')(Text);\n\n_dereq_('./methods/out')(Text);\n\n_dereq_('./methods/sort')(Text);\n\n_dereq_('./methods/split')(Text);\n\n_dereq_('./methods/normalize')(Text);\n\n_dereq_('./subsets')(Text); //apply subset methods\n\n\nvar subset = {\n  acronyms: _dereq_('../subset/acronyms'),\n  adjectives: _dereq_('../subset/adjectives'),\n  adverbs: _dereq_('../subset/adverbs'),\n  contractions: _dereq_('../subset/contractions'),\n  dates: _dereq_('../subset/dates'),\n  nouns: _dereq_('../subset/nouns'),\n  people: _dereq_('../subset/people'),\n  sentences: _dereq_('../subset/sentences'),\n  terms: _dereq_('../subset/terms'),\n  possessives: _dereq_('../subset/possessives'),\n  values: _dereq_('../subset/values'),\n  verbs: _dereq_('../subset/verbs'),\n  ngrams: _dereq_('../subset/ngrams'),\n  startGrams: _dereq_('../subset/ngrams/startGrams'),\n  endGrams: _dereq_('../subset/ngrams/endGrams')\n};\nObject.keys(subset).forEach(function (k) {\n  Text.prototype[k] = function (num, arg) {\n    var sub = subset[k];\n    var m = sub.find(this, num, arg);\n    return new subset[k](m.list, this.world, this.parent);\n  };\n}); //aliases\n\nText.prototype.words = Text.prototype.terms;\n\n},{\"../subset/acronyms\":9,\"../subset/adjectives\":10,\"../subset/adverbs\":17,\"../subset/contractions\":23,\"../subset/dates\":25,\"../subset/ngrams\":35,\"../subset/ngrams/endGrams\":32,\"../subset/ngrams/startGrams\":36,\"../subset/nouns\":38,\"../subset/people\":49,\"../subset/possessives\":51,\"../subset/sentences\":52,\"../subset/terms\":58,\"../subset/values\":65,\"../subset/verbs\":75,\"./getters\":191,\"./methods/loops\":193,\"./methods/match\":194,\"./methods/misc\":195,\"./methods/normalize\":196,\"./methods/out\":197,\"./methods/sort\":202,\"./methods/split\":204,\"./subsets\":206}],193:[function(_dereq_,module,exports){\n'use strict'; //this methods are simply loops around each termList object.\n\nvar methods = ['toTitleCase', 'toUpperCase', 'toLowerCase', 'toCamelCase', 'hyphenate', 'dehyphenate', 'trim', 'insertBefore', 'insertAfter', 'insertAt', 'replace', 'replaceWith', 'delete', 'lump', 'tagger', // 'tag',\n'unTag'];\n\nvar addMethods = function addMethods(Text) {\n  methods.forEach(function (k) {\n    Text.prototype[k] = function () {\n      for (var i = 0; i < this.list.length; i++) {\n        this.list[i][k].apply(this.list[i], arguments);\n      }\n\n      return this;\n    };\n  }); //add an extra optimisation for tag method\n\n  Text.prototype.tag = function () {\n    //fail-fast optimisation\n    if (this.list.length === 0) {\n      return this;\n    }\n\n    for (var i = 0; i < this.list.length; i++) {\n      this.list[i].tag.apply(this.list[i], arguments);\n    }\n\n    return this;\n  };\n};\n\nmodule.exports = addMethods;\n\n},{}],194:[function(_dereq_,module,exports){\n'use strict';\n\nvar syntaxParse = _dereq_('../../../terms/match/lib/syntax');\n\nvar Terms = _dereq_('../../../terms');\n\nvar splitMethods = function splitMethods(Text) {\n  //support \"#Noun word\" regex-matches\n  var matchReg = function matchReg(r, reg, verbose) {\n    //parse the 'regex' into some json\n    var list = [];\n    reg = syntaxParse(reg);\n    r.list.forEach(function (ts) {\n      //an array of arrays\n      var matches = ts.match(reg, verbose);\n      matches.list.forEach(function (ms) {\n        list.push(ms);\n      });\n    });\n    var parent = r.parent || r;\n    return new Text(list, r.world(), parent);\n  }; //support {word:true} whitelist\n\n\n  var matchObj = function matchObj(r, obj) {\n    var matches = [];\n    r.list.forEach(function (ts) {\n      ts.terms.forEach(function (t) {\n        if (obj.hasOwnProperty(t.normal) === true) {\n          matches.push(t);\n        }\n      });\n    });\n    matches = matches.map(function (t) {\n      return new Terms([t], r.world(), r, t.parentTerms);\n    });\n    return new Text(matches, r.world(), r.parent);\n  }; //support [word, word] whitelist\n\n\n  var matchArr = function matchArr(r, arr) {\n    //its faster this way\n    var obj = arr.reduce(function (h, a) {\n      h[a] = true;\n      return h;\n    }, {});\n    return matchObj(r, obj);\n  }; //take a Text object as a match\n\n\n  var matchTextObj = function matchTextObj(r, m) {\n    var arr = m.out('array'); //i guess this is fine..\n\n    return matchArr(r, arr);\n  };\n\n  var methods = {\n    /** do a regex-like search through terms and return a subset */\n    match: function match(reg, verbose) {\n      //fail-fast\n      if (this.list.length === 0 || reg === undefined || reg === null) {\n        var parent = this.parent || this;\n        return new Text([], this.world(), parent);\n      } //match \"#Noun word\" regex\n\n\n      if (typeof reg === 'string' || typeof reg === 'number') {\n        return matchReg(this, reg, verbose);\n      } //match [word, word] whitelist\n\n\n      var type = Object.prototype.toString.call(reg);\n\n      if (type === '[object Array]') {\n        return matchArr(this, reg);\n      } //match {word:true} whitelist\n\n\n      if (type === '[object Object]') {\n        if (reg.isA === 'Text') {\n          return matchTextObj(this, reg);\n        } else {\n          return matchObj(this, reg);\n        }\n      }\n\n      return this;\n    },\n    not: function not(reg, verbose) {\n      var list = [];\n      this.list.forEach(function (ts) {\n        var found = ts.not(reg, verbose);\n        list = list.concat(found.list);\n      });\n      var parent = this.parent || this;\n      return new Text(list, this.world(), parent);\n    },\n    if: function _if(reg) {\n      var list = [];\n\n      for (var i = 0; i < this.list.length; i++) {\n        if (this.list[i].has(reg) === true) {\n          list.push(this.list[i]);\n        }\n      }\n\n      var parent = this.parent || this;\n      return new Text(list, this.world(), parent);\n    },\n    ifNo: function ifNo(reg) {\n      var list = [];\n\n      for (var i = 0; i < this.list.length; i++) {\n        if (this.list[i].has(reg) === false) {\n          list.push(this.list[i]);\n        }\n      }\n\n      var parent = this.parent || this;\n      return new Text(list, this.world(), parent);\n    },\n    has: function has(reg) {\n      for (var i = 0; i < this.list.length; i++) {\n        if (this.list[i].has(reg) === true) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /**find a match, and return everything infront of it*/\n    before: function before(reg) {\n      var list = [];\n\n      for (var i = 0; i < this.list.length; i++) {\n        var m = this.list[i].matchOne(reg);\n\n        if (m) {\n          var index = m[0].index();\n          var found = this.list[i].slice(0, index);\n\n          if (found.length > 0) {\n            list.push(found);\n          }\n        }\n      }\n\n      var parent = this.parent || this;\n      return new Text(list, this.world(), parent);\n    },\n\n    /**find a match, and return everything after of it*/\n    after: function after(reg) {\n      var list = [];\n\n      for (var i = 0; i < this.list.length; i++) {\n        var m = this.list[i].matchOne(reg);\n\n        if (m) {\n          var lastTerm = m[m.length - 1];\n          var index = lastTerm.index();\n          var found = this.list[i].slice(index + 1, this.list[i].length);\n\n          if (found.length > 0) {\n            list.push(found);\n          }\n        }\n      }\n\n      var parent = this.parent || this;\n      return new Text(list, this.world(), parent);\n    }\n  }; //alias 'and'\n\n  methods.and = methods.match;\n  methods.notIf = methods.ifNo;\n  methods.only = methods.if;\n  methods.onlyIf = methods.if; //hook them into result.proto\n\n  Text.addMethods(Text, methods);\n  return Text;\n};\n\nmodule.exports = splitMethods;\n\n},{\"../../../terms\":165,\"../../../terms/match/lib/syntax\":175}],195:[function(_dereq_,module,exports){\n'use strict';\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar Terms = _dereq_('../../terms');\n\nvar miscMethods = function miscMethods(Text) {\n  var methods = {\n    all: function all() {\n      return this.parent;\n    },\n    index: function index() {\n      return this.list.map(function (ts) {\n        return ts.index();\n      });\n    },\n    wordCount: function wordCount() {\n      return this.terms().length;\n    },\n    data: function data() {\n      return this.list.map(function (ts) {\n        return ts.data();\n      });\n    },\n\n    /* javascript array loop-wrappers */\n    map: function map(fn) {\n      var _this = this;\n\n      return this.list.map(function (ts, i) {\n        var text = new Text([ts], _this.world);\n        return fn(text, i);\n      });\n    },\n    forEach: function forEach(fn) {\n      var _this2 = this;\n\n      this.list.forEach(function (ts, i) {\n        var text = new Text([ts], _this2.world);\n        fn(text, i);\n      });\n      return this;\n    },\n    filter: function filter(fn) {\n      var _this3 = this;\n\n      var list = this.list.filter(function (ts, i) {\n        var text = new Text([ts], _this3.world);\n        return fn(text, i);\n      });\n      return new Text(list, this.world);\n    },\n    reduce: function reduce(fn, h) {\n      var _this4 = this;\n\n      return this.list.reduce(function (_h, ts) {\n        var text = new Text([ts], _this4.world);\n        return fn(_h, text);\n      }, h);\n    },\n    find: function find(fn) {\n      for (var i = 0; i < this.list.length; i++) {\n        var ts = this.list[i];\n        var text = new Text([ts], this.world);\n\n        if (fn(text)) {\n          return text;\n        }\n      }\n\n      return undefined;\n    },\n\n    /**copy data properly so later transformations will have no effect*/\n    clone: function clone() {\n      var list = this.list.map(function (ts) {\n        return ts.clone();\n      });\n      return new Text(list, this.world); //this.lexicon, this.parent\n    },\n\n    /** get the nth term of each result*/\n    term: function term(n) {\n      var _this5 = this;\n\n      var list = this.list.map(function (ts) {\n        var arr = [];\n        var el = ts.terms[n];\n\n        if (el) {\n          arr = [el];\n        }\n\n        return new Terms(arr, _this5.world, _this5.refText, _this5.refTerms);\n      });\n      return new Text(list, this.world, this.parent);\n    },\n    firstTerm: function firstTerm() {\n      return this.match('^.');\n    },\n    lastTerm: function lastTerm() {\n      return this.match('.$');\n    },\n\n    /** grab a subset of the results*/\n    slice: function slice(start, end) {\n      this.list = this.list.slice(start, end);\n      return this;\n    },\n\n    /** use only the nth result*/\n    get: function get(n) {\n      //return an empty result\n      if (!n && n !== 0 || !this.list[n]) {\n        return new Text([], this.world, this.parent);\n      }\n\n      var ts = this.list[n];\n      return new Text([ts], this.world, this.parent);\n    },\n\n    /**use only the first result */\n    first: function first(n) {\n      if (!n && n !== 0) {\n        return this.get(0);\n      }\n\n      return new Text(this.list.slice(0, n), this.world, this.parent);\n    },\n\n    /**use only the last result */\n    last: function last(n) {\n      if (!n && n !== 0) {\n        return this.get(this.list.length - 1);\n      }\n\n      var end = this.list.length;\n      var start = end - n;\n      return new Text(this.list.slice(start, end), this.world, this.parent);\n    },\n    concat: function concat() {\n      //any number of params\n      for (var i = 0; i < arguments.length; i++) {\n        var p = arguments[i];\n\n        if (_typeof(p) === 'object') {\n          //Text()\n          if (p.isA === 'Text' && p.list) {\n            this.list = this.list.concat(p.list);\n          } //Terms()\n\n\n          if (p.isA === 'Terms') {\n            this.list.push(p);\n          }\n        }\n      }\n\n      return this;\n    },\n\n    /** make it into one sentence/termlist */\n    flatten: function flatten() {\n      var terms = [];\n      this.list.forEach(function (ts) {\n        terms = terms.concat(ts.terms);\n      }); //dont create an empty ts\n\n      if (!terms.length) {\n        return new Text(null, this.world, this.parent);\n      }\n\n      var ts = new Terms(terms, this.world, this, null);\n      return new Text([ts], this.world, this.parent);\n    },\n\n    /** see if these terms can become this tag*/\n    canBe: function canBe(tag) {\n      this.list.forEach(function (ts) {\n        ts.terms = ts.terms.filter(function (t) {\n          return t.canBe(tag);\n        });\n      });\n      return this;\n    },\n\n    /** sample part of the array */\n    random: function random(n) {\n      n = n || 1;\n      var r = Math.floor(Math.random() * this.list.length);\n      var arr = this.list.slice(r, r + n); //if we're off the end, add some from the start\n\n      if (arr.length < n) {\n        var diff = n - arr.length;\n\n        if (diff > r) {\n          diff = r; //prevent it from going full-around\n        }\n\n        arr = arr.concat(this.list.slice(0, diff));\n      }\n\n      return new Text(arr, this.world, this.parent);\n    },\n    setPunctuation: function setPunctuation(punct) {\n      this.list.forEach(function (ts) {\n        return ts.setPunctuation(punct);\n      });\n      return this;\n    },\n    getPunctuation: function getPunctuation(num) {\n      //support num param\n      if (num || num === 0) {\n        if (!this.list[num]) {\n          return '';\n        }\n\n        return this.list[num].getPunctuation();\n      }\n\n      return this.list.map(function (ts) {\n        return ts.getPunctuation();\n      });\n    },\n    //jquery-like api aliases\n    offset: function offset() {\n      return this.out('offset');\n    },\n    text: function text() {\n      return this.out('text');\n    }\n  }; //aliases\n\n  methods.eq = methods.get;\n  methods.join = methods.flatten;\n  Text.addMethods(Text, methods);\n};\n\nmodule.exports = miscMethods;\n\n},{\"../../terms\":165}],196:[function(_dereq_,module,exports){\n'use strict';\n\nvar _unicode = _dereq_('../../term/methods/normalize/unicode'); //\n\n\nvar defaults = {\n  whitespace: true,\n  case: true,\n  numbers: true,\n  punctuation: true,\n  unicode: true,\n  contractions: true,\n  acronyms: true,\n  parentheses: false,\n  possessives: false,\n  plurals: false,\n  verbs: false,\n  honorifics: false\n};\nvar methods = {\n  /** make only one space between each word */\n  whitespace: function whitespace(r) {\n    r.terms().list.forEach(function (ts, i) {\n      var t = ts.terms[0];\n\n      if (i > 0 && !t.silent_term) {\n        t.whitespace.before = ' ';\n      } else if (i === 0) {\n        t.whitespace.before = '';\n      }\n\n      t.whitespace.after = ''; //add normalized quotation symbols\n\n      if (t.tags.StartQuotation === true) {\n        t.whitespace.before += '\"';\n      }\n\n      if (t.tags.EndQuotation === true) {\n        t.whitespace.after = '\"' + t.whitespace.after;\n      }\n    });\n    return r;\n  },\n\n  /** make first-word titlecase, and people, places titlecase */\n  case: function _case(r) {\n    r.list.forEach(function (ts) {\n      ts.terms.forEach(function (t, i) {\n        if (i === 0 || t.tags.Person || t.tags.Place || t.tags.Organization) {// ts.toTitleCase() //fixme: too weird here.\n        } else {\n          ts.toLowerCase();\n        }\n      });\n    });\n    return r;\n  },\n\n  /** turn 'five' to 5, and 'fifth' to 5th*/\n  numbers: function numbers(r) {\n    r.values().toNumber();\n    return r;\n  },\n\n  /** remove commas, semicolons - but keep sentence-ending punctuation*/\n  punctuation: function punctuation(r) {\n    r.list.forEach(function (ts) {\n      if (!ts.terms.length) {\n        return;\n      } //first-term punctuation\n\n\n      ts.terms[0]._text = ts.terms[0]._text.replace(/^¿/, ''); //middle-terms\n\n      for (var i = 0; i < ts.terms.length - 1; i++) {\n        var t = ts.terms[i]; //remove non-sentence-ending stuff\n\n        t._text = t._text.replace(/[:;,]$/, '');\n      } //replace !!! with !\n\n\n      var last = ts.terms[ts.terms.length - 1];\n      last._text = last._text.replace(/\\.+$/, '.');\n      last._text = last._text.replace(/!+$/, '!');\n      last._text = last._text.replace(/\\?+!?$/, '?'); //support '?!'\n    });\n    return r;\n  },\n  // turn Björk into Bjork\n  unicode: function unicode(r) {\n    r.list.forEach(function (ts) {\n      ts.terms.forEach(function (t) {\n        t.text = _unicode(t.text);\n      });\n    });\n    return r;\n  },\n  //expand all contractions\n  contractions: function contractions(r) {\n    r.contractions().expand();\n    return r;\n  },\n  //remove periods from acronyms, like F.B.I.\n  acronyms: function acronyms(r) {\n    r.acronyms().stripPeriods();\n    return r;\n  },\n  //turn david's → david\n  possessives: function possessives(r) {\n    r.possessives().strip();\n    return r;\n  },\n  //strip out parts in (brackets)\n  parentheses: function parentheses(r) {\n    r.parentheses().delete();\n    return r;\n  },\n  //turn sandwhiches → sandwhich\n  plurals: function plurals(r) {\n    //todo:this has a non-cooperative bug\n    r.nouns().toSingular();\n    return r;\n  },\n  //turn ate → eat\n  verbs: function verbs(r) {\n    r.verbs().toInfinitive();\n    return r;\n  },\n  //turn 'Sergeant Pepper to 'Pepper'\n  honorifics: function honorifics(r) {\n    r = r.delete('#Honorific');\n    return r;\n  }\n};\n\nvar addMethods = function addMethods(Text) {\n  Text.prototype.normalize = function (options) {\n    var doc = this; //set defaults\n\n    options = options || {};\n    var obj = Object.assign({}, defaults);\n    var keys = Object.keys(options);\n    keys.forEach(function (k) {\n      obj[k] = options[k];\n    }); //do each type of normalization\n\n    Object.keys(obj).forEach(function (fn) {\n      if (obj[fn] && methods[fn] !== undefined) {\n        doc = methods[fn](doc);\n      }\n    });\n    return doc;\n  };\n};\n\nmodule.exports = addMethods;\n\n},{\"../../term/methods/normalize/unicode\":151}],197:[function(_dereq_,module,exports){\n'use strict';\n\nvar _topk = _dereq_('./topk');\n\nvar offset = _dereq_('./offset');\n\nvar termIndex = _dereq_('./indexes');\n\nvar fns = _dereq_('../paths').fns;\n\nvar methods = {\n  text: function text(r) {\n    return r.list.reduce(function (str, ts) {\n      str += ts.out('text');\n      return str;\n    }, '');\n  },\n  match: function match(r) {\n    return r.list.reduce(function (str, ts) {\n      str += ts.out('match');\n      return str;\n    }, '');\n  },\n  normal: function normal(r) {\n    return r.list.map(function (ts) {\n      var str = ts.out('normal');\n      var last = ts.last();\n\n      if (last) {\n        var punct = ts.getPunctuation();\n\n        if (punct === '.' || punct === '!' || punct === '?') {\n          str += punct;\n        }\n      }\n\n      return str;\n    }).join(' ');\n  },\n  root: function root(r) {\n    return r.list.map(function (ts) {\n      return ts.out('root');\n    }).join(' ');\n  },\n\n  /** output where in the original output string they are*/\n  offsets: function offsets(r) {\n    return offset(r);\n  },\n\n  /** output the tokenized location of this match*/\n  index: function index(r) {\n    return termIndex(r);\n  },\n  grid: function grid(r) {\n    return r.list.reduce(function (str, ts) {\n      str += ts.out('grid');\n      return str;\n    }, '');\n  },\n  color: function color(r) {\n    return r.list.reduce(function (str, ts) {\n      str += ts.out('color');\n      return str;\n    }, '');\n  },\n  array: function array(r) {\n    return r.list.map(function (ts) {\n      return ts.out('normal');\n    });\n  },\n  csv: function csv(r) {\n    return r.list.map(function (ts) {\n      return ts.out('csv');\n    }).join('\\n');\n  },\n  newlines: function newlines(r) {\n    return r.list.map(function (ts) {\n      return ts.out('newlines');\n    }).join('\\n');\n  },\n  json: function json(r) {\n    return r.list.reduce(function (arr, ts) {\n      var terms = ts.terms.map(function (t) {\n        return {\n          text: t.text,\n          normal: t.normal,\n          tags: t.tag\n        };\n      });\n      arr.push(terms);\n      return arr;\n    }, []);\n  },\n  html: function html(r) {\n    var html = r.list.reduce(function (str, ts) {\n      var sentence = ts.terms.reduce(function (sen, t) {\n        sen += '\\n    ' + t.out('html');\n        return sen;\n      }, '');\n      return str += '\\n  <span>' + sentence + '\\n  </span>';\n    }, '');\n    return '<span> ' + html + '\\n</span>';\n  },\n  terms: function terms(r) {\n    var arr = [];\n    r.list.forEach(function (ts) {\n      ts.terms.forEach(function (t) {\n        arr.push({\n          text: t.text,\n          normal: t.normal,\n          tags: Object.keys(t.tags)\n        });\n      });\n    });\n    return arr;\n  },\n  debug: function debug(r) {\n    console.log('====');\n    r.list.forEach(function (ts) {\n      console.log('   --');\n      ts.debug();\n    });\n    return r;\n  },\n  topk: function topk(r) {\n    return _topk(r);\n  },\n  custom: function custom(r, obj) {\n    return r.list.map(function (ts) {\n      return ts.out(obj);\n    });\n  }\n};\nmethods.plaintext = methods.text;\nmethods.normalized = methods.normal;\nmethods.colors = methods.color;\nmethods.tags = methods.terms;\nmethods.offset = methods.offsets;\nmethods.idexes = methods.index;\nmethods.frequency = methods.topk;\nmethods.freq = methods.topk;\nmethods.arr = methods.array;\n\nvar addMethods = function addMethods(Text) {\n  Text.prototype.out = function (fn) {\n    if (typeof fn === 'string') {\n      if (methods[fn]) {\n        return methods[fn](this);\n      }\n    } else if (fns.isObject(fn) === true) {\n      //support .out({})\n      return methods.custom(this, fn);\n    }\n\n    return methods.text(this);\n  };\n\n  Text.prototype.debug = function () {\n    return methods.debug(this);\n  };\n\n  return Text;\n};\n\nmodule.exports = addMethods;\n\n},{\"../paths\":201,\"./indexes\":198,\"./offset\":199,\"./topk\":200}],198:[function(_dereq_,module,exports){\n'use strict'; //find where in the original text this match is found, by term-counts\n\nvar termIndex = function termIndex(r) {\n  var result = []; //find the ones we want\n\n  var want = {};\n  r.terms().list.forEach(function (ts) {\n    want[ts.terms[0].uid] = true;\n  }); //find their counts\n\n  var sum = 0;\n  var parent = r.all();\n  parent.list.forEach(function (ts, s) {\n    ts.terms.forEach(function (t, i) {\n      if (want[t.uid] !== undefined) {\n        result.push({\n          text: t.text,\n          normal: t.normal,\n          term: sum,\n          sentence: s,\n          sentenceTerm: i\n        });\n      }\n\n      sum += 1;\n    });\n  });\n  return result;\n};\n\nmodule.exports = termIndex;\n\n},{}],199:[function(_dereq_,module,exports){\n'use strict';\n/** say where in the original output string they are found*/\n\nvar findOffset = function findOffset(parent, term) {\n  var sum = 0;\n\n  for (var i = 0; i < parent.list.length; i++) {\n    for (var o = 0; o < parent.list[i].terms.length; o++) {\n      var t = parent.list[i].terms[o];\n\n      if (t.uid === term.uid) {\n        return sum;\n      } else {\n        sum += t.whitespace.before.length + t._text.length + t.whitespace.after.length;\n      }\n    }\n  }\n\n  return null;\n}; //like 'text' for the middle, and 'normal' for the start+ends\n//used for highlighting the actual words, without whitespace+punctuation\n\n\nvar trimEnds = function trimEnds(ts) {\n  var terms = ts.terms;\n\n  if (terms.length <= 2) {\n    return ts.out('normal');\n  } //the start\n\n\n  var str = terms[0].normal; //the middle\n\n  for (var i = 1; i < terms.length - 1; i++) {\n    var t = terms[i];\n    str += t.whitespace.before + t.text + t.whitespace.after;\n  } //the end\n\n\n  str += ' ' + terms[ts.terms.length - 1].normal;\n  return str;\n}; //map over all-dem-results\n\n\nvar allOffset = function allOffset(r) {\n  var parent = r.all();\n  return r.list.map(function (ts) {\n    var words = [];\n\n    for (var i = 0; i < ts.terms.length; i++) {\n      words.push(ts.terms[i].normal);\n    }\n\n    var nrml = trimEnds(ts);\n    var txt = ts.out('text');\n    var startAt = findOffset(parent, ts.terms[0]);\n    var beforeWord = ts.terms[0].whitespace.before;\n    var wordStart = startAt + beforeWord.length;\n    return {\n      text: txt,\n      normal: ts.out('normal'),\n      //where we begin\n      offset: startAt,\n      length: txt.length,\n      wordStart: wordStart,\n      wordEnd: wordStart + nrml.length // wordLength: words.join(' ').length\n\n    };\n  });\n};\n\nmodule.exports = allOffset;\n\n},{}],200:[function(_dereq_,module,exports){\n'use strict'; //\n\nvar topk = function topk(r, n) {\n  //count occurance\n  var count = {};\n  r.list.forEach(function (ts) {\n    var str = ts.out('root');\n    count[str] = count[str] || 0;\n    count[str] += 1;\n  }); //turn into an array\n\n  var all = [];\n  Object.keys(count).forEach(function (k) {\n    all.push({\n      normal: k,\n      count: count[k]\n    });\n  }); //add percentage\n\n  all.forEach(function (o) {\n    o.percent = parseFloat((o.count / r.list.length * 100).toFixed(2));\n  }); //sort by freq\n\n  all = all.sort(function (a, b) {\n    if (a.count > b.count) {\n      return -1;\n    }\n\n    return 1;\n  });\n\n  if (n) {\n    all = all.splice(0, n);\n  }\n\n  return all;\n};\n\nmodule.exports = topk;\n\n},{}],201:[function(_dereq_,module,exports){\n\"use strict\";\n\nmodule.exports = _dereq_('../paths');\n\n},{\"../paths\":205}],202:[function(_dereq_,module,exports){\n'use strict';\n\nvar sorter = _dereq_('./methods');\n\nvar addMethods = function addMethods(Text) {\n  var fns = {\n    /**reorder result.list alphabetically */\n    sort: function sort(method) {\n      //default sort\n      method = method || 'alphabetical';\n      method = method.toLowerCase();\n\n      if (!method || method === 'alpha' || method === 'alphabetical') {\n        return sorter.alpha(this, Text);\n      }\n\n      if (method === 'chron' || method === 'chronological') {\n        return sorter.chron(this, Text);\n      }\n\n      if (method === 'length') {\n        return sorter.lengthFn(this, Text);\n      }\n\n      if (method === 'freq' || method === 'frequency') {\n        return sorter.freq(this, Text);\n      }\n\n      if (method === 'wordcount') {\n        return sorter.wordCount(this, Text);\n      }\n\n      return this;\n    },\n\n    /**reverse the order of result.list */\n    reverse: function reverse() {\n      this.list = this.list.reverse();\n      return this;\n    },\n    unique: function unique() {\n      var obj = {};\n      this.list = this.list.filter(function (ts) {\n        var str = ts.out('root');\n\n        if (obj.hasOwnProperty(str)) {\n          return false;\n        }\n\n        obj[str] = true;\n        return true;\n      });\n      return this;\n    }\n  }; //hook them into result.proto\n\n  Text.addMethods(Text, fns);\n  return Text;\n};\n\nmodule.exports = addMethods;\n\n},{\"./methods\":203}],203:[function(_dereq_,module,exports){\n'use strict'; //perform sort on pre-computed values\n\nvar sortEm = function sortEm(arr) {\n  arr = arr.sort(function (a, b) {\n    if (a.index > b.index) {\n      return 1;\n    }\n\n    if (a.index === b.index) {\n      return 0;\n    }\n\n    return -1;\n  }); //return ts objects\n\n  return arr.map(function (o) {\n    return o.ts;\n  });\n}; //alphabetical sorting of a termlist array\n\n\nexports.alpha = function (r) {\n  r.list.sort(function (a, b) {\n    //#1 performance speedup\n    if (a === b) {\n      return 0;\n    } //#2 performance speedup\n\n\n    if (a.terms[0] && b.terms[0]) {\n      if (a.terms[0].root > b.terms[0].root) {\n        return 1;\n      }\n\n      if (a.terms[0].root < b.terms[0].root) {\n        return -1;\n      }\n    } //regular compare\n\n\n    if (a.out('root') > b.out('root')) {\n      return 1;\n    }\n\n    return -1;\n  });\n  return r;\n}; //the order they were recieved (chronological~)\n\n\nexports.chron = function (r) {\n  //pre-compute indexes\n  var tmp = r.list.map(function (ts) {\n    return {\n      ts: ts,\n      index: ts.termIndex()\n    };\n  });\n  r.list = sortEm(tmp);\n  return r;\n}; //shortest matches first\n\n\nexports.lengthFn = function (r) {\n  //pre-compute indexes\n  var tmp = r.list.map(function (ts) {\n    return {\n      ts: ts,\n      index: ts.chars()\n    };\n  });\n  r.list = sortEm(tmp).reverse();\n  return r;\n}; //count the number of terms in each match\n\n\nexports.wordCount = function (r) {\n  //pre-compute indexes\n  var tmp = r.list.map(function (ts) {\n    return {\n      ts: ts,\n      index: ts.length\n    };\n  });\n  r.list = sortEm(tmp);\n  return r;\n}; //sort by frequency (like topk)\n\n\nexports.freq = function (r) {\n  //get counts\n  var count = {};\n  r.list.forEach(function (ts) {\n    var str = ts.out('root');\n    count[str] = count[str] || 0;\n    count[str] += 1;\n  }); //pre-compute indexes\n\n  var tmp = r.list.map(function (ts) {\n    var num = count[ts.out('root')] || 0;\n    return {\n      ts: ts,\n      index: num * -1 //quick-reverse it\n\n    };\n  });\n  r.list = sortEm(tmp);\n  return r;\n};\n\n},{}],204:[function(_dereq_,module,exports){\n'use strict';\n\nvar splitMethods = function splitMethods(Text) {\n  var methods = {\n    /** turn result into two seperate results */\n    splitAfter: function splitAfter(reg, verbose) {\n      var list = [];\n      this.list.forEach(function (ts) {\n        ts.splitAfter(reg, verbose).forEach(function (mts) {\n          list.push(mts);\n        });\n      });\n      this.list = list;\n      return this;\n    },\n\n    /** turn result into two seperate results */\n    splitBefore: function splitBefore(reg, verbose) {\n      var list = [];\n      this.list.forEach(function (ts) {\n        ts.splitBefore(reg, verbose).forEach(function (mts) {\n          list.push(mts);\n        });\n      });\n      this.list = list;\n      return this;\n    },\n\n    /** turn result into two seperate results */\n    splitOn: function splitOn(reg, verbose) {\n      var list = [];\n      this.list.forEach(function (ts) {\n        ts.splitOn(reg, verbose).forEach(function (mts) {\n          list.push(mts);\n        });\n      });\n      this.list = list;\n      return this;\n    }\n  }; //hook them into result.proto\n\n  Text.addMethods(Text, methods);\n  return Text;\n};\n\nmodule.exports = splitMethods;\n\n},{}],205:[function(_dereq_,module,exports){\narguments[4][201][0].apply(exports,arguments)\n},{\"../paths\":8,\"dup\":201}],206:[function(_dereq_,module,exports){\n'use strict';\n\nvar isQuestion = _dereq_('../subset/sentences/isQuestion');\n\nvar addSubsets = function addSubsets(Text) {\n  //these subsets have no instance methods, so are simply a 'find' method.\n  var subsets = {\n    clauses: function clauses(n) {\n      var r = this.splitAfter('#ClauseEnd');\n\n      if (typeof n === 'number') {\n        r = r.get(n);\n      }\n\n      return r;\n    },\n    hashTags: function hashTags(n) {\n      var r = this.match('#HashTag').terms();\n\n      if (typeof n === 'number') {\n        r = r.get(n);\n      }\n\n      return r;\n    },\n    organizations: function organizations(n) {\n      var r = this.splitAfter('#Comma');\n      r = r.match('#Organization+');\n\n      if (typeof n === 'number') {\n        r = r.get(n);\n      }\n\n      return r;\n    },\n    phoneNumbers: function phoneNumbers(n) {\n      var r = this.splitAfter('#Comma');\n      r = r.match('#PhoneNumber+');\n\n      if (typeof n === 'number') {\n        r = r.get(n);\n      }\n\n      return r;\n    },\n    places: function places(n) {\n      var r = this.splitAfter('#Comma');\n      r = r.match('#Place+');\n\n      if (typeof n === 'number') {\n        r = r.get(n);\n      }\n\n      return r;\n    },\n    quotations: function quotations(n) {\n      var matches = this.match('#Quotation+');\n      var found = [];\n      matches.list.forEach(function (ts) {\n        var open = 0;\n        var start = null; //handle nested quotes - 'startQuote->startQuote->endQuote->endQuote'\n\n        ts.terms.forEach(function (t, i) {\n          if (t.tags.StartQuotation === true) {\n            if (open === 0) {\n              start = i;\n            }\n\n            open += 1;\n          }\n\n          if (open > 0 && t.tags.EndQuotation === true) {\n            open -= 1;\n          }\n\n          if (open === 0 && start !== null) {\n            found.push(ts.slice(start, i + 1));\n            start = null;\n          }\n        }); //maybe we messed something up..\n\n        if (start !== null) {\n          found.push(ts.slice(start, ts.terms.length));\n        }\n      });\n      matches.list = found;\n\n      if (typeof n === 'number') {\n        matches = matches.get(n);\n      }\n\n      return matches;\n    },\n    topics: function topics(n) {\n      var r = this.clauses(); // Find people, places, and organizations\n\n      var yup = r.people();\n      yup.concat(r.places());\n      yup.concat(r.organizations());\n      var ignore = ['someone', 'man', 'woman', 'mother', 'brother', 'sister', 'father'];\n      yup = yup.not(ignore); //return them to normal ordering\n\n      yup.sort('chronological'); // yup.unique() //? not sure\n\n      if (typeof n === 'number') {\n        yup = yup.get(n);\n      }\n\n      return yup;\n    },\n    urls: function urls(n) {\n      var r = this.match('#Url');\n\n      if (typeof n === 'number') {\n        r = r.get(n);\n      }\n\n      return r;\n    },\n    questions: function questions(n) {\n      var r = this.all();\n\n      if (typeof n === 'number') {\n        r = r.get(n);\n      }\n\n      var list = r.list.filter(function (ts) {\n        return isQuestion(ts);\n      });\n      return new Text(list, this.world, this.parent);\n    },\n    statements: function statements(n) {\n      var r = this.all();\n\n      if (typeof n === 'number') {\n        r = r.get(n);\n      }\n\n      var list = r.list.filter(function (ts) {\n        return isQuestion(ts) === false;\n      });\n      return new Text(list, this.world, this.parent);\n    },\n    parentheses: function parentheses(n) {\n      var r = this.match('#Parentheses+'); //split-up consecutive ones\n\n      r = r.splitAfter('#EndBracket');\n\n      if (typeof n === 'number') {\n        r = r.get(n);\n      }\n\n      return r;\n    }\n  };\n  Object.keys(subsets).forEach(function (k) {\n    Text.prototype[k] = subsets[k];\n  });\n  return Text;\n};\n\nmodule.exports = addSubsets;\n\n},{\"../subset/sentences/isQuestion\":53}],207:[function(_dereq_,module,exports){\n//(Rule-based sentence boundary segmentation) - chop given text into its proper sentences.\n// Ignore periods/questions/exclamations used in acronyms/abbreviations/numbers, etc.\n// @spencermountain 2017 MIT\n'use strict';\n\nvar abbreviations = Object.keys(_dereq_('../world/more-data/abbreviations')); // \\u203D - Interrobang\n// \\u2E18 - Inverted Interrobang\n// \\u203C - Double Exclamation Mark\n// \\u2047 - Double Question Mark\n// \\u2048 - Question Exclamation Mark\n// \\u2049 - Exclamation Question Mark\n// \\u2026 - Ellipses Character\n//regs-\n\nvar abbrev_reg = new RegExp('\\\\b(' + abbreviations.join('|') + \")[.!?\\u203D\\u2E18\\u203C\\u2047-\\u2049] *$\", 'i');\nvar acronym_reg = /[ .][A-Z]\\.? *$/i;\nvar ellipses_reg = /(?:\\u2026|\\.{2,}) *$/; // Match different formats of new lines. (Mac: \\r, Linux: \\n, Windows: \\r\\n)\n\nvar new_line = /((?:\\r?\\n|\\r)+)/;\nvar naiive_sentence_split = /(\\S.+?[.!?\\u203D\\u2E18\\u203C\\u2047-\\u2049])(?=\\s+|$)/g;\nvar letter_regex = /[a-z0-9\\u0000-\\u007F]/i; //support an all-unicode sentence, i guess\n\nvar not_ws_regex = /\\S/; // Start with a regex:\n\nvar naiive_split = function naiive_split(text) {\n  var all = []; //first, split by newline\n\n  var lines = text.split(new_line);\n\n  for (var i = 0; i < lines.length; i++) {\n    //split by period, question-mark, and exclamation-mark\n    var arr = lines[i].split(naiive_sentence_split);\n\n    for (var o = 0; o < arr.length; o++) {\n      all.push(arr[o]);\n    }\n  }\n\n  return all;\n};\n\nvar sentence_parser = function sentence_parser(text) {\n  text = text || '';\n  text = String(text);\n  var sentences = []; // First do a greedy-split..\n\n  var chunks = []; // Ensure it 'smells like' a sentence\n\n  if (!text || typeof text !== 'string' || not_ws_regex.test(text) === false) {\n    return sentences;\n  } // Start somewhere:\n\n\n  var splits = naiive_split(text); // Filter-out the grap ones\n\n  for (var i = 0; i < splits.length; i++) {\n    var s = splits[i];\n\n    if (s === undefined || s === '') {\n      continue;\n    } //this is meaningful whitespace\n\n\n    if (not_ws_regex.test(s) === false) {\n      //add it to the last one\n      if (chunks[chunks.length - 1]) {\n        chunks[chunks.length - 1] += s;\n        continue;\n      } else if (splits[i + 1]) {\n        //add it to the next one\n        splits[i + 1] = s + splits[i + 1];\n        continue;\n      }\n    } //else, only whitespace, no terms, no sentence\n\n\n    chunks.push(s);\n  } //detection of non-sentence chunks:\n  //loop through these chunks, and join the non-sentence chunks back together..\n\n\n  for (var _i = 0; _i < chunks.length; _i++) {\n    var c = chunks[_i]; //should this chunk be combined with the next one?\n\n    if (chunks[_i + 1] && letter_regex.test(c) && (abbrev_reg.test(c) || acronym_reg.test(c) || ellipses_reg.test(c))) {\n      chunks[_i + 1] = c + (chunks[_i + 1] || '');\n    } else if (c && c.length > 0 && letter_regex.test(c)) {\n      //this chunk is a proper sentence..\n      sentences.push(c);\n      chunks[_i] = '';\n    }\n  } //if we never got a sentence, return the given text\n\n\n  if (sentences.length === 0) {\n    return [text];\n  }\n\n  return sentences;\n};\n\nmodule.exports = sentence_parser; // console.log(sentence_parser('john f. kennedy'));\n\n},{\"../world/more-data/abbreviations\":216}],208:[function(_dereq_,module,exports){\n\"use strict\";\n\nmodule.exports = \"{\\\"words\\\":\\\"Comparative\\xA6better|Superlative\\xA6earlier|PresentTense\\xA6sounds|Value\\xA6a few|Noun\\xA6autumn,daylight9eom,here,no doubt,one d8s5t2w0yesterd8;eek0int5;d6end;mr1o0;d4morrow;!w;ome 1tandard3umm0;er;d0point;ay; time|Copula\\xA6a1is,w0;as,ere;m,re|Condition\\xA6if,unless|PastTense\\xA6be2came,d1had,mea0sa1taken,we0;nt;id;en,gan|Gerund\\xA6accord0be0develop0go0result0stain0;ing|Negative\\xA6n0;ever,o0;!n,t|QuestionWord\\xA6how3wh0;at,e1ich,o0y;!m,se;n,re; come,'s|Singular\\xA6a06bZcUdQeOfLgKhGici0Ajel07kitty,lFmDnCoBp8question mark,r7s4t1us 0;dollVstW; rex,a1h0ic,ragedy,v show;ere,i07;l03x return;ky,t0uper bowl,yst06;ri04u0;dIff;alZi02oom;a1robl02u0;dCrpo8;rt,tE;cean,thers;othiXumbG;ayfTeeNo0;del,nopoS;iRunch;ead start,o0;lPme1u0;se;! run;adfMirlIlaci8od,rand slam,ulM;amiLly,olLr1un0;diN;iGosD;conomy,gg,ner3v0xampG;ent;eath,inn2o0ragonfG;cument6g0iFlFor;gy;er;an3eiliFhocol2i0ottage,redit card;ty,vil w0;ar;ate;ary;ankiAel7les9o2reakfast,u0;n0tterf6;ti8;dy,tt2y0;fri0;end;le;d1l0noma0;ly; homin2verti0;si0;ng;em|Infinitive\\xA60:6Y;1:7C;2:7A;3:79;4:74;5:5F;6:6D;7:6L;8:78;9:6W;A:73;B:7D;C:76;D:6R;E:68;F:60;a6Qb69c5Bd4Je43f3Qg3Jh3Ci2Zj2Xk2Tl2Km2Bn28o24p1Pques3Rr0Xs05tWuRvOwHyG;awn,ield;aJe24hist7iIoGre6H;nd0rG;k,ry;n,pe,sh,th0;lk,nHrGsh,tDve;n,raB;d0t;aHiGo8;ew,sA;l6Rry;nHpGr3se;gra4Wli49;dGi8lo65;erGo;go,mi5H;aNeMhKie,oJrHuGwi4;ne,rn;aGe0Ui60u4y;de,in,nsf0p,v5O;r37uD;ank,rG;eat2Vi2;nd,st;ke,lk,rg5Os8;a06c03eZhWi4Jkip,lVmUneTo56pQtJuGwitD;bmAck,ff0gge4ppHrGspe6;ge,pri1rou53vi2;ly,o3D;aLeKoJrHuG;dy,mb7;aEeGi2;ngth2Lss,tD;p,re;m,p;in,ke,r0Yy;iHlaFoil,rinG;g,k7;n,t;ak,e3E;aFe22i7o5B;am,e1Qip;aHiv0oG;ck,ut;re,ve;arDeIle6nHr2tG;!t7;d,se;k,m;aHo5rG;atDew;le,re;il,ve;a05eIisk,oHuG;b,in,le,n,sh;am,ll;a01cZdu9fYgXje6lUmTnt,pQquPsKtJvGwa5V;eGiew,o4U;al,l,rG;se,t;aEi5u42;eJi4oItG;!o5rG;i6uc20;l2rt;mb7nt,r2;e4i5;air,eHlGo40reseB;a9y;at;aEemb0i3Wo2;aHeGi2y;a1nt;te,x;a5Dr4A;act1Yer,le6u1;a12ei2k5PoGyc7;gni2Cnci7rd;ch,li2Bs5N;i1nG;ge,k;aTerSiRlPoNrIuG;b21ll,mp,rGsh,t;cha1s4Q;ai1eJiBoG;cHdu9greChibAmi1te4vG;e,i2U;eClaim;di6pa5ss,veB;iBp,rtr43sGur;e,t;a3RuG;g,n3;ck,le;fo32mAsi4;ck,iBrt4Mss,u1y;bIccur,ff0pera8utweHverGwe;co47lap,ta3Qu1whelm;igh;ser2taE;eHotG;e,i9;ed,gle6;aLeKiIoHuG;ltip3Frd0;nit14ve;nGrr13;d,g7us;asu5lt,n0Qr3ssa3;intaEke d40na3rHtG;ch,t0;ch,k39ry;aMeLiIoGu1F;aGck,ok,ve;d,n;ft,ke,mAnHstGve;!en;e,k;a2Gc0Ht;b0Qck,uG;gh,nD;eIiHnoG;ck,w;ck,ll,ss;ep;am,oEuG;d3mp;gno5mQnGss3I;cOdica8flu0NhNsKtIvG;eGol2;nt,st;erGrodu9;a6fe5;i4tG;aGru6;ll;abAibA;lu1Fr1D;agi22pG;lemeBo20ro2;aKeIi5oHuG;nt,rry;ld fa4n03pe,st;aGlp;d,t;nd7ppGrm,te;en;aLet,loCoKrIuG;arGeCi14;ant39d;aGip,ow,umb7;b,sp;es,ve1I;in,th0ze;aQeaPiNlLoIracHuncG;ti3I;tu5;cus,lHrG;ce,eca4m,s30;d,l22;aFoG;at,od,w;gu5lGniFx;e,l;r,tu5;il,ll,vG;or;a13cho,dAle6mSnPstNvalua8xG;a0AcLerKi4pGte16;a15eHlaEoGreC;rt,se;ct,riG;en9;ci1t;el,han3;abGima8;liF;ab7couXdHfor9ga3han9j03riDsu5t0vG;isi2Vy;!u5;body,er3pG;hasiGow0;ze;a06eUiMoLrHuG;mp;aIeHiGop;ft;am,ss;g,in;!d3ubt;e,ff0p,re6sHvG;e,iXor9;aJcGli13miCpl18tinguiF;oGuC;uGv0;ra3;gr1YppG;ear,ro2;al,cNem,fLliv0ma0Cny,pKsHterG;mi0D;cribe,er2iHtrG;oy;gn,re;a08e07i6osA;eGi08y;at,ct;iIlHrG;ea1;a5i04;de;ma3n9re,te;a0Ae09h06i8l03oJrGut;aHeGoCuFy;a8dA;ck,ve;llYmSnHok,py,uGv0;gh,nt;cePdu6fMsKtIvG;eGin9;rt,y;aEin0XrG;a4ibu8ol;iGtitu8;d0st;iHoGroB;rm;gu5rm;rn;biKe,foJmaIpG;a5laE;re;nd;rt;ne;ap1e6;aHiGo1;ng,p;im,w;aHeG;at,ck,w;llen3n3r3se;a1nt0;ll,ncHrGt0u1;e,ry;el;aUeQloPoNrKuG;dgIlHrG;n,y;ly;et;aHuF;sh;ke;a4mb,o4rrGth0un9;ow;ck;ar,coSgElHnefAtrG;ay;ie2ong;in;nGse;!g;band0Jc0Bd06ffo05gr04id,l01mu1nYppTrQsKttGvoid,waA;acIeHra6;ct;m0Fnd;h,k;k,sG;eIiHocia8uG;me;gn,st;mb7rt;le;chHgGri2;ue;!i2;eaJlIroG;aDve;ch;aud,y;l,r;noun9sw0tG;icipa8;ce;lHt0;er;e3ow;ee;rd;aRdIju4mAoR;it;st;!reC;ss;cJhie2knowled3tiva8;te;ge;ve;eIouBu1;se;nt;pt;on|Actor\\xA6aJbGcFdCengineIfAgardenIh9instructPjournalLlawyIm8nurse,opeOp5r3s1t0;echnCherapK;ailNcientJoldiGu0;pervKrgeon;e0oofE;ceptionGsearC;hotographClumbColi1r0sychologF;actitionBogrammB;cem6t5;echanic,inist9us4;airdress8ousekeep8;arm7ire0;fight6m2;eputy,iet0;ici0;an;arpent2lerk;ricklay1ut0;ch0;er;ccoun6d2ge7r0ssis6ttenda7;chitect,t0;ist;minist1v0;is1;rat0;or;ta0;nt|Honorific\\xA6aObrigadiNcHdGexcellency,fiBking,liDmaAofficNp6queen,r3s0taoiseach,vice5;e0ultJ;c0rgeaC;ond liAretary;abbi,e0;ar0verend; adJ;astFr0;eside6i0ofessE;me ministEnce0;!ss;gistrate,r4yB;eld mar3rst l0;ady,i0;eutena0;nt;shA;oct5utchess;aptain,hance3o0;lonel,mmand4ngress0unci2;m0wom0;an;ll0;or;er;d0yatullah;mir0;al|SportsTeam\\xA60:1M;1:1T;2:1U;a1Rb1Dc0Zd0Qfc dallas,g0Nhouston 0Mindiana0Ljacksonville jagua0k0Il0Fm02newVoRpKqueens parkJrIsAt5utah jazz,vancouver whitecaps,w3yY;ashington 3est ham0Xh16;natio21redski1wizar12;ampa bay 6e5o3;ronto 3ttenham hotspur;blu1Hrapto0;nnessee tita1xasD;buccanee0ra1G;a7eattle 5heffield0Qporting kansas13t3;. louis 3oke12;c1Srams;mari02s3;eah1IounI;cramento Sn 3;antonio spu0diego 3francisco gi0Bjose earthquak2;char0EpaB;eal salt lake,o04; ran0C;a8h5ittsburgh 4ortland t3;imbe0rail blaze0;pirat2steele0;il3oenix su1;adelphia 3li2;eagl2philNunE;dr2;akland 4klahoma city thunder,r3;i10lando magic;athle0Trai3;de0; 3castle05;england 6orleans 5york 3;city fc,giUje0Lkn02me0Lred bul19y3;anke2;pelica1sain0J;patrio0Irevolut3;ion;aBe9i3ontreal impact;ami 7lwaukee b6nnesota 3;t4u0Rvi3;kings;imberwolv2wi1;re0Cuc0W;dolphi1heat,marli1;mphis grizz3ts;li2;nchester 5r3vN;i3li1;ne0;c00u0H;a4eicesterYos angeles 3;clippe0dodFlaA; galaxy,ke0;ansas city 3nH;chiefs,ro3;ya0M; pace0polis colX;astr0Edynamo,rockeWtexa1;i4olden state warrio0reen bay pac3;ke0;anT;.c.Aallas 7e3i0Cod5;nver 5troit 3;lio1pisto1ti3;ge0;bronc06nuggeO;cowboUmav3;er3;ic06; uX;arCelNh8incinnati 6leveland 5ol3;orado r3umbus crew sc;api5ocki2;brow1cavalie0india1;benga03re3;ds;arlotte horCicago 3;b4cubs,fire,wh3;iteE;ea0ulY;di3olina panthe0;ff3naW; c3;ity;altimore ElAoston 7r3uffalo bilT;av2e5ooklyn 3;ne3;ts;we0;cel4red3; sox;tics;ackburn rove0u3;e ja3;ys;rs;ori3rave1;ol2;rizona Ast8tlanta 3;brav2falco1h4u3;nited;aw9;ns;es;on villa,r3;os;c5di3;amondbac3;ks;ardi3;na3;ls|Uncountable\\xA60:1C;a1Hb1Bc12e0Wf0Qg0Mh0Gi0Dj0Cknowled1Gl07mYnXoWpRrOsCt8vi7w1;a5ea0Ai4o1;o2rld1;! seI;d,l;ldlife,ne;rmth,t0;neg0Xol08;e3hund0ime,oothpaste,r1una;affRou1;ble,sers,t;a,nnis;aAcene07e9h8il7now,o6p3te2u1;g0Rnshi0L;am,el;ace2e1;ciOed;!c12;ap,cc0ft0B;k,v0;eep,opp0O;riJ;d07fe0Wl1nd;m0Qt;ain,e1i0W;c1laxa0Csearch;ogni0Brea0B;a4e2hys0Elast9o1ress00;rk,w0;a1pp0trol;ce,nR;p0tiK;il,xygen;ews,oi0C;a7ea5i4o3u1;mps,s1;ic;nHo08;lk,st;sl1t;es;chine1il,themat00; learn02ry;aught0e3i2u1;ck,g07;ghtnZqu0CteratI;a1isH;th0;ewel7usti08;ce,mp1nformaOtself;ati1ortan06;en05;a4isto3o1;ck1mework,n1spitali01;ey;ry;ir,lib1ppi9;ut;o2r1um,ymnastJ;a7ound;l1ssip;d,f;i5lour,o2ruit,urnit1;ure;od,rgive1wl;ne1;ss;c6sh;conom9duca5lectriciMn3quip4th9very1;body,o1thB;ne;joy1tertain1;ment;tiC;a8elcius,h4iv3loth6o1urrency;al,ffee,ld w1nfusiAttA;ar;ics;aos,e1;e2w1;ing;se;ke,sh;a3eef,is2lood,read,utt0;er;on;g1ss;ga1;ge;c4dvi3irc2mnes1rt;ty;raft;ce;id|Unit\\xA60:17;a12b10c0Md0Le0Jf0Fg0Bh08in07joule0k01lZmOnNoMpIqHsqCt7volts,w6y4z3\\xB02\\xB51;g,s;c,f,n;b,e2;a0Lb,d0Rears old,o1;tt0F;att0b;able4b3e2on1sp;!ne0;a2r0B;!l,sp;spo03; ft,uare 1;c0Gd0Ff3i0Dkilo0Hm1ya0C;e0Kil1;e0li0F;eet0o0B;t,uart0;a3e2i1ou0Nt;c0Knt0;rcent,t00;!scals;hms,uVz;an0GewtR;/s,b,e7g,i3l,m2p1\\xB2,\\xB3;h,s;!\\xB2;!/h,cro3l1;e1li05;! DsC\\xB2;g05s0A;gPter1;! 2s1;! 1;per second;b,iZm,u1x;men0x0;b,elvin0g,ilo2m1nQ;!/h,ph,\\xB2;byYgWmeter1;! 2s1;! 1;per hour;\\xB2,\\xB3;e1g,z;ct1rtz0;aWogP;al2b,ig9ra1;in0m0;!l1;on0;a3emtOl1tG; oz,uid ou1;nce0;hrenheit0rad0;b,x1;abyH;eciCg,l,mA;arat0eAg,l,m9oulomb0u1;bic 1p0;c5d4fo3i2meAya1;rd0;nch0;ot0;eci2;enti1;me4;!\\xB2,\\xB3;lsius0nti1;g2li1me1;ter0;ram0;bl,y1;te0;c4tt1;os1;eco1;nd0;re0;!s|Pronoun\\xA6'em,elle,h4i3me,ourselves,she5th1us,we,you0;!rself;e0ou;m,y;!l,t;e0im;!'s|Organization\\xA60:44;a39b2Qc2Ad22e1Yf1Ug1Mh1Hi1Ej1Ak18l14m0Tn0Go0Dp07qu06rZsStFuBv8w3y1;amaha,m0You1w0Y;gov,tu2R;a3e1orld trade organizati3Z;lls fargo,st1;fie23inghou17;l1rner br3B;-m12gree30l street journ25m12;an halNeriz3Uisa,o1;dafo2Gl1;kswagLvo;bs,kip,n2ps,s1;a tod2Qps;es33i1;lev2Wted natio2T; mobi2Jaco bePd bMeAgi frida9h3im horto2Smz,o1witt2V;shiba,y1;ota,s r Y;e 1in lizzy;b3carpen31daily ma2Vguess w2holli0rolling st1Ns1w2;mashing pumpki2Nuprem0;ho;ea1lack eyed pe3Dyrds;ch bo1tl0;ys;l2s1;co,la m13;efoni08us;a6e4ieme2Fnp,o2pice gir5ta1ubaru;rbucks,to2L;ny,undgard1;en;a2Px pisto1;ls;few24insbu25msu1W;.e.m.,adiohead,b6e3oyal 1yan2V;b1dutch she4;ank;/max,aders dige1Ed 1vl30;bu1c1Thot chili peppe2Ilobst27;ll;c,s;ant2Tizno2D;an5bs,e3fiz23hilip morrBi2r1;emier25octer & gamb1Qudenti14;nk floyd,zza hut;psi26tro1uge09;br2Ochina,n2O; 2ason1Wda2E;ld navy,pec,range juli2xf1;am;us;aAb9e5fl,h4i3o1sa,wa;kia,tre dame,vart1;is;ke,ntendo,ss0L;l,s;c,stl3tflix,w1; 1sweek;kids on the block,york09;e,\\xE9;a,c;nd1Rs2t1;ional aca2Co,we0P;a,cYd0N;aAcdonald9e5i3lb,o1tv,yspace;b1Knsanto,ody blu0t1;ley crue,or0N;crosoft,t1;as,subisO;dica3rcedes2talli1;ca;!-benz;id,re;'s,s;c's milk,tt11z1V;'ore08a3e1g,ittle caesa1H;novo,x1;is,mark; pres5-z-boy,bour party;atv,fc,kk,m1od1H;art;iffy lu0Jo3pmorgan1sa;! cha1;se;hnson & johns1Py d1O;bm,hop,n1tv;g,te1;l,rpol; & m,asbro,ewlett-packaSi3o1sbc,yundai;me dep1n1G;ot;tac1zbollah;hi;eneral 6hq,l5mb,o2reen d0Gu1;cci,ns n ros0;ldman sachs,o1;dye1g09;ar;axo smith kliYencore;electr0Gm1;oto0S;a3bi,da,edex,i1leetwood mac,oFrito-l08;at,nancial1restoU; tim0;cebook,nnie mae;b04sa,u3xxon1; m1m1;ob0E;!rosceptics;aiml08e5isney,o3u1;nkin donuts,po0Tran dur1;an;j,w j1;on0;a,f leppa2ll,peche mode,r spiegXstiny's chi1;ld;rd;aEbc,hBi9nn,o3r1;aigsli5eedence clearwater reviv1ossra03;al;ca c5l4m1o08st03;ca2p1;aq;st;dplLgate;ola;a,sco1tigroup;! systems;ev2i1;ck fil-a,na daily;r0Fy;dbury,pital o1rl's jr;ne;aFbc,eBf9l5mw,ni,o1p,rexiteeV;ei3mbardiJston 1;glo1pizza;be;ng;ack & deckFo2ue c1;roW;ckbuster video,omingda1;le; g1g1;oodriM;cht3e ge0n & jer2rkshire hathaw1;ay;ryG;el;nana republ3s1xt5y5;f,kin robbi1;ns;ic;bWcRdidQerosmith,ig,lKmEnheuser-busDol,pple9r6s3t&t,v2y1;er;is,on;hland1sociated F; o1;il;by4g2m1;co;os; compu2bee1;'s;te1;rs;ch;c,d,erican3t1;!r1;ak; ex1;pre1;ss; 4catel2t1;air;!-luce1;nt;jazeera,qae1;da;as;/dc,a3er,t1;ivisi1;on;demy of scienc0;es;ba,c|Demonym\\xA60:16;1:13;a0Wb0Nc0Cd0Ae09f07g04h02iYjVkTlPmLnIomHpDqatari,rBs7t5u4v3wel0Rz2;am0Fimbabwe0;enezuel0ietnam0H;g9krai1;aiwThai,rinida0Iu2;ni0Qrkmen;a4cot0Ke3ingapoOlovak,oma0Tpa05udRw2y0X;edi0Kiss;negal0Br08;mo0uU;o6us0Lw2;and0;a3eru0Hhilipp0Po2;li0Ertugu06;kist3lesti1na2raguay0;ma1;ani;amiZi2orweP;caragu0geri2;an,en;a3ex0Mo2;ngo0Erocc0;cedo1la2;gasy,y08;a4eb9i2;b2thua1;e0Dy0;o,t02;azakh,eny0o2uwaiti;re0;a2orda1;ma0Bp2;anN;celandic,nd4r2sraeli,ta02vo06;a2iT;ni0qi;i0oneV;aiDin2ondur0unN;di;amDe2hanai0reek,uatemal0;or2rm0;gi0;i2ren7;lipino,n4;cuadoVgyp6ngliJsto1thiopi0urope0;a2ominXut4;niH;a9h6o4roa3ub0ze2;ch;ti0;lom2ngol5;bi0;a6i2;le0n2;ese;lifor1m2na3;bo2eroo1;di0;angladeshi,el8o6r3ul2;gaG;aziBi2;ti2;sh;li2s1;vi0;aru2gi0;si0;fAl7merBngol0r5si0us2;sie,tr2;a2i0;li0;gent2me1;ine;ba1ge2;ri0;ni0;gh0r2;ic0;an|Region\\xA6a20b1Sc1Id1Des1Cf19g13h10i0Xj0Vk0Tl0Qm0FnZoXpSqPrMsDtAut9v5w2y0zacatec22;o05u0;cat18kZ;a0est vir4isconsin,yomi14;rwick1Qshington0;! dc;er2i0;cto1Ir0;gin1R;acruz,mont;ah,tar pradesh;a1e0laxca1Cusca9;nnessee,x1Q;bas0Jmaulip1PsmI;a5i3o1taf0Nu0ylh12;ffUrrZs0X;me0Zno19uth 0;cRdQ;ber1Hc0naloa;hu0Rily;n1skatchew0Qxo0;ny; luis potosi,ta catari1H;a0hode6;j0ngp01;asth0Lshahi;inghai,u0;e0intana roo;bec,ensVreta0D;ara3e1rince edward0; isT;i,nnsylv0rnambu01;an13;!na;axa0Mdisha,h0klaho1Antar0reg3x03;io;ayarit,eAo2u0;evo le0nav0K;on;r0tt0Qva scot0W;f5mandy,th0; 0ampton0P;c2d1yo0;rk0N;ako0X;aroli0U;olk;bras0Wva00w0; 1foundland0;! and labrador;brunswick,hamp0Gjers0mexiIyork state;ey;a5i1o0;nta0Mrelos;ch2dlanAn1ss0;issippi,ouri;as geraFneso0L;igPoacP;dhya,harasht03ine,ni2r0ssachusetts;anhao,y0;land;p0toba;ur;anca03e0incoln03ouis7;e0iG;ds;a0entucky,hul09;ns07rnata0Cshmir;alis0iangxi;co;daho,llino1nd0owa;ia04;is;a1ert0idalDun9;fordS;mpRwaii;ansu,eorgVlou4u0;an1erre0izhou,jarat;ro;ajuato,gdo0;ng;cesterL;lori1uji0;an;da;sex;e3o1uran0;go;rs0;et;lawaDrbyC;a7ea6hi5o0umbrG;ahui3l2nnectic1rsi0ventry;ca;ut;iLorado;la;apDhuahua;ra;l7m0;bridge2peche;a4r3uck0;ingham0;shi0;re;emen,itish columb2;h1ja cal0sque,var1;iforn0;ia;guascalientes,l3r0;izo1kans0;as;na;a1ber0;ta;ba1s0;ka;ma|Possessive\\xA6anyAh5its,m3noCo1sometBthe0yo1;ir1mselves;ur0;!s;i8y0;!se4;er1i0;mse2s;!s0;!e0;lf;o1t0;hing;ne|Currency\\xA6$,aud,bRcPdKeurJfIgbp,hkd,inr,jpy,kGlEp8r7s3usd,x2y1z0\\xA2,\\xA3,\\xA5,\\u0434\\u0435\\u043D,\\u043B\\u0432,\\u0440\\u0443\\u0431,\\u0E3F,\\u20A1,\\u20A8,\\u20AC,\\u20AD,\\uFDFC;lotyR\\u0142;en,uanQ;af,of;h0t5;e0il5;k0q0;elL;iel,oubleKp,upeeK;e2ound st0;er0;lingH;n0soG;ceFn0;ies,y;e0i7;i,mpi6;n,r0wanzaByatB;!onaAw;ori7ranc9t;!o8;en3i2kk,o0;b0ll2;ra5;me4n0rham4;ar3;ad,e0ny;nt1;aht,itcoin0;!s|Country\\xA60:38;1:2L;a2Wb2Dc21d1Xe1Rf1Lg1Bh19i13j11k0Zl0Um0Gn05om3CpZqat1JrXsKtCu6v4wal3yemTz2;a24imbabwe;es,lis and futu2X;a2enezue31ietnam;nuatu,tican city;.5gTkraiZnited 3ruXs2zbeE;a,sr;arab emirat0Kkingdom,states2;! of am2X;k.,s.2; 27a.;a7haBimor-les0Bo6rinidad4u2;nis0rk2valu;ey,me2Xs and caic1T; and 2-2;toba1J;go,kel0Ynga;iw2Vji2nz2R;ki2T;aCcotl1eBi8lov7o5pa2Bri lanka,u4w2yr0;az2ed9itzerl1;il1;d2Qriname;lomon1Vmal0uth 2;afr2IkLsud2O;ak0en0;erra leoEn2;gapo1Wt maart2;en;negKrb0ychellY;int 2moa,n marino,udi arab0;hele24luc0mart1Z;epublic of ir0Com2Cuss0w2;an25;a3eHhilippinTitcairn1Ko2uerto riM;l1rtugE;ki2Bl3nama,pua new0Tra2;gu6;au,esti2;ne;aAe8i6or2;folk1Gth3w2;ay; k2ern mariana1B;or0M;caragua,ger2ue;!ia;p2ther18w zeal1;al;mib0u2;ru;a6exi5icro09o2yanm04;ldova,n2roc4zamb9;a3gol0t2;enegro,serrat;co;c9dagascZl6r4urit3yot2;te;an0i14;shall0Vtin2;ique;a3div2i,ta;es;wi,ys0;ao,ed00;a5e4i2uxembourg;b2echtenste10thu1E;er0ya;ban0Gsotho;os,tv0;azakh1De2iriba02osovo,uwait,yrgyz1D;eling0Jnya;a2erF;ma15p1B;c6nd5r3s2taly,vory coast;le of m19rael;a2el1;n,q;ia,oI;el1;aiSon2ungary;dur0Mg kong;aAermany,ha0Pibralt9re7u2;a5ern4inea2ya0O;!-biss2;au;sey;deloupe,m,tema0P;e2na0M;ce,nl1;ar;bTmb0;a6i5r2;ance,ench 2;guia0Dpoly2;nes0;ji,nl1;lklandTroeT;ast tim6cu5gypt,l salv5ngl1quatorial3ritr4st2thiop0;on0; guin2;ea;ad2;or;enmark,jibou4ominica3r con2;go;!n B;ti;aAentral african 9h7o4roat0u3yprQzech2; 8ia;ba,racao;c3lo2morPngo-brazzaville,okFsta r03te d'ivoiK;mb0;osD;i2ristmasF;le,na;republic;m2naTpe verde,yman9;bod0ero2;on;aFeChut00o8r4u2;lgar0r2;kina faso,ma,undi;azil,itish 2unei;virgin2; is2;lands;liv0nai4snia and herzegoviGtswaGuvet2; isl1;and;re;l2n7rmuF;ar2gium,ize;us;h3ngladesh,rbad2;os;am3ra2;in;as;fghaFlCmAn5r3ustr2zerbaijH;al0ia;genti2men0uba;na;dorra,g4t2;arct6igua and barbu2;da;o2uil2;la;er2;ica;b2ger0;an0;ia;ni2;st2;an|City\\xA6a2Wb26c1Wd1Re1Qf1Og1Ih1Ai18jakar2Hk0Zl0Tm0Gn0Co0ApZquiYrVsLtCuBv8w3y1z0;agreb,uri1Z;ang1Te0okohama;katerin1Hrev34;ars3e2i0rocl3;ckl0Vn0;nipeg,terth0W;llingt1Oxford;aw;a1i0;en2Hlni2Z;lenc2Uncouv0Gr2G;lan bat0Dtrecht;a6bilisi,e5he4i3o2rondheim,u0;nVr0;in,ku;kyo,ronIulouC;anj23l13miso2Jra2A; haJssaloni0X;gucigalpa,hr2Ol av0L;i0llinn,mpe2Bngi07rtu;chu22n2MpT;a3e2h1kopje,t0ydney;ockholm,uttga12;angh1Fenzh1X;o0KvZ;int peters0Ul3n0ppo1F; 0ti1B;jo0salv2;se;v0z0Q;adU;eykjavik,i1o0;me,t25;ga,o de janei17;to;a8e6h5i4o2r0ueb1Qyongya1N;a0etor24;gue;rt0zn24; elizabe3o;ls1Grae24;iladelph1Znom pe07oenix;r0tah tik19;th;lerJr0tr10;is;dessa,s0ttawa;a1Hlo;a2ew 0is;delTtaip0york;ei;goya,nt0Upl0Uv1R;a5e4i3o1u0;mb0Lni0I;nt0scH;evideo,real;l1Mn01skolc;dell\\xEDn,lbour0S;drid,l5n3r0;ib1se0;ille;or;chest0dalWi0Z;er;mo;a4i1o0vAy01;nd00s angel0F;ege,ma0nz,sbZverpo1;!ss0;ol; pla0Iusan0F;a5hark4i3laipeda,o1rak0uala lump2;ow;be,pavog0sice;ur;ev,ng8;iv;b3mpa0Kndy,ohsiu0Hra0un03;c0j;hi;ncheMstanb0\\u0307zmir;ul;a5e3o0; chi mi1ms,u0;stI;nh;lsin0rakliG;ki;ifa,m0noi,va0A;bu0SiltD;alw4dan3en2hent,iza,othen1raz,ua0;dalaj0Gngzhou;bu0P;eUoa;sk;ay;es,rankfu0;rt;dmont4indhovU;a1ha01oha,u0;blRrb0Eshanbe;e0kar,masc0FugavpiJ;gu,je0;on;a7ebu,h2o0raioJuriti01;lo0nstanJpenhagNrk;gFmbo;enn3i1ristchur0;ch;ang m1c0ttagoL;ago;ai;i0lgary,pe town,rac4;ro;aHeBirminghWogoAr5u0;char3dap3enos air2r0sZ;g0sa;as;es;est;a2isba1usse0;ls;ne;silPtisla0;va;ta;i3lgrade,r0;g1l0n;in;en;ji0rut;ng;ku,n3r0sel;celo1ranquil0;la;na;g1ja lu0;ka;alo0kok;re;aBb9hmedabad,l7m4n2qa1sh0thens,uckland;dod,gabat;ba;k0twerp;ara;m5s0;terd0;am;exandr0maty;ia;idj0u dhabi;an;lbo1rh0;us;rg|Place\\xA6aMbKcIdHeFfEgBhAi9jfk,kul,l7m5new eng4ord,p2s1the 0upJyyz;bronx,hamptons;fo,oho,under2yd;acifMek,h0;l,x;land;a0co,idDuc;libu,nhattK;a0gw,hr;s,x;ax,cn,ndianGst;arlem,kg,nd;ay village,re0;at 0enwich;britain,lak2;co,ra;urope,verglad0;es;en,fw,own1xb;dg,gk,hina0lt;town;cn,e0kk,rooklyn;l air,verly hills;frica,m5ntar1r1sia,tl0;!ant1;ct0;ic0; oce0;an;ericas,s|FemaleName\\xA60:G0;1:G4;2:FT;3:FF;4:FE;5:FU;6:ER;7:GH;8:F1;9:ET;A:GD;B:E7;C:GA;D:FQ;E:FN;F:EI;G:C8;aE4bD6cB9dAJe9Hf92g8Ih85i7Uj6Wk61l4Pm3An2Vo2Sp2Hqu2Fr1Ps0Rt05ursu9vVwPyMzH;aKeIoH;e,la,ra;lHna;da,ma;da,ra;as7GeIol1UvH;et6onBA;le0sen3;an8endBPhiB5iH;lJnH;if3BniHo0;e,f3A;a,helmi0lHma;a,ow;aNeKiH;cIviH;an9YenG4;kD1tor3;da,l8Wnus,rH;a,nHoniD4;a,iDE;leHnesEF;nDOrH;i1y;aTeQhOiNoKrHu9y4;acG6iHu0F;c3na,sH;h9Nta;nIrH;a,i;i9Kya;a5KffaCIna,s5;al3eHomasi0;a,l8Ho6Zres1;g7Vo6YrIssH;!a,ie;eFi,ri7;bOliNmLnJrIs5tHwa0;ia0um;a,yn;iHya;a,ka,s5;a4e4iHmCCra;!ka;a,t5;at5it5;a06carlet2Ze05hViTkye,oRtNuIyH;bFMlvi1;e,sIzH;an2Uet6ie,y;anHi7;!a,e,nH;aEe;aJeH;fHl3EphH;an2;cFBr73;f3nHphi1;d4ia,ja,ya;er4lv3mon1nHobh76;dy;aLeHirlBNo0y9;ba,e0i9lJrH;iHrBRyl;!d71;ia,lBX;ki4nJrIu0w0yH;la,na;i,leAon,ron;a,da,ia,nHon;a,on;l60re0;bNdMi8lLmJndIrHs5vannaE;aEi0;ra,y;aHi4;nt5ra;lBPome;e,ie;in1ri0;a03eYhWiUoIuH;by,thBM;bRcQlPnOsIwe0xH;an95ie,y;aIeHie,lC;ann7ll1marBHtB;!lHnn1;iHyn;e,nH;a,d7X;da,i,na;an8;hel55io;bin,erByn;a,cHkki,na,ta;helC2ki;ea,iannE0oH;da,n13;an0bJgi0i0nHta,y0;aHee;!e,ta;a,eH;cATkaE;chHe,i0mo0n5FquCGvDy0;aCFelHi8;!e,le;een2iH;a0nn;aNeMhKoJrH;iHudenAX;scil1Uyamva8;lly,rt3;ilome0oebe,ylH;is,lis;arl,ggy,nelope,r9t4;ige,m0Fn4Po9rvaBDtIulH;a,et6in1;ricHsy,tA9;a,e,ia;ctav3deIf86lHph86;a,ga,iv3;l3t6;aReQiKoHy9;eIrH;aEeDma;ll1mi;aLcJkHla,na,s5ta;iHki;!ta;hoB4k8ColH;a,eBJ;!mh;l7Una,risF;dJi5PnIo23taH;li1s5;cy,et6;eAiCQ;a01ckenz2eViLoIrignayani,uriBIyrH;a,na,tAV;i4ll9ZnH;a,iH;ca,ka,qB7;a,chPkaOlKmi,nJrHtzi;aHiam;!n8;a,dy,erva,h,n2;a,dJi9LlH;iHy;cent,e;red;!e9;ae9el3I;ag4LgLi,lIrH;edi62isFyl;an2iHliF;nHsAP;a,da;!an,han;b09c9Gd07e,g05i04l02n00rLtKuIv6TxGyHz2;a,bell,ra;de,rH;a,eD;h77il8t2;a,cTgPiKjor2l6Jn2s5tJyH;!aHbe5RjaAlou;m,n9V;a,ha,i0;!aJbAOeIja,lCna,sHt54;!a,ol,sa;!l07;!h,m,nH;!a,e,n1;arJeIie,oHr3Lueri6;!t;!ry;et3JiB;elHi62y;a,l1;dHon,ue9;akranBy;iHlo97;a,ka,n8;a,re,s2;daHg2;!l2Y;alCd2elHge,isBJon0;eiAin1yn;el,le;a0Je09iXoRuLyH;d3la,nH;!a,dIe9VnHsAT;!a,e9U;a,sAR;aB4cKelJiFlIna,pHz;e,iB;a,u;a,la;iHy;a2Ce,l27n8;is,l1IrItt2uH;el9is1;aJeIi7na,rH;aGi7;lei,n1tB;!in1;aRbQd3lMnJsIv3zH;!a,be4Let6z2;a,et6;a,dH;a,sHy;ay,ey,i,y;a,iaJlH;iHy;a8Je;!n4G;b7Verty;!n5T;aOda,e0iMla,nLoJslAUtHx2;iHt2;c3t3;la,nHra;a,ie,o4;a,or1;a,gh,laH;!ni;!h,nH;a,d4e,n4O;cOdon7Ui9kes5na,rNtLurJvIxHy9;mi;ern1in3;a,eHie,yn;l,n;as5is5oH;nya,ya;a,isF;ey,ie,y;a01eWhadija,iOoNrJyH;lHra;a,ee,ie;isHy5D;!tH;a,en,iHy;!e,n48;ri,urtn9C;aNerMl9BmJrHzzy;a,stH;en,in;!berlH;eHi,y;e,y;a,stD;!na,ra;el6QiKlJnIrH;a,i,ri;d4na;ey,i,l9Ss2y;ra,s5;c8Yi5YlPma9nyakumari,rNss5MtKviByH;!e,lH;a,eH;e,i7A;a5FeIhHi3PlCri0y;arGerGie,leDr9Hy;!lyn75;a,en,iHl4Vyn;!ma,n31sF;ei74i,l2;a05eWilUoNuH;anLdKliHstG;aIeHsF;!nAt0W;!n8Z;e,i2Ry;a,iB;!anMcelCd5Wel73han6JlKni,sIva0yH;a,ce;eHie;fi0lCphG;eHie;en,n1;!a,e,n36;!i10lH;!i0Z;anMle0nJrIsH;i5Rsi5R;i,ri;!a,el6Rif1RnH;a,et6iHy;!e,f1P;a,e74iInH;a,e73iH;e,n1;cMd1mi,nIqueliAsmin2Uvie4yAzH;min7;a7eIiH;ce,e,n1s;!lHsFt06;e,le;inIk2lCquelH;in1yn;da,ta;da,lQmOnNo0rMsIvaH;!na;aIiHob6W;do4;!belHdo4;!a,e,l2G;en1i0ma;a,di4es,gr5T;el8ogH;en1;a,eAia0o0se;aNeKilIoHyacin1N;ll2rten1H;a5HdHla5H;a,egard;ath0XiIlHnrietBrmiAst0X;en25ga;di;il78lLnKrHtt2yl78z6G;iHmo4Hri4I;etH;!te;aEnaE;ey,l2;aZeUiPlNold13rJwH;enHyne19;!dolC;acIetHisel8;a,chD;e,ieH;!la;adys,enHor3yn1Z;a,da,na;aKgi,lIna,ov74selH;a,e,le;da,liH;an;!n0;mZnJorgIrH;aldGi,m2Utru76;et6i5W;a,eHna;s1Ovieve;briel3Hil,le,rnet,yle;aSePio0loNrH;anIe8iH;da,e8;!cH;esIiHoi0H;n1s3X;!ca;!rH;a,en45;lIrnH;!an8;ec3ic3;rItiHy7;ma;ah,rah;d0GileDkBl01mVn4DrSsNtMuLvH;aJelIiH;e,ta;in0Byn;!ngelG;geni1la,ni3T;h55ta;meral8peranKtH;eIhHrel9;er;l2Rr;za;iHma,nestGyn;cHka,n;a,ka;eKilJmH;aHie,y;!liA;ee,i1y;lHrald;da,y;aUeSiNlMma,no4oKsJvH;a,iH;na,ra;a,ie;iHuiH;se;a,en,ie,y;a0c3da,nKsHzaI;aHe;!beH;th;!a,or;anor,nH;!a;in1na;en,iHna,wi0;e,th;aXeLiKoHul2W;lor54miniq41n32rHtt2;a,eDis,la,othHthy;ea,y;an0AnaEonAx2;anQbPde,eOiMja,lJmetr3nHsir4X;a,iH;ce,se;a,iIla,orHphiA;es,is;a,l5M;dHrdH;re;!d4Pna;!b2EoraEra;a,d4nH;!a,e;hl3i0mNnLphn1rIvi1YyH;le,na;a,by,cIia,lH;a,en1;ey,ie;a,et6iH;!ca,el1Cka;arHia;is;a0Se0Oh06i04lWoKrIynH;di,th3;istHy06;al,i0;lQnNrIurH;tn1F;aKdJiHnJriA;!nH;a,e,n1;el3;!l1T;n2sH;tanHuelo;ce,za;eHleD;en,t6;aJeoIotH;il4D;!pat4;ir7rJudH;et6iH;a,ne;a,e,iH;ce,sY;a4er4ndH;i,y;aQeNloe,rH;isIyH;stal;sy,tH;aIen,iHy;!an1e,n1;!l;lseIrH;!i7yl;a,y;nMrH;isKlImH;aiA;a,eHot6;n1t6;!sa;d4el1RtH;al,el1Q;cIlH;es6i3H;el3ilH;e,ia,y;iZlYmilXndWrOsMtHy9;aKeJhHri0;erGleDrCy;in1;ri0;li0ri0;a2IsH;a2Hie;a,iNlLmeJolIrH;ie,ol;!e,in1yn;lHn;!a,la;a,eHie,y;ne,y;na,sF;a0Ei0E;a,e,l1;isBl2;tlH;in,yn;arb0DeZianYlWoUrH;andSeQiJoIyH;an0nn;nwCok7;an2PdgLg0KtH;n29tH;!aInH;ey,i,y;ny;etH;!t7;an0e,nH;da,na;i7y;bbi7nH;iBn2;ancHossom,ythe;a,he;ca;aScky,lin8niBrOssNtJulaEvH;!erlH;ey,y;hIsy,tH;e,i11y7;!anH;ie,y;!ie;nHt5yl;adIiH;ce;et6iA;!triH;ce,z;a4ie,ra;aliy2Bb26d1Ng1Ji1Bl0Um0Pn03rYsPthe0uLvJyH;anHes5;a,na;a,eHr27;ry;drJgusIrH;el3o4;ti0;a,ey,i,y;hItrH;id;aLlHt1Q;eIi7yH;!n;e,iHy;gh;!nH;ti;iJleIpiB;ta;en,n1t6;an1AelH;le;aZdXeVgRiPja,nItoHya;inet6n3;!aKeIiHmJ;e,ka;!mHt6;ar2;!belIliFmU;sa;!le;ka,sHta;a,sa;elHie;a,iH;a,ca,n1qH;ue;!t6;te;je9rea;la;!bImHstas3;ar3;el;aJberIel3iHy;e,na;!ly;l3n8;da;aUba,eOiLlJma,ta,yH;a,c3sH;a,on,sa;iHys0K;e,s0J;a,cIna,sHza;a,ha,on,sa;e,ia;c3is5jaJna,ssaJxH;aHia;!nd4;nd4;ra;ia;i0nIyH;ah,na;a,is,naE;c5da,leDmMnslLsH;haElH;inHyX;g,n;!h;ey;ee;en;at5g2nH;es;ie;ha;aWdiTelMrH;eJiH;anMenH;a,e,ne;an0;na;aLeKiIyH;nn;a,n1;a,e;!ne;!iH;de;e,lCsH;on;yn;!lH;iAyn;ne;agaKbIiH;!gaJ;ey,i7y;!e;il;ah|Person\\xA6a01bZcTdQeOfMgJhHinez,jFkEleDmAnettPo9p7r4s3t2uncle,v0womL;a0irgin maH;lentino rossi,n go3;heresa may,iger woods,yra banks;addam hussaQcarlett johanssRistZlobodan milosevic,omeone,tepGuC;ay romano,eese witherspoQo1ush limbau0;gh;d stewart,naldinho,sario;a0ipV;lmUris hiltM;prah winfrOra;an,essiaen,itt romnNo0ubarek;m0thR;!my;bron james,e;anye west,iefer sutherland,obe bryaN;aime,effersFk rowli0;ng;alle ber0ulk hog3;ry;astBentlem1irl,rand0uy;fa2mo2;an;a0ella;thF;ff0meril lagasse,zekiel;ie;a0enzel washingt4ick wolf,ude;d0lt3nte;!dy;ar2lint1ous0ruz;in;on;dinal wols1son0;! palm5;ey;arack obama,oy,ro0;!ck,th2;dolf hitl1shton kutch1u0;nt;er|WeekDay\\xA6fri4mon4s2t1wed0;!nesd4;hurs2ues2;at0un1;!urd1;!d0;ay0;!s|Date\\xA6autumn,daylight9eom,one d8s5t2w0yesterd8;eek0int5;d6end;mr1o0;d4morrow;!w;ome 1tandard3umm0;er;d0point;ay; time|Time\\xA6a6breakfast 5dinner5e3lunch5m2n0oclock,some5to7;i7o0;on,w;id4or1;od,ve0;ning;time;fternoon,go,ll day,t 0;ni0;ght|Holiday\\xA60:1Q;1:1P;a1Fb1Bc12d0Ye0Of0Kg0Hh0Di09june07kwanzaa,l04m00nYoVpRrPsFt9v6w4xm03y2;om 2ule;hasho16kippur;hit2int0Xomens equalit8; 0Ss0T;alentines3e2ictor1E;r1Bteran1;! 0;-0ax 0h6isha bav,rinityMu2; b3rke2;y 0;ish2she2;vat;a0Xe prophets birth0;a6eptember14h4imchat tor0Ut 3u2;kk4mmer T;a8p7s6valentines day ;avu2mini atzeret;ot;int 2mhain;a4p3s2valentine1;tephen1;atrick1;ndrew1;amadan,ememberanc0Yos2;a park1h hashana;a3entecost,reside0Zur2;im,ple heart 0;lm2ssovE; s04;rthodox 2stara;christma1easter2goOhoJn0C;! m07;ational 2ew years09;freedom 0nurse1;a2emorial 0lHoOuharram;bMr2undy thurs0;ch0Hdi gr2tin luther k0B;as;a2itRughnassadh;bour 0g baom2ilat al-qadr;er; 2teenth;soliU;d aJmbolc,n2sra and miraj;augurGd2;ependen2igenous people1;c0Bt1;a3o2;ly satur0;lloween,nukkUrvey mil2;k 0;o3r2;ito de dolores,oundhoW;odW;a4east of 2;our lady of guadalupe,the immaculate concepti2;on;ther1;aster8id 3lectYmancip2piphany;atX;al-3u2;l-f3;ad3f2;itr;ha;! 2;m8s2;un0;ay of the dead,ecemb3i2;a de muertos,eciseis de septiembre,wali;er sol2;stice;anad8h4inco de mayo,o3yber m2;on0;lumbu1mmonwealth 0rpus christi;anuk4inese n3ristmas2;! N;ew year;ah;a 0ian tha2;nksgiving;astillCeltaine,lack4ox2;in2;g 0; fri0;dvent,ll 9pril fools,rmistic8s6u2;stral4tum2;nal2; equinox;ia 0;cens2h wednes0sumption of mary;ion 0;e 0;hallows 6s2;ai2oul1t1;nt1;s 0;day;eve|Month\\xA6aBdec9feb7j2mar,nov9oct1sep0;!t8;!o8;an3u0;l1n0;!e;!y;!u1;!ru0;ary;!em0;ber;pr1ug0;!ust;!il|Duration\\xA6centur4d2hour3m0seconds,week3year3;i0onth2;llisecond1nute1;ay0ecade0;!s;ies,y|FirstName\\xA6aEblair,cCdevBj8k6lashawn,m3nelly,re2sh0;ay,e0iloh;a,lby;g1ne;ar1el,org0;an;ion,lo;as8e0;ls7nyatta,rry;am0ess1;ie,m0;ie;an,on;as0heyenne;ey,sidy;lexis,ndra,ubr0;ey|LastName\\xA60:35;1:3C;2:3A;3:2Z;4:2F;a3Bb31c2Od2Ee2Bf25g1Zh1Oi1Jj1Dk16l0Ym0Mn0Io0Fp04rXsLtGvEwBxAy7zh5;a5ou,u;ng,o;a5eun2Uoshi1Jun;ma5ng;da,guc1Zmo27sh21zaQ;iao,u;a6eb0il5o3right,u;li3Bs2;gn0lk0ng,tanabe;a5ivaldi;ssilj37zqu1;a8h7i2Go6r5sui,urn0;an,ynisI;lst0Orr1Uth;at1Uomps2;kah0Unaka,ylor;aDchCeBhimizu,iAmi9o8t6u5zabo;ar1lliv2AzuD;a5ein0;l23rm0;sa,u3;rn4th;lva,mmo24ngh;mjon4rrano;midt,neid0ulz;ito,n6sa5to;ki;ch1dKtos,z;amAeag1Zi8o6u5;bio,iz,sC;b5dri1MgHj0Sme24osevelt,sZux;erts,ins2;c5ve0E;ci,hards2;ir1os;aDe9h7ic5ow20;as5hl0;so;a5illips;m,n1T;ders20et7r6t5;e0Nr4;ez,ry;ers;h21rk0t5vl4;el,te0J;baAg0Alivei00r5;t5w1O;ega,iz;a5eils2guy1Rix2owak,ym1E;gy,ka5var1K;ji5muV;ma;aDeBiAo7u5;ll0n5rr0Bssolini,\\xF15;oz;lina,oJr5zart;al0Me5r0U;au,no;hhail4ll0;rci0s5y0;si;eVmmad4r5tsu07;in5tin1;!o;aBe7i5op1uo;!n5u;coln,dholm;fe6n0Qr5w0J;oy;bv5v5;re;mmy,rs14u;aAennedy,imu9le0Lo7u6wo5;k,n;mar,znets4;bay5vacs;asY;ra;hn,rl8to,ur,zl4;a9en8ha3imen1o5u3;h5nYu3;an5ns2;ss2;ki0Es0S;cks2nsse0D;glesi8ke7noue,shik6to,vano5;u,v;awa;da;as;aBe8it7o6u5;!a3b0ghNynh;a3ffmann,rvat;chcock,l0;mingw6nde5rM;rs2;ay;ns0ErrPs6y5;asCes;an4hi5;moI;a8il,o7r6u5;o,tierr1;ayli3ub0;m1nzal1;nd5o,rcia;hi;er9is8lor7o6uj5;ita;st0urni0;es;ch0;nand1;d6insteGsposi5vaK;to;is2wards;aBeAi8omin7u5;bo5rand;is;gu1;az,mitr4;ov;lgado,vi;nkula,rw6vi5;es,s;in;aEhAlark9o5;hKl5op0rbyn,x;em6li5;ns;an;!e;an7e6iu,o5ristensFu3we;i,ng,u3w,y;!n,on5u3;!g;mpb6rt0st5;ro;ell;aAe7ha3lanco,oyko,r5yrne;ooks,yant;ng;ck6ethov5nnett;en;er,ham;ch,h7iley,rn5;es,i0;er;k,ng;dCl8nd5;ers5r9;en,on,s2;on;eks6iy7var1;ez;ej5;ev;ams|MaleName\\xA60:CE;1:BK;2:C2;3:BS;4:B4;5:BZ;6:AT;7:9V;8:BC;9:AW;A:AO;B:8W;aB5bA9c98d88e7Hf6Zg6Hh5Wi5Ij4Lk4Bl3Rm2Pn2Eo28p22qu20r1As0Qt07u06v01wOxavi3yHzC;aCor0;cCh8Jne;hDkC;!a5Z;ar51e5Y;ass2i,oDuC;sEu25;nFsEusC;oCsD;uf;ef;at0g;aKeIiDoCyaAQ;lfgang,odrow;lCn1O;bEey,frBJlC;aA6iC;am,e,s;e8Aur;i,nde7sC;!l6t1;de,lDrr5yC;l1ne;lCt3;a94y;aFern1iC;cDha0nceCrg9Cva0;!nt;ente,t5B;lentin49n8Zughn;lyss4Msm0;aTeOhLiJoFrDyC;!l3ro8s1;av9ReCist0oy,um0;nt9Jv55y;bEd7YmCny;!as,mCoharu;aAYie,y;iBy;mCt9;!my,othy;adDeoCia7EomB;!do7O;!de9;dFrC;en8JrC;an8IeCy;ll,n8H;!dy;dgh,ic9Unn3req,ts46;aScotQeOhKiIoGpenc3tCur1Pylve8Jzym1;anEeCua7D;f0phAGvCwa7C;e59ie;!islaw,l6;lom1nA4uC;leyma8ta;dClBm1;!n6;aEeC;lCrm0;d1t1;h6Une,qu0Vun,wn,y8;aCbasti0k1Yl42rg41th,ymo9J;m9n;!tC;!ie,y;lDmCnti22q4Kul;!mAu4;ik,vato6X;aXeThe94iPoGuDyC;an,ou;b6NdDf9pe6SssC;!elAK;ol2Vy;an,bJcIdHel,geGh0landA4mFnEry,sDyC;!ce;coe,s;!a96nA;an,eo;l3Kr;e4Sg3n6oA5ri6A;co,ky;bAe9V;cCl6;ar5Qc5PhDkCo;!ey,ie,y;a87ie;gDid,ub5x,yCza;ansh,nT;g8XiC;na8Ts;ch60fa4lEmDndCpha4sh6Wul,ymo72;alA0ol2Cy;i9Jon;f,ph;ent2inC;cy,t1;aGeEhilDier64ol,reC;st1;!ip,lip;d9Crcy,tC;ar,e2W;b3Udra6Ht46ul;ctav2Wliv3m97rGsDtCum8Vw5;is,to;aDc8TvC;al54;ma;i,l4BvK;athKeIiEoC;aCel,l0ma0r2Y;h,m;cDg4i3KkC;h6Wola;holBkColB;!olB;al,d,il,ls1vC;il52;anCy;!a4i4;aXeUiLoGuDyC;l22r1;hamDr61staC;fa,p4I;ed,mG;dibo,e,hamEis1YntDsCussa;es,he;e,y;ad,ed,mC;ad,ed;cHgu4kFlEnDtchC;!e7;a7Aik;o04t1;e,olC;aj;ah,hCk6;a4eC;al,l;hDlv2rC;le,ri7v2;di,met;ck,hOlMmPnu4rIs1tEuricDxC;!imilian87we7;e,io;eo,hDiBtC;!eo,hew,ia;eCis;us,w;cEio,k81lDqu6Isha7tCv2;i2Jy;in,on;!el,oLus;achCcolm,ik;ai,y;amCdi,moud;adC;ou;aSeOiNlo2ToJuDyC;le,nd1;cFiEkCth3;aCe;!s;gi,s;as,iaC;no;g0nn6SrenEuCwe7;!iC;e,s;!zo;am,on4;a7Cevi,la4UnEoCst3vi;!nC;!a62el;!ny;mDnCr16ur4Vwr4V;ce,d1;ar,o4P;aJeEhaled,iCrist4Xu4Ay3D;er0p,rC;by,k,ollos;en0iFnCrmit,v2;!dDnCt5E;e10y;a7ri4P;r,th;na69rCthem;im,l;aZeRiPoEuC;an,liCst2;an,o,us;aqu2eKhnJnHrFsC;eDhCi7Due;!ua;!ph;dCge;an,i,on;!aCny;h,s,th4Z;!ath4Yie,nA;!l,sCy;ph;an,e,mC;!mA;d,ffHrEsC;sCus;!e;a5KemDmai8oCry;me,ni0Q;i6Wy;!e07rC;ey,y;cId5kHmGrEsDvi3yC;!d5s1;on,p3;ed,od,rCv4O;e51od;al,es,is1;e,ob,ub;k,ob,quC;es;aObrahNchika,gLkeKlija,nuJrHsEtCv0;ai,sC;uki;aCha0i6Hma4sac;ac,iaC;h,s;a,vinCw2;!g;k,nngu53;!r;nacCor;io;im;in,n;aLeGina4WoEuCyd57;be27gCmber4EsE;h,o;m3ra35sCwa3Z;se2;aFctEitEnDrC;be22m0;ry;or;th;bLlKmza,nJo,rEsDyC;a44d5;an,s0;lFo4FrEuCv6;hi41ki,tC;a,o;is1y;an,ey;k,s;!im;ib;aReNiMlenLoJrFuC;illerDsC;!tavo;mo;aEegCov3;!g,orC;io,y;dy,h58nt;nzaCrd1;lo;!n;lbe4Qno,ovan4S;ne,oErC;aCry;ld,rd4O;ffr6rge;bri4l5rCv2;la20r3Fth,y;aSeOiMlKorr0JrC;anEedCitz;!dAeCri25;ri24;cEkC;!ie,lC;in,yn;esKisC;!co,zek;etch3oC;yd;d4lConn;ip;deriEliDng,rnC;an02;pe,x;co;bi0di;ar00dVfrUit0lOmHnGo2rDsteb0th0uge8vCym5zra;an,ere2W;gi,iDnCrol,v2w2;est3Zie;c08k;och,rique,zo;aHerGiDmC;aGe2Q;lDrC;!h0;!io;s1y;nu4;be0Ad1iFliEmDt1viCwood;n,s;er,o;ot1Us;!as,j44sC;ha;a2en;!dAg32mFuDwC;a26in;arC;do;o0Tu0T;l,nC;est;aZePiMoFrEuDwCyl0;ay8ight;a8dl6nc0st2;ag0ew;minGnEri0ugDyC;le;!lB;!a29nCov0;e7ie,y;go,icC;!k;armuDeCll1on,rk;go;id;anJj0lbeImetri9nGon,rFsEvDwCxt3;ay8ey;en,in;hawn,mo09;ek,ri0G;is,nCv3;is,y;rt;!dC;re;lLmJnIrEvC;e,iC;!d;en,iEne7rCyl;eCin,yl;l2Wn;n,o,us;!e,i4ny;iCon;an,en,on;e,lB;as;a07e05hXiar0lMoHrFuDyrC;il,us;rtC;!is;aCistobal;ig;dy,lFnDrC;ey,neli9y;or,rC;ad;by,e,in,l2t1;aHeEiCyJ;fCnt;fo0Dt1;meDt9velaC;nd;nt;rEuDyC;!t1;de;enC;ce;aGeFrisDuC;ck;!tC;i0oph3;st3;d,rlCs;eCie;s,y;cCdric,s11;il;lFmer1rC;ey,lDro7y;ll;!os,t1;eb,v2;ar03eVilUlaToQrDuCyr1;ddy,rtJ;aKeFiEuDyC;an,ce,on;ce,no;an,ce;nDtC;!t;dDtC;!on;an,on;dDndC;en,on;!foCl6y;rd;bDrCyd;is;!by;i8ke;al,lA;nGrCshoi;at,nDtC;!r11;aCie;rd0M;!edict,iDjam2nA;ie,y;to;n6rCt;eCy;tt;ey;ar0Yb0Od0Kgust2hm0Hid5ja0FlZmXnPputsiOrFsaEuCya0ziz;gust9st2;us;hi;aJchIi4jun,maGnEon,tCy0;hCu07;ur;av,oC;ld;an,nd05;el;ie;ta;aq;dHgel00tC;hoFoC;i8nC;!iXy;ne;ny;reCy;!as,s,w;ir,mCos;ar;an,bePd5eJfGi,lFonEphonIt1vC;aNin;on;so,zo;an,en;onDrC;edK;so;c,jaFksandEssaFxC;!and3;er;ar,er;ndC;ro;rtC;!o;ni;en;ad,eC;d,t;in;aDoCri0vik;lfo;mCn;!a;dGeFraDuC;!bakr,lfazl;hCm;am;!l;allFel,oulaye,ulC;!lDrahm0;an;ah,o;ah;av,on|Verb\\xA6awak9born,cannot,fr8g7h5k3le2m1s0wors9;e8h3;ake sure,sg;ngth6ss6;eep tabs,n0;own;as0e2;!t2;iv1onna;ight0;en|PhrasalVerb\\xA60:71;1:6P;2:7D;3:73;4:6I;5:7G;6:75;7:6O;8:6B;9:6C;A:5H;B:70;C:6Z;a7Gb62c5Cd59e57f45g3Nh37iron0j33k2Yl2Km2Bn29o27p1Pr1Es09tQuOvacuum 1wGyammerCzD;eroAip EonD;e0k0;by,up;aJeGhFiEorDrit52;d 1k2Q;mp0n49pe0r8s8;eel Bip 7K;aEiD;gh 06rd0;n Br 3C;it 5Jk8lk6rm 0Qsh 73t66v4O;rgeCsD;e 9herA;aRePhNiJoHrFuDype 0N;ckArn D;d2in,o3Fup;ade YiDot0y 32;ckle67p 79;ne66p Ds4C;d2o6Kup;ck FdEe Dgh5Sme0p o0Dre0;aw3ba4d2in,up;e5Jy 1;by,o6U;ink Drow 5U;ba4ov7up;aDe 4Hll4N;m 1r W;ckCke Elk D;ov7u4N;aDba4d2in,o30up;ba4ft7p4Sw3;a0Gc0Fe09h05i02lYmXnWoVpSquare RtJuHwD;earFiD;ngEtch D;aw3ba4o6O; by;ck Dit 1m 1ss0;in,up;aIe0RiHoFrD;aigh1LiD;ke 5Xn2X;p Drm1O;by,in,o6A;n2Yr 1tc3H;c2Xmp0nd Dr6Gve6y 1;ba4d2up;d2o66up;ar2Uell0ill4TlErDurC;ingCuc8;a32it 3T;be4Brt0;ap 4Dow B;ash 4Yoke0;eep EiDow 9;c3Mp 1;in,oD;ff,v7;gn Eng2Yt Dz8;d2o5up;in,o5up;aFoDu4E;ot Dut0w 5W;aw3ba4f36o5Q;c2EdeAk4Rve6;e Hll0nd GtD; Dtl42;d2in,o5upD;!on;aw3ba4d2in,o1Xup;o5to;al4Kout0rap4K;il6v8;at0eKiJoGuD;b 4Dle0n Dstl8;aDba4d2in52o3Ft2Zu3D;c1Ww3;ot EuD;g2Jnd6;a1Wf2Qo5;ng 4Np6;aDel6inAnt0;c4Xd D;o2Su0C;aQePiOlMoKrHsyc29uD;ll Ft D;aDba4d2in,o1Gt33up;p38w3;ap37d2in,o5t31up;attleCess EiGoD;p 1;ah1Gon;iDp 52re3Lur44wer 52;nt0;ay3YuD;gAmp 9;ck 52g0leCn 9p3V;el 46ncilA;c3Oir 2Hn0ss FtEy D;ba4o4Q; d2c1X;aw3ba4o11;pDw3J;e3It B;arrow3Serd0oD;d6te3R;aJeHiGoEuD;ddl8ll36;c16p 1uth6ve D;al3Ad2in,o5up;ss0x 1;asur8lt 9ss D;a19up;ke Dn 9r2Zs1Kx0;do,o3Xup;aOeMiHoDuck0;a16c36g 0AoDse0;k Dse34;aft7ba4d2forw2Ain3Vov7uD;nd7p;e GghtFnEsDv1T;ten 4D;e 1k 1; 1e2Y;ar43d2;av1Ht 2YvelD; o3L;p 1sh DtchCugh6y1U;in3Lo5;eEick6nock D;d2o3H;eDyA;l2Hp D;aw3ba4d2fSin,o05to,up;aFoEuD;ic8mpA;ke2St2W;c31zz 1;aPeKiHoEuD;nker2Ts0U;lDneArse2O;d De 1;ba4d2oZup;de Et D;ba4on,up;aw3o5;aDlp0;d Fr Dt 1;fDof;rom;in,oO;cZm 1nDve it;d Dg 27kerF;d2in,o5;aReLive Jloss1VoFrEunD; f0M;in39ow 23; Dof 0U;aEb17it,oDr35t0Ou12;ff,n,v7;bo5ft7hJw3;aw3ba4d2in,oDup,w3;ff,n,ut;a17ek0t D;aEb11d2oDr2Zup;ff,n,ut,v7;cEhDl1Pr2Xt,w3;ead;ross;d aEnD;g 1;bo5;a08e01iRlNoJrFuD;cDel 1;k 1;eEighten DownCy 1;aw3o2L;eDshe1G; 1z8;lFol D;aDwi19;bo5r2I;d 9;aEeDip0;sh0;g 9ke0mDrD;e 2K;gLlJnHrFsEzzD;le0;h 2H;e Dm 1;aw3ba4up;d0isD;h 1;e Dl 11;aw3fI;ht ba4ure0;eInEsD;s 1;cFd D;fDo1X;or;e B;dQl 1;cHll Drm0t0O;apYbFd2in,oEtD;hrough;ff,ut,v7;a4ehi1S;e E;at0dge0nd Dy8;o1Mup;o09rD;ess 9op D;aw3bNin,o15;aShPlean 9oDross But 0T;me FoEuntD; o1M;k 1l6;aJbIforGin,oFtEuD;nd7;ogeth7;ut,v7;th,wD;ard;a4y;pDr19w3;art;eDipA;ck BeD;r 1;lJncel0rGsFtch EveA; in;o16up;h Bt6;ry EvD;e V;aw3o12;l Dm02;aDba4d2o10up;r0Vw3;a0He08l01oSrHuD;bbleFcklTilZlEndlTrn 05tDy 10zz6;t B;k 9; ov7;anMeaKiDush6;ghHng D;aEba4d2forDin,o5up;th;bo5lDr0Lw3;ong;teD;n 1;k D;d2in,o5up;ch0;arKgJil 9n8oGssFttlEunce Dx B;aw3ba4;e 9; ar0B;k Bt 1;e 1;d2up; d2;d 1;aIeed0oDurt0;cFw D;aw3ba4d2o5up;ck;k D;in,oK;ck0nk0st6; oJaGef 1nd D;d2ov7up;er;up;r0t D;d2in,oDup;ff,ut;ff,nD;to;ck Jil0nFrgEsD;h B;ainCe B;g BkC; on;in,o5; o5;aw3d2o5up;ay;cMdIsk Fuction6; oD;ff;arDo5;ouD;nd;d D;d2oDup;ff,n;own;t D;o5up;ut|Modal\\xA6c5lets,m4ought3sh1w0;ill,o5;a0o4;ll,nt;! to;ay,ight,ust;an,o0;uld|Adjective\\xA60:73;1:7I;2:7O;3:7H;4:7A;5:5A;6:4Q;7:48;8:47;9:7F;A:5Z;B:71;C:6Y;D:6X;E:5V;a6Hb63c5Pd55e4Rf48g40h3Pi34j32k31l2Qm2Fn26o1Qp1Aquack,r10s0Gt09uQvNwFyear5;arp0eJholeIiHoF;man5oFu6A;d6Czy;despr73s5E;!sa7;eGlFste25;co1Hl o4J;!k5;aGiFola4A;b7Rce versa,ol53;ca2gabo61nilla;ltWnJpGrb58su4tterF;!moD; f33b1NpGsFti1G;ca7et,ide dMtairs;er,i3M;aPbeco6Pconvin26deMeLfair,ivers4knKprecedYrIsGwF;iel1Zritt5X;i1UuF;pervis0specti3;eFu5;cognLgul6Fl6F;own;ndi3v5Rxpect0;cid0rF;!grou5MsF;iz0tood;b7ppeaLssu6EuthorF;iz0;i23ra;aJeHhough4NoGrF;i1oubl0;geth6p,rpC;en5OlFm4Yrr2Tst0;li3;boo,lFn;ent0;aXcWeUhTiRmug,nobbi3DoPpOqueami3DtJuFymb62;bHi gener53pFrprisi3;erFre0K;! dup6b,i28;du0seq4S;anda6SeIi0OrFy37;aightFip0; fFfF;or59;adfaDreotyp0;aEec2Fir1IlendCot on; call0le,mb6phist1WrFu0Wvi40;dCry;gnifica2nF;ceEg7;am2Oe6ocki3ut;cFda1em5lfi2Xni1Vpa67re8;o1Fr3U;at56ient27reec56;cr0me,ns serif;aMeIiGoF;buDtt4SuSy4;ghtFv4;!-28fA;ar,bel,condi1du61fres50lHpublic3UsFtard0;is46oF;lu1na2;e1Duc44;bCciF;al,st;aPeNicayu8lacCopuliDrGuF;bl58mp0;eJiGoF;!b09fuBmi30p6;mGor,sFva1;ti8;a4Ue;ciBmF;a0Hi5I;ac20rFti1;fe9ma2Tplexi3v33;rFst;allelHtF;-tiFi4;me;!ed;bQffOkNld fashion0nMpLrg1Hth6utKvF;al,erF;!aHniGt,wF;eiFrouF;ght;ll;do0Ver,g2Lsi45;en,posi1; boa5Fg2Jli8;!ay; gua5DbFli8;eat;eHsF;cFer0Hole1;e8uE;d2Sse;ak0eMiLoFua4O;nJrGtF;ab7;thF;!eF;rn;chala2descri4Zstop;ght5;arby,cessa3Wighbor5xt;aNeLiIoFultip7;bi7derGlFnth5ot,st;dy;a1n;nFx0;iaFor;tuE;di4EnaFre;ci3;cFgenta,in,j03keshift,le,mmoth,ny,sculi8;abEho;aOeJiGoFu13;uti12vi3;mGteraF;l,te;it0;ftIgFth4;al,eGitiF;ma1;nda3C;!-0C;nguCst,tt6;ap1Sind5no0A;agg0uF;niOstifi0veni7;de4gno4Blleg4mSnHpso 1VrF;a1releF;va2; NaMbr0corLdJfluenTiTnIsHtF;a9enBoxF;ic36;a8i2R;a1er,oce2;iGoF;or;re9;deq3Jppr2Y;fFsitu,vitro;ro2;mJpF;arHerfe9oFrop6;li1rtF;a2ed;ti4;eFi0Q;d2QnB;aKelJiHoFumdr3B;neDok0rrFs07ur5;if2S;ghfalut1OspF;an2Q;liZpfA;lInHrF;d05roF;wi3;dy,gi3;f,low0;ainfAener2Jiga22lLoKraHuF;ilFng ho;ty;cGtF;efAis;efA;ne,od;ea2Dob4;aUeOinNlMoHrF;a1TeFoz1K;e2Dq12tfA;oHrF; keeps,eFm6tuna1;g04ign;liF;sh;ag2Zue2;al,i1;dJmGrF;ti7;a7ini8;ne;le; up;bl0i2lBr Fux,vori1;oFreac1F;ff;aOfficie2lNmiMnKre9there4veJxF;a9cess,peHtraGuF;be2Ml0I;!va1E;ct0rt;n,ryday; Fcouragi3tiE;rou1sui1;ne2;abo23dQe18i1;g6sF;t,ygF;oi3;er;aVeNiHoFrea15ue;mina2ne,ubF;le,tfA;dact1Bfficu1OsGvF;erB;creHeas0gruntl0honeDordGtF;a2ress0;er5;et; LadpKfJgene1PliHrang0spe1PtGvoF;ut;ail0ermin0;be1Mca1ghF;tfA;ia2;an;facto;i5magFngeroZs0I;ed,i3;ly;ertaRhief,ivil,oHrF;aFowd0u0H;mp0v02z0;loNmLnGoi3rrFve0P;e9u1I;cre1grIsHtF;emFra0F;po0D;ta2;ue2;mer08pleF;te,x;ni4ss4;in;aPeLizarElJoGrF;and new,isk,okP;gGna fiWttom,urgeoF;is;us;ank,iI;re;autifAhiGlov0nFst,yoG;eVt;nd;ul;ckGnkru0XrrF;en;!wards; priori,b0Nc0Kd0AfraCg05h04lZma06ntiquYpUrOsMttracti07utheLvIwF;aGkF;wa0U;ke,re;ant garGerF;age;de;ntV;leep,tonisF;hi3;ab,bitIroHtiF;fiF;ci4;ga2;raF;ry;pFt;are2etiPrF;oprF;ia1;at0;arIcohGeFiMl,oof;rt;olF;ic;mi3;ead;ainDgressiGoniF;zi3;ve;st;id; MeKuJvF;aGerB;se;nc0;ed;lt;pt,qF;ua1;hoc,infinitF;um;cuGtu4u1;al;ra1;erPlOoMruLsGuF;nda2;e2oGtra9;ct;lu1rbi3;ng;te;pt;aFve;rd;aze,e;ra2;nt|Comparable\\xA60:41;1:4I;2:45;3:4B;4:3X;5:2Y;a4Ob44c3Od3De35f2Rg2Fh24i1Vj1Uk1Rl1Im1Cn16o14p0Tqu0Rr0IsRtKuIvFw7y6za12;ell27ou3;aBe9hi1Yi7r6;o3y;ck0Mde,l6n1ry,se;d,y;a6i4Mt;k,ry;n1Tr6sI;m,y;a7e6ulgar;nge4rda2xi3;gue,in,st;g0n6pco3Mse4;like0ti1;aAen9hi8i7ough,r6;anqu2Qen1ue;dy,g3Ume0ny,r09;ck,n,rs2R;d42se;ll,me,rt,s6wd47;te4;aVcarUeThRiQkin0GlMmKoHpGqua1HtAu7w6;eet,ift;b7dd15per0Hr6;e,re2J;sta2Ht5;aAe9iff,r7u6;pXr1;a6ict,o3;ig3Hn0W;a1ep,rn;le,rk;e24i3Hright0;ci2Aft,l7o6re,ur;n,thi3;emn,id;a6el0ooth;ll,rt;e8i6ow,y;ck,g37m6;!y;ek,nd3F;ck,l0mp5;a6iUort,rill,y;dy,ll0Zrp;cu0Tve0Txy;ce,ed,y;d,fe,int0l1Xv16;aBe9i8o6ude;mantic,o1Ksy,u6;gh,nd;ch,pe,tzy;a6d,mo0J;dy,l;gg7ndom,p6re,w;id;ed;ai2i6;ck,et;aFhoEi1SlCoBr8u6;ny,r6;e,p5;egna2ic7o6;fou00ud;ey,k0;li06or,te1D;a6easa2;in,nt;ny;in4le;dd,f6i0ld,ranR;fi11;aAe8i7o6;b5isy,rm16sy;ce,mb5;a6w;r,t;ive,rr02;aAe8ild,o7u6;nda1Ate;ist,o1;a6ek,llY;n,s0ty;d,tuR;aCeBi9o6ucky;f0Vn7o1Eu6ve0w18y0U;d,sy;e0g;g1Uke0tt5v6;e0i3;an,wd;me,r6te;ge;e7i6;nd;en;ol0ui1P;cy,ll,n6;sBt6;e6ima8;llege2r6;es7media6;te;ti3;ecu6ta2;re;aEeBiAo8u6;ge,m6ng1R;b5id;ll6me0t;ow;gh,l0;a6f04sita2;dy,v6;en0y;nd1Hppy,r6te4;d,sh;aGenFhDiClBoofy,r6;a9e8is0o6ue1E;o6ss;vy;at,en,y;nd,y;ad,ib,ooI;a2d1;a6o6;st0;t5uiY;u1y;aIeeb5iDlat,oAr8u6;ll,n6r14;!ny;aHe6iend0;e,sh;a7r6ul;get4mG;my;erce8n6rm,t;an6e;ciC;! ;le;ir,ke,n0Fr,st,t,ulA;aAerie,mp9sse7v6xtre0Q;il;nti6;al;ty;r7s6;tern,y;ly,th0;aFeCi9r7u6;ll,mb;u6y;nk;r7vi6;ne;e,ty;a6ep,nD;d6f,r;!ly;mp,pp03rk;aHhDlAo8r7u6;dd0r0te;isp,uel;ar6ld,mmon,ol,st0ward0zy;se;e6ou1;a6vW;n,r;ar8e6il0;ap,e6;sy;mi3;gey,lm8r6;e4i3;ful;!i3;aNiLlIoEr8u6;r0sy;ly;aAi7o6;ad,wn;ef,g7llia2;nt;ht;sh,ve;ld,r7un6;cy;ed,i3;ng;a7o6ue;nd,o1;ck,nd;g,tt6;er;d,ld,w1;dy;bsu9ng8we6;so6;me;ry;rd|Adverb\\xA6a07by 05d01eYfShQinPjustOkinda,mMnJoEpCquite,r9s5t2up1very,w0Bye0;p,s; to,wards5;h1o0wiO;o,t6ward;en,us;everal,o0uch;!me1rt0; of;hXtimes,w07;a1e0;alS;ndomRthN;ar excellDer0oint blank; Mhaps;f3n0;ce0ly;! 0;ag00moU; courHten;ewJo0; longEt 0;onHwithstanding;aybe,eanwhiAore0;!ovB;! aboS;deed,steT;en0;ce;or2u0;l9rther0;!moH; 0ev3;examp0good,suF;le;n mas1v0;er;se;e0irect1; 1finite0;ly;ju7trop;far,n0;ow; CbroBd nauseam,gAl5ny2part,side,t 0w3;be5l0mo5wor5;arge,ea4;mo1w0;ay;re;l 1mo0one,ready,so,ways;st;b1t0;hat;ut;ain;ad;lot,posteriori|Expression\\xA6a02b01dXeVfuck,gShLlImHnGoDpBshAu7voi04w3y0;a1eLu0;ck,p;!a,hoo,y;h1ow,t0;af,f;e0oa;e,w;gh,h0;! 0h,m;huh,oh;eesh,hh,it;ff,hew,l0sst;ease,z;h1o0w,y;h,o,ps;!h;ah,ope;eh,mm;m1ol0;!s;ao,fao;a4e2i,mm,oly1urr0;ah;! mo6;e,ll0y;!o;ha0i;!ha;ah,ee,o0rr;l0odbye;ly;e0h,t cetera,ww;k,p;'oh,a0uh;m0ng;mit,n0;!it;ah,oo,ye; 1h0rgh;!em;la|Preposition\\xA6'o,-,aKbHcGdFexcept,fEinDmidPnotwithstandiQoBpRqua,sAt6u3vi2w0;/o,hereMith0;!in,oQ;a,s-a-vis;n1p0;!on;like,til;h0ill,owards;an,r0;ough0u;!oI;ans,ince,o that;',f0n1ut;!f;!to;or,rom;espite,own,u3;hez,irca;ar1e0oAy;low,sides,tween;ri6;',bo7cross,ft6lo5m3propos,round,s1t0;!op;! long 0;as;id0ong0;!st;ng;er;ut|Conjunction\\xA6aEbAcuz,how8in caDno7o6p4supposing,t1vers5wh0yet;eth8ile;h0o;eref9o0;!uC;l0rovided that;us;r,therwi6; matt1r;!ev0;er;e0ut;cau1f0;ore;se;lthou1nd,s 0;far as,if;gh|Determiner\\xA6aAboth,d8e5few,l3mu7neiCown,plenty,some,th2various,wh0;at0ich0;evB;at,e3is,ose;a,e0;!ast,s;a1i6l0nough,very;!se;ch;e0u;!s;!n0;!o0y;th0;er\\\",\\\"conjugations\\\":\\\"t:ake,ook,,,aken|:can,could,can,_|free:_,,,ing|puk:e,,,ing|ar:ise,ose,,,isen|babys:it,at|:be,was,is,am,been|:is,was,is,being|beat:_,,,ing,en|beg:in,an,,inning,un|ban:_,ned,,ning|bet:_,,,,_|bit:e,_,,ing,ten|ble:ed,d,,,d|bre:ed,d|br:ing,ought,,,ought|broadcast:_,_|buil:d,t,,,t|b:uy,ought,,,ought|cho:ose,se,,osing,sen|cost:_,_|deal:_,t,,,t|d:ie,ied,,ying|d:ig,ug,,igging,ug|dr:aw,ew,,,awn|dr:ink,ank,,,unk|dr:ive,ove,,iving,iven|:eat,ate,,eating,eaten|f:all,ell,,,allen|fe:ed,d,,,d|fe:el,lt|f:ight,ought,,,ought|f:ind,ound|fl:y,ew,,,own|bl:ow,ew,,,own|forb:id,ade|edit:_,,,ing|forg:et,ot,,eting,otten|forg:ive,ave,,iving,iven|fr:eeze,oze,,eezing,ozen|g:et,ot|g:ive,ave,,iving,iven|:go,went,goes,,gone|h:ang,ung,,,ung|ha:ve,d,s,ving,d|hear:_,d,,,d|hid:e,_,,,den|h:old,eld,,,eld|hurt:_,_,,,_|la:y,id,,,id|le:ad,d,,,d|le:ave,ft,,,ft|l:ie,ay,,ying|li:ght,t,,,t|los:e,t,,ing|ma:ke,de,,,de|mean:_,t,,,t|me:et,t,,eting,t|pa:y,id,,,id|read:_,_,,,_|r:ing,ang,,,ung|r:ise,ose,,ising,isen|r:un,an,,unning,un|sa:y,id,ys,,id|s:ee,aw,,eeing,een|s:ell,old,,,old|sh:ine,one,,,one|sho:ot,t,,,t|show:_,ed|s:ing,ang,,,ung|s:ink,ank|s:it,at|slid:e,_,,,_|sp:eak,oke,,,oken|sp:in,un,,inning,un|st:and,ood|st:eal,ole|st:ick,uck|st:ing,ung|:stream,,,,|str:ike,uck,,iking|sw:ear,ore|sw:im,am,,imming|sw:ing,ung|t:each,aught,eaches|t:ear,ore|t:ell,old|th:ink,ought|underst:and,ood|w:ake,oke|w:ear,ore|w:in,on,,inning|withdr:aw,ew|wr:ite,ote,,iting,itten|t:ie,ied,,ying|ski:_,ied|:boil,,,,|miss:_,,_|:act,,,,|compet:e,ed,,ing|:being,were,are,are|impl:y,ied,ies|ic:e,ed,,ing|develop:_,ed,,ing|wait:_,ed,,ing|aim:_,ed,,ing|spil:l,t,,,led|drop:_,ped,,ping|log:_,ged,,ging|rub:_,bed,,bing|smash:_,,es|egg:_,ed|suit:_,ed,,ing|age:_,d,s,ing|shed:_,_,s,ding|br:eak,oke|ca:tch,ught|d:o,id,oes|b:ind,ound|spread:_,_|become:_,,,,_|ben:d,,,,t|br:ake,,,,oken|burn:_,,,,ed|burst:_,,,,_|cl:ing,,,,ung|c:ome,ame,,,ome|cre:ep,,,,pt|cut:_,,,,_|dive:_,,,,d|dream:_,,,,t|fle:e,,,eing,d|fl:ing,,,,ung|got:_,,,,ten|grow:_,,,,n|hit:_,,,,_|ke:ep,,,,pt|kne:el,,,,lt|know:_,,,,n|leap:_,,,,t|len:d,,,,t|lo:ose,,,,st|prove:_,,,,n|put:_,,,,_|quit:_,,,,_|rid:e,,,,den|s:eek,,,,ought|sen:d,,,,t|set:_,,,,_|sew:_,,,,n|shake:_,,,,n|shave:_,,,,d|shut:_,,,,_|s:eat,,,,at|sla:y,,,,in|sle:ep,,,,pt|sn:eak,,,,uck|spe:ed,,,,d|spen:d,,,,t|sp:it,,,,at|split:_,,,,_|spr:ing,,,,ung|st:ink,unk,,,unk|strew:_,,,,n|sw:are,,,,orn|swe:ep,,,,pt|thrive:_,,,,d|undergo:_,,,,ne|upset:_,,,,_|w:eave,,,,oven|we:ep,,,,pt|w:ind,,,,ound|wr:ing,,,,ung\\\",\\\"plurals\\\":\\\"addend|um|a,alga|e,alumna|e,alumn|us|i,appendi|x|ces,avocado|s,bacill|us|i,barracks|,beau|x,bus|es,cact|us|i,chateau|x,analys|is|es,diagnos|is|es,parenthes|is|es,prognos|is|es,synops|is|es,thes|is|es,child|ren,circus|es,clothes|,corp|us|ora,criteri|on|a,curricul|um|a,database|s,deer|,echo|es,embargo|es,epoch|s,f|oot|eet,gen|us|era,g|oose|eese,halo|s,hippopotam|us|i,ind|ex|ices,larva|e,lea|f|ves,librett|o|i,loa|f|ves,m|an|en,matri|x|ces,memorand|um|a,modul|us|i,mosquito|es,move|s,op|us|era,ov|um|a,ox|en,pe|rson|ople,phenomen|on|a,quiz|zes,radi|us|i,referend|um|a,rodeo|s,sex|es,shoe|s,sombrero|s,stomach|s,syllab|us|i,tableau|x,thie|f|ves,t|ooth|eeth,tornado|s,tuxedo|s,zero|s\\\",\\\"patterns\\\":{\\\"Person\\\":[\\\"master of #Noun\\\",\\\"captain of the #Noun\\\"]},\\\"regex\\\":{\\\"HashTag\\\":[\\\"^#[a-z]+\\\"],\\\"Gerund\\\":[\\\"^[a-z]+n['\\u2019]$\\\"],\\\"PhoneNumber\\\":[\\\"^[0-9]{3}-[0-9]{4}$\\\",\\\"^[0-9]{3}[ -]?[0-9]{3}-[0-9]{4}$\\\"],\\\"Time\\\":[\\\"^[012]?[0-9](:[0-5][0-9])(:[0-5][0-9])$\\\",\\\"^[012]?[0-9](:[0-5][0-9])?(:[0-5][0-9])? ?(am|pm)$\\\",\\\"^[012]?[0-9](:[0-5][0-9])(:[0-5][0-9])? ?(am|pm)?$\\\",\\\"^[PMCE]ST$\\\",\\\"^utc ?[+-]?[0-9]+?$\\\",\\\"^[a-z0-9]*? o'?clock$\\\"],\\\"Date\\\":[\\\"^[0-9]{1,4}-[0-9]{1,2}-[0-9]{1,4}$\\\",\\\"^[0-9]{1,4}/[0-9]{1,2}/[0-9]{1,4}$\\\"],\\\"Money\\\":[\\\"^[-+]?[$\\u20AC\\xA5\\xA3][0-9]+(.[0-9]{1,2})?$\\\",\\\"^[-+]?[$\\u20AC\\xA5\\xA3][0-9]{1,3}(,[0-9]{3})+(.[0-9]{1,2})?$\\\"],\\\"Value\\\":[\\\"^[-+]?[$\\u20AC\\xA5\\xA3][0-9]+(.[0-9]{1,2})?$\\\",\\\"^[-+]?[$\\u20AC\\xA5\\xA3][0-9]{1,3}(,[0-9]{3})+(.[0-9]{1,2})?$\\\",\\\"^[0-9.]{1,2}[-\\u2013][0-9]{1,2}$\\\"],\\\"NumberRange\\\":[\\\"^[0-9.]{1,4}(st|nd|rd|th)?[-\\u2013][0-9.]{1,4}(st|nd|rd|th)?$\\\",\\\"^[0-9.]{1,2}[-\\u2013][0-9]{1,2}$\\\"],\\\"NiceNumber\\\":[\\\"^[-+]?[0-9.,]{1,3}(,[0-9.,]{3})+(.[0-9]+)?$\\\"],\\\"NumericValue\\\":[\\\"^[-+]?[0-9]+(.[0-9]+)?$\\\",\\\"^.?[0-9]+([0-9,.]+)?%$\\\"],\\\"Percent\\\":[\\\"^.?[0-9]+([0-9,.]+)?%$\\\"],\\\"Cardinal\\\":[\\\"^.?[0-9]+([0-9,.]+)?%$\\\"],\\\"Fraction\\\":[\\\"^[0-9]{1,4}/[0-9]{1,4}$\\\"],\\\"LastName\\\":[\\\"^ma?c'.*\\\",\\\"^o'[drlkn].*\\\"]}}\";\n\n},{}],209:[function(_dereq_,module,exports){\n'use strict';\n\nvar conjugate = _dereq_('../subset/verbs/methods/conjugate/faster.js'); //extend our current irregular conjugations, overwrite if exists\n//also, map the irregulars for easy infinitive lookup - {bought: 'buy'}\n\n\nvar addConjugations = function addConjugations(obj) {\n  var _this = this;\n\n  Object.keys(obj).forEach(function (inf) {\n    _this.conjugations[inf] = _this.conjugations[inf] || {}; //add it to the lexicon\n\n    _this.words[inf] = _this.words[inf] || 'Infinitive';\n    Object.keys(obj[inf]).forEach(function (tag) {\n      var word = obj[inf][tag]; //add this to our conjugations\n\n      _this.conjugations[inf][tag] = word; //add it to the lexicon, too\n\n      _this.words[word] = _this.words[word] || tag; //also denormalize to cache.toInfinitive\n\n      _this.cache.toInfinitive[obj[inf][tag]] = inf;\n    }); //guess the other conjugations\n\n    var forms = conjugate(inf, _this);\n    Object.keys(forms).forEach(function (k) {\n      var word = forms[k];\n\n      if (_this.words.hasOwnProperty(word) === false) {\n        _this.words[word] = k;\n      }\n    });\n  });\n  return obj;\n};\n\nmodule.exports = addConjugations;\n\n},{\"../subset/verbs/methods/conjugate/faster.js\":79}],210:[function(_dereq_,module,exports){\n\"use strict\";\n\n//\nvar addPatterns = function addPatterns(obj) {\n  var _this = this;\n\n  Object.keys(obj).forEach(function (k) {\n    _this.patterns[k] = obj[k];\n  });\n  return obj;\n};\n\nmodule.exports = addPatterns;\n\n},{}],211:[function(_dereq_,module,exports){\n'use strict'; //put singular->plurals in world, the reverse in cache,\n//and both forms in the lexicon\n\nvar addPlurals = function addPlurals(obj) {\n  var _this = this;\n\n  Object.keys(obj).forEach(function (sing) {\n    var plur = obj[sing];\n    _this.plurals[sing] = plur; //add them both to the lexicon\n\n    _this.words[plur] = _this.words[plur] || 'Plural';\n    _this.words[sing] = _this.words[sing] || 'Singular'; //denormalize them in cache.toPlural\n\n    _this.cache.toSingular[plur] = sing;\n  });\n  return obj;\n};\n\nmodule.exports = addPlurals;\n\n},{}],212:[function(_dereq_,module,exports){\n\"use strict\";\n\n//\nvar addRegex = function addRegex(obj) {\n  var _this = this;\n\n  Object.keys(obj).forEach(function (k) {\n    _this.regex.push({\n      reg: new RegExp(k, 'i'),\n      tag: obj[k]\n    });\n  });\n};\n\nmodule.exports = addRegex;\n\n},{}],213:[function(_dereq_,module,exports){\n'use strict'; //add 'downward' tags (that immediately depend on this one)\n\nvar addDownword = _dereq_('../tags/addDownward'); //extend our known tagset with these new ones\n\n\nvar addTags = function addTags(tags) {\n  var _this = this;\n\n  Object.keys(tags).forEach(function (tag) {\n    var obj = tags[tag];\n    obj.notA = obj.notA || [];\n    obj.downward = obj.downward || [];\n    _this.tags[tag] = obj;\n  });\n  addDownword(this.tags);\n  return tags;\n};\n\nmodule.exports = addTags;\n\n},{\"../tags/addDownward\":135}],214:[function(_dereq_,module,exports){\n'use strict';\n\nvar normalize = _dereq_('../term/methods/normalize/normalize').normalize;\n\nvar inflect = _dereq_('../subset/nouns/methods/pluralize');\n\nvar conjugate = _dereq_('../subset/verbs/methods/conjugate/faster.js');\n\nvar adjFns = _dereq_('../subset/adjectives/methods');\n\nvar wordReg = / /;\n\nvar cleanUp = function cleanUp(str) {\n  str = normalize(str); //extra whitespace\n\n  str = str.replace(/\\s+/, ' '); //remove sentence-punctuaion too\n\n  str = str.replace(/[.\\?,;\\!]/g, '');\n  return str;\n}; //\n\n\nvar addWords = function addWords(words) {\n  var _this = this;\n\n  //go through each word\n  Object.keys(words).forEach(function (word) {\n    var tag = words[word];\n    word = cleanUp(word);\n    _this.words[word] = tag; //add it to multi-word cache,\n\n    if (wordReg.test(word) === true) {\n      var arr = word.split(wordReg);\n      _this.cache.firstWords[arr[0]] = true;\n    } //turn singulars into plurals\n\n\n    if (tag === 'Singular') {\n      var plural = inflect(word, {});\n\n      if (plural && plural !== word) {\n        _this.words[plural] = 'Plural';\n      }\n\n      return;\n    } //turn infinitives into all conjugations\n\n\n    if (tag === 'Infinitive') {\n      var conj = conjugate(word, _this);\n      Object.keys(conj).forEach(function (k) {\n        _this.words[conj[k]] = k;\n      });\n      return;\n    } //phrasals like 'pull out' get conjugated too\n\n\n    if (tag === 'PhrasalVerb') {\n      var _arr = word.split(/ /);\n\n      var _conj = conjugate(_arr[0], _this);\n\n      Object.keys(_conj).forEach(function (k) {\n        var form = _conj[k] + ' ' + _arr[1];\n        _this.words[form] = 'PhrasalVerb'; //add it to cache, too\n\n        _this.cache.firstWords[_conj[k]] = true;\n      });\n      return;\n    } //turn some adjectives into superlatives\n\n\n    if (tag === 'Comparable') {\n      var comp = adjFns.toComparative(word);\n\n      if (comp && word !== comp) {\n        _this.words[comp] = 'Comparative';\n      }\n\n      var supr = adjFns.toSuperlative(word);\n\n      if (supr && word !== supr) {\n        _this.words[supr] = 'Superlative';\n      }\n    }\n  });\n  return words;\n};\n\nmodule.exports = addWords;\n\n},{\"../subset/adjectives/methods\":11,\"../subset/nouns/methods/pluralize\":44,\"../subset/verbs/methods/conjugate/faster.js\":79,\"../term/methods/normalize/normalize\":149}],215:[function(_dereq_,module,exports){\n'use strict'; // const addWords = require('./addWords');\n\nvar fns = _dereq_('../fns');\n\nvar data = _dereq_('./_data');\n\nvar moreData = _dereq_('./more-data');\n\nvar tags = _dereq_('../tags');\n\nvar unpack = _dereq_('./unpack');\n\nvar addTags = _dereq_('./addTags');\n\nvar addWords = _dereq_('./addWords');\n\nvar addRegex = _dereq_('./addRegex');\n\nvar addConjugations = _dereq_('./addConjugations');\n\nvar addPatterns = _dereq_('./addPatterns');\n\nvar addPlurals = _dereq_('./addPlurals');\n\nvar misc = _dereq_('./more-data/misc'); //lazier/faster object-merge\n\n\nvar extend = function extend(main, obj) {\n  var keys = Object.keys(obj);\n\n  for (var i = 0; i < keys.length; i++) {\n    main[keys[i]] = obj[keys[i]];\n  }\n\n  return main;\n}; //class World\n\n\nvar World = function World() {\n  this.words = {};\n  this.tags = tags;\n  this.regex = [];\n  this.patterns = {};\n  this.conjugations = {};\n  this.plurals = {}; //denormalized data for faster-lookups\n\n  this.cache = {\n    firstWords: {},\n    toInfinitive: {},\n    toSingular: {}\n  };\n};\n\nWorld.prototype.addTags = addTags;\nWorld.prototype.addWords = addWords;\nWorld.prototype.addRegex = addRegex;\nWorld.prototype.addConjugations = addConjugations;\nWorld.prototype.addPlurals = addPlurals;\nWorld.prototype.addPatterns = addPatterns; //make a no-reference copy of all the data\n\nWorld.prototype.clone = function () {\n  var _this = this;\n\n  var w2 = new World();\n  ['words', 'firstWords', 'tagset', 'regex', 'patterns', 'conjugations', 'plurals'].forEach(function (k) {\n    if (_this[k]) {\n      w2[k] = fns.copy(_this[k]);\n    }\n  });\n  return w2;\n}; //add all the things, in all the places\n\n\nWorld.prototype.plugin = function (obj) {\n  //untangle compromise-plugin\n  obj = unpack(obj); //add all-the-things to this world object\n  //(order may matter)\n\n  if (obj.tags) {\n    this.addTags(obj.tags);\n  }\n\n  if (obj.regex) {\n    this.addRegex(obj.regex);\n  }\n\n  if (obj.patterns) {\n    this.addPatterns(obj.patterns);\n  }\n\n  if (obj.conjugations) {\n    this.addConjugations(obj.conjugations);\n  }\n\n  if (obj.plurals) {\n    this.addPlurals(obj.plurals);\n  }\n\n  if (obj.words) {\n    this.addWords(obj.words);\n  }\n}; //export a default world\n\n\nvar w = new World();\nw.plugin(data);\nw.addWords(misc);\nmoreData.forEach(function (obj) {\n  extend(w.words, obj);\n});\nmodule.exports = {\n  w: w,\n  reBuild: function reBuild() {\n    //export a default world\n    var w2 = new World();\n    w2.plugin(data);\n    w2.addWords(misc);\n    moreData.forEach(function (obj) {\n      extend(w2.words, obj);\n    });\n    return w2;\n  }\n};\n\n},{\"../fns\":3,\"../tags\":137,\"./_data\":208,\"./addConjugations\":209,\"./addPatterns\":210,\"./addPlurals\":211,\"./addRegex\":212,\"./addTags\":213,\"./addWords\":214,\"./more-data\":217,\"./more-data/misc\":219,\"./unpack\":223}],216:[function(_dereq_,module,exports){\n//these are common word shortenings used in the lexicon and sentence segmentation methods\n//there are all nouns,or at the least, belong beside one.\n\"use strict\"; //common abbreviations\n\nvar compact = {\n  Noun: [\"arc\", \"al\", \"exp\", \"fy\", \"pd\", \"pl\", \"plz\", \"tce\", \"bl\", \"ma\", \"ba\", \"lit\", \"ex\", \"eg\", \"ie\", \"ca\", \"cca\", \"vs\", \"etc\", \"esp\", \"ft\", //these are too ambiguous\n  \"bc\", \"ad\", \"md\", \"corp\", \"col\"],\n  Organization: [\"dept\", \"univ\", \"assn\", \"bros\", \"inc\", \"ltd\", \"co\", //proper nouns with exclamation marks\n  \"yahoo\", \"joomla\", \"jeopardy\"],\n  Place: [\"rd\", \"st\", \"dist\", \"mt\", \"ave\", \"blvd\", \"cl\", \"ct\", \"cres\", \"hwy\", //states\n  \"ariz\", \"cal\", \"calif\", \"colo\", \"conn\", \"fla\", \"fl\", \"ga\", \"ida\", \"ia\", \"kan\", \"kans\", \"minn\", \"neb\", \"nebr\", \"okla\", \"penna\", \"penn\", \"pa\", \"dak\", \"tenn\", \"tex\", \"ut\", \"vt\", \"va\", \"wis\", \"wisc\", \"wy\", \"wyo\", \"usafa\", \"alta\", \"ont\", \"que\", \"sask\"],\n  Month: [\"jan\", \"feb\", \"mar\", \"apr\", \"jun\", \"jul\", \"aug\", \"sep\", \"sept\", \"oct\", \"nov\", \"dec\"],\n  Date: [\"circa\"],\n  //Honorifics\n  Honorific: [\"adj\", \"adm\", \"adv\", \"asst\", \"atty\", \"bldg\", \"brig\", \"capt\", \"cmdr\", \"comdr\", \"cpl\", \"det\", \"dr\", \"esq\", \"gen\", \"gov\", \"hon\", \"jr\", \"llb\", \"lt\", \"maj\", \"messrs\", \"mister\", \"mlle\", \"mme\", \"mr\", \"mrs\", \"ms\", \"mstr\", \"op\", \"ord\", \"phd\", \"prof\", \"pvt\", \"rep\", \"reps\", \"res\", \"rev\", \"sen\", \"sens\", \"sfc\", \"sgt\", \"sir\", \"sr\", \"supt\", \"surg\" //miss\n  //misses\n  ],\n  Value: [\"no\"]\n}; //unpack the compact terms into the misc lexicon..\n\nvar abbreviations = {};\nvar keys = Object.keys(compact);\n\nfor (var i = 0; i < keys.length; i++) {\n  var arr = compact[keys[i]];\n\n  for (var i2 = 0; i2 < arr.length; i2++) {\n    abbreviations[arr[i2]] = [keys[i], \"Abbreviation\"];\n  }\n}\n\nmodule.exports = abbreviations;\n\n},{}],217:[function(_dereq_,module,exports){\n\"use strict\";\n\nmodule.exports = [_dereq_('./abbreviations'), _dereq_('./irregularAdjectives').lexicon, _dereq_('./numbers').lexicon, _dereq_('./orgWords')];\n\n},{\"./abbreviations\":216,\"./irregularAdjectives\":218,\"./numbers\":220,\"./orgWords\":221}],218:[function(_dereq_,module,exports){\n'use strict'; //adjectives that have irregular conjugations to adverb, comparative, and superlative forms\n\nvar toAdverb = {\n  bad: 'badly',\n  best: 'best',\n  early: 'early',\n  fast: 'fast',\n  good: 'well',\n  hard: 'hard',\n  icy: 'icily',\n  idle: 'idly',\n  late: 'late',\n  latter: 'latter',\n  little: 'little',\n  long: 'long',\n  low: 'low',\n  male: 'manly',\n  public: 'publicly',\n  simple: 'simply',\n  single: 'singly',\n  special: 'especially',\n  straight: 'straight',\n  vague: 'vaguely',\n  well: 'well',\n  whole: 'wholly',\n  wrong: 'wrong'\n};\nvar toComparative = {\n  grey: 'greyer',\n  gray: 'grayer',\n  green: 'greener',\n  yellow: 'yellower',\n  red: 'redder',\n  good: 'better',\n  well: 'better',\n  bad: 'worse',\n  sad: 'sadder',\n  big: 'bigger'\n};\nvar toSuperlative = {\n  nice: 'nicest',\n  late: 'latest',\n  hard: 'hardest',\n  inner: 'innermost',\n  outer: 'outermost',\n  far: 'furthest',\n  worse: 'worst',\n  bad: 'worst',\n  good: 'best',\n  big: 'biggest',\n  large: 'largest'\n};\n\nvar combine = function combine(lexicon, obj, tag) {\n  var keys = Object.keys(obj);\n\n  for (var i = 0; i < keys.length; i++) {\n    lexicon[keys[i]] = 'Comparable';\n\n    if (lexicon[obj[keys[i]]] === undefined) {\n      lexicon[obj[keys[i]]] = tag;\n    }\n  }\n\n  return lexicon;\n};\n\nvar lexicon = combine({}, toSuperlative, 'Superlative');\nlexicon = combine(lexicon, toComparative, 'Comparative');\nlexicon = combine(lexicon, toAdverb, 'Adverb');\nmodule.exports = {\n  lexicon: lexicon,\n  toAdverb: toAdverb,\n  toComparative: toComparative,\n  toSuperlative: toSuperlative\n};\n\n},{}],219:[function(_dereq_,module,exports){\n\"use strict\";\n\n//words that can't be compressed, for whatever reason\nmodule.exports = {\n  '20th century fox': 'Organization',\n  '3m': 'Organization',\n  '7 eleven': 'Organization',\n  '7-eleven': 'Organization',\n  'g8': 'Organization',\n  'motel 6': 'Organization',\n  'vh1': 'Organization',\n  'q1': 'Date',\n  'q2': 'Date',\n  'q3': 'Date',\n  'q4': 'Date',\n  //misc\n  'records': 'Plural',\n  '&': 'Conjunction'\n};\n\n},{}],220:[function(_dereq_,module,exports){\n'use strict';\n\nvar cardinal = {\n  ones: {\n    // 'a': 1,\n    zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9\n  },\n  teens: {\n    ten: 10,\n    eleven: 11,\n    twelve: 12,\n    thirteen: 13,\n    fourteen: 14,\n    fifteen: 15,\n    sixteen: 16,\n    seventeen: 17,\n    eighteen: 18,\n    nineteen: 19\n  },\n  tens: {\n    twenty: 20,\n    thirty: 30,\n    forty: 40,\n    fourty: 40,\n    //support typo\n    fifty: 50,\n    sixty: 60,\n    seventy: 70,\n    eighty: 80,\n    ninety: 90\n  },\n  multiples: {\n    hundred: 1e2,\n    thousand: 1e3,\n    // grand: 1e3,\n    million: 1e6,\n    billion: 1e9,\n    trillion: 1e12,\n    quadrillion: 1e15,\n    quintillion: 1e18,\n    sextillion: 1e21,\n    septillion: 1e24\n  }\n};\nvar ordinal = {\n  ones: {\n    zeroth: 0,\n    first: 1,\n    second: 2,\n    third: 3,\n    fourth: 4,\n    fifth: 5,\n    sixth: 6,\n    seventh: 7,\n    eighth: 8,\n    ninth: 9\n  },\n  teens: {\n    tenth: 10,\n    eleventh: 11,\n    twelfth: 12,\n    thirteenth: 13,\n    fourteenth: 14,\n    fifteenth: 15,\n    sixteenth: 16,\n    seventeenth: 17,\n    eighteenth: 18,\n    nineteenth: 19\n  },\n  tens: {\n    twentieth: 20,\n    thirtieth: 30,\n    fortieth: 40,\n    fourtieth: 40,\n    //support typo\n    fiftieth: 50,\n    sixtieth: 60,\n    seventieth: 70,\n    eightieth: 80,\n    ninetieth: 90\n  },\n  multiples: {\n    hundredth: 1e2,\n    thousandth: 1e3,\n    millionth: 1e6,\n    billionth: 1e9,\n    trillionth: 1e12,\n    quadrillionth: 1e15,\n    quintillionth: 1e18,\n    sextillionth: 1e21,\n    septillionth: 1e24\n  }\n}; //used for the units\n\nvar prefixes = {\n  yotta: 1,\n  zetta: 1,\n  exa: 1,\n  peta: 1,\n  tera: 1,\n  giga: 1,\n  mega: 1,\n  kilo: 1,\n  hecto: 1,\n  deka: 1,\n  deci: 1,\n  centi: 1,\n  milli: 1,\n  micro: 1,\n  nano: 1,\n  pico: 1,\n  femto: 1,\n  atto: 1,\n  zepto: 1,\n  yocto: 1,\n  square: 1,\n  cubic: 1,\n  quartic: 1\n}; //create an easy mapping between ordinal-cardinal\n\nvar toOrdinal = {};\nvar toCardinal = {};\nvar lexicon = {};\nObject.keys(ordinal).forEach(function (k) {\n  var ord = Object.keys(ordinal[k]);\n  var card = Object.keys(cardinal[k]);\n\n  for (var i = 0; i < card.length; i++) {\n    toOrdinal[card[i]] = ord[i];\n    toCardinal[ord[i]] = card[i];\n    lexicon[ord[i]] = ['Ordinal', 'TextValue'];\n    lexicon[card[i]] = ['Cardinal', 'TextValue'];\n\n    if (k === 'multiples') {\n      lexicon[ord[i]].push('Multiple');\n      lexicon[card[i]].push('Multiple');\n    }\n  }\n});\nmodule.exports = {\n  toOrdinal: toOrdinal,\n  toCardinal: toCardinal,\n  cardinal: cardinal,\n  ordinal: ordinal,\n  prefixes: prefixes,\n  lexicon: lexicon\n};\n\n},{}],221:[function(_dereq_,module,exports){\n\"use strict\";\n\n//nouns that also signal the title of an unknown organization\n//todo remove/normalize plural forms\nvar orgWords = ['administration', 'agence', 'agences', 'agencies', 'agency', 'airlines', 'airways', 'army', 'assoc', 'associates', 'association', 'assurance', 'authority', 'autorite', 'aviation', 'bank', 'banque', 'board', 'boys', 'brands', 'brewery', 'brotherhood', 'brothers', 'building society', 'bureau', 'cafe', 'caisse', 'capital', 'care', 'cathedral', 'center', 'central bank', 'centre', 'chemicals', 'choir', 'chronicle', 'church', 'circus', 'clinic', 'clinique', 'club', 'co', 'coalition', 'coffee', 'collective', 'college', 'commission', 'committee', 'communications', 'community', 'company', 'comprehensive', 'computers', 'confederation', 'conference', 'conseil', 'consulting', 'containers', 'corporation', 'corps', 'corp', 'council', 'crew', 'daily news', 'data', 'departement', 'department', 'department store', 'departments', 'design', 'development', 'directorate', 'division', 'drilling', 'education', 'eglise', 'electric', 'electricity', 'energy', 'ensemble', 'enterprise', 'enterprises', 'entertainment', 'estate', 'etat', 'evening news', 'faculty', 'federation', 'financial', 'fm', 'foundation', 'fund', 'gas', 'gazette', 'girls', 'government', 'group', 'guild', 'health authority', 'herald', 'holdings', 'hospital', 'hotel', 'hotels', 'inc', 'industries', 'institut', 'institute', 'institute of technology', 'institutes', 'insurance', 'international', 'interstate', 'investment', 'investments', 'investors', 'journal', 'laboratory', 'labs', // 'law',\n'liberation army', 'limited', 'local authority', 'local health authority', 'machines', 'magazine', 'management', 'marine', 'marketing', 'markets', 'media', 'memorial', 'mercantile exchange', 'ministere', 'ministry', 'military', 'mobile', 'motor', 'motors', 'musee', 'museum', // 'network',\n'news', 'news service', 'observatory', 'office', 'oil', 'optical', 'orchestra', 'organization', 'partners', 'partnership', // 'party',\n'people\\'s party', 'petrol', 'petroleum', 'pharmacare', 'pharmaceutical', 'pharmaceuticals', 'pizza', 'plc', 'police', 'polytechnic', 'post', 'power', 'press', 'productions', 'quartet', 'radio', 'regional authority', 'regional health authority', 'reserve', 'resources', 'restaurant', 'restaurants', 'savings', 'school', 'securities', 'service', 'services', 'social club', 'societe', 'society', 'sons', 'standard', 'state police', 'state university', 'stock exchange', 'subcommittee', 'syndicat', 'systems', 'telecommunications', 'telegraph', 'television', 'times', 'tribunal', 'tv', 'union', 'university', 'utilities', 'workers'];\nmodule.exports = orgWords.reduce(function (h, str) {\n  h[str] = 'Noun';\n  return h;\n}, {});\n\n},{}],222:[function(_dereq_,module,exports){\n'use strict'; //supported verb forms:\n\nvar forms = [null, 'PastTense', 'PresentTense', 'Gerund', 'Participle']; //\n\nvar unpackVerbs = function unpackVerbs(str) {\n  var verbs = str.split('|');\n  return verbs.reduce(function (h, s) {\n    var parts = s.split(':');\n    var prefix = parts[0];\n    var ends = parts[1].split(','); //grab the infinitive\n\n    var inf = prefix + ends[0];\n\n    if (ends[0] === '_') {\n      inf = prefix;\n    }\n\n    h[inf] = {}; //we did the infinitive, now do the rest:\n\n    for (var i = 1; i < forms.length; i++) {\n      var word = parts[0] + ends[i];\n\n      if (ends[i] === '_') {\n        word = parts[0];\n      }\n\n      if (ends[i]) {\n        h[inf][forms[i]] = word;\n      }\n    }\n\n    return h;\n  }, {});\n};\n\nmodule.exports = unpackVerbs;\n\n},{}],223:[function(_dereq_,module,exports){\n'use strict';\n\nvar unpack = {\n  words: _dereq_('efrt-unpack'),\n  plurals: _dereq_('./plurals'),\n  conjugations: _dereq_('./conjugations'),\n  keyValue: _dereq_('./key-value')\n};\n/*\n == supported plugin fields ==\n  name\n  words        - efrt packed\n  tags         - stringified\n  regex        - key-value\n  patterns     - key-value\n  plurals      - plural-unpack\n  conjugations - conjugation-unpack\n*/\n\nvar unpackPlugin = function unpackPlugin(str) {\n  var obj = str;\n\n  if (typeof str === 'string') {\n    obj = JSON.parse(str);\n  } //words is packed with efrt\n\n\n  if (obj.words && typeof obj.words === 'string') {\n    obj.words = unpack.words(obj.words);\n  } //patterns is pivoted as key-value\n\n\n  if (obj.patterns) {\n    obj.patterns = unpack.keyValue(obj.patterns);\n  } //regex, too\n\n\n  if (obj.regex) {\n    obj.regex = unpack.keyValue(obj.regex);\n  } //plurals is packed in a ad-hoc way\n\n\n  if (obj.plurals && typeof obj.plurals === 'string') {\n    obj.plurals = unpack.plurals(obj.plurals);\n  } //conjugations is packed in another ad-hoc way\n\n\n  if (obj.conjugations && typeof obj.conjugations === 'string') {\n    obj.conjugations = unpack.conjugations(obj.conjugations);\n  }\n\n  return obj;\n};\n\nmodule.exports = unpackPlugin;\n\n},{\"./conjugations\":222,\"./key-value\":224,\"./plurals\":225,\"efrt-unpack\":1}],224:[function(_dereq_,module,exports){\n'use strict'; //pivot k:[val,val] ->  val:k, val:k\n\nvar keyValue = function keyValue(obj) {\n  var keys = Object.keys(obj);\n  var isCompressed = true;\n\n  if (keys[0] && typeof obj[keys[0]] === 'string') {\n    isCompressed = false;\n  }\n\n  return keys.reduce(function (h, k) {\n    if (isCompressed === true) {\n      var arr = obj[k];\n      arr.forEach(function (a) {\n        if (h[a]) {\n          //convert val to an array\n          if (typeof h[a] === 'string') {\n            h[a] = [h[a]];\n          } //add it\n\n\n          h[a].push(k);\n        } else {\n          h[a] = k;\n        }\n      });\n    } else {\n      h[k] = obj[k];\n    }\n\n    return h;\n  }, {});\n};\n\nmodule.exports = keyValue;\n\n},{}],225:[function(_dereq_,module,exports){\n'use strict';\n\nvar unpackPlurals = function unpackPlurals(str) {\n  return str.split(/,/g).reduce(function (h, s) {\n    var arr = s.split(/\\|/g);\n\n    if (arr.length === 3) {\n      h[arr[0] + arr[1]] = arr[0] + arr[2];\n    } else if (arr.length === 2) {\n      h[arr[0]] = arr[0] + arr[1];\n    } else {\n      h[arr[0]] = arr[0];\n    }\n\n    return h;\n  }, {});\n};\n\nmodule.exports = unpackPlurals;\n\n},{}]},{},[4])(4)\n});\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack://mispell/./node_modules/compromise/builds/compromise.js?");

/***/ }),

/***/ "./node_modules/pluralize/pluralize.js":
/*!*********************************************!*\
  !*** ./node_modules/pluralize/pluralize.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* global define */\n\n(function (root, pluralize) {\n  /* istanbul ignore else */\n  if (true) {\n    // Node.\n    module.exports = pluralize();\n  } else {}\n})(this, function () {\n  // Rule storage - pluralize and singularize need to be run sequentially,\n  // while other rules can be optimized using an object for instant lookups.\n  var pluralRules = [];\n  var singularRules = [];\n  var uncountables = {};\n  var irregularPlurals = {};\n  var irregularSingles = {};\n\n  /**\n   * Sanitize a pluralization rule to a usable regular expression.\n   *\n   * @param  {(RegExp|string)} rule\n   * @return {RegExp}\n   */\n  function sanitizeRule (rule) {\n    if (typeof rule === 'string') {\n      return new RegExp('^' + rule + '$', 'i');\n    }\n\n    return rule;\n  }\n\n  /**\n   * Pass in a word token to produce a function that can replicate the case on\n   * another word.\n   *\n   * @param  {string}   word\n   * @param  {string}   token\n   * @return {Function}\n   */\n  function restoreCase (word, token) {\n    // Tokens are an exact match.\n    if (word === token) return token;\n\n    // Upper cased words. E.g. \"HELLO\".\n    if (word === word.toUpperCase()) return token.toUpperCase();\n\n    // Title cased words. E.g. \"Title\".\n    if (word[0] === word[0].toUpperCase()) {\n      return token.charAt(0).toUpperCase() + token.substr(1).toLowerCase();\n    }\n\n    // Lower cased words. E.g. \"test\".\n    return token.toLowerCase();\n  }\n\n  /**\n   * Interpolate a regexp string.\n   *\n   * @param  {string} str\n   * @param  {Array}  args\n   * @return {string}\n   */\n  function interpolate (str, args) {\n    return str.replace(/\\$(\\d{1,2})/g, function (match, index) {\n      return args[index] || '';\n    });\n  }\n\n  /**\n   * Replace a word using a rule.\n   *\n   * @param  {string} word\n   * @param  {Array}  rule\n   * @return {string}\n   */\n  function replace (word, rule) {\n    return word.replace(rule[0], function (match, index) {\n      var result = interpolate(rule[1], arguments);\n\n      if (match === '') {\n        return restoreCase(word[index - 1], result);\n      }\n\n      return restoreCase(match, result);\n    });\n  }\n\n  /**\n   * Sanitize a word by passing in the word and sanitization rules.\n   *\n   * @param  {string}   token\n   * @param  {string}   word\n   * @param  {Array}    rules\n   * @return {string}\n   */\n  function sanitizeWord (token, word, rules) {\n    // Empty string or doesn't need fixing.\n    if (!token.length || uncountables.hasOwnProperty(token)) {\n      return word;\n    }\n\n    var len = rules.length;\n\n    // Iterate over the sanitization rules and use the first one to match.\n    while (len--) {\n      var rule = rules[len];\n\n      if (rule[0].test(word)) return replace(word, rule);\n    }\n\n    return word;\n  }\n\n  /**\n   * Replace a word with the updated word.\n   *\n   * @param  {Object}   replaceMap\n   * @param  {Object}   keepMap\n   * @param  {Array}    rules\n   * @return {Function}\n   */\n  function replaceWord (replaceMap, keepMap, rules) {\n    return function (word) {\n      // Get the correct token and case restoration functions.\n      var token = word.toLowerCase();\n\n      // Check against the keep object map.\n      if (keepMap.hasOwnProperty(token)) {\n        return restoreCase(word, token);\n      }\n\n      // Check against the replacement map for a direct word replacement.\n      if (replaceMap.hasOwnProperty(token)) {\n        return restoreCase(word, replaceMap[token]);\n      }\n\n      // Run all the rules against the word.\n      return sanitizeWord(token, word, rules);\n    };\n  }\n\n  /**\n   * Check if a word is part of the map.\n   */\n  function checkWord (replaceMap, keepMap, rules, bool) {\n    return function (word) {\n      var token = word.toLowerCase();\n\n      if (keepMap.hasOwnProperty(token)) return true;\n      if (replaceMap.hasOwnProperty(token)) return false;\n\n      return sanitizeWord(token, token, rules) === token;\n    };\n  }\n\n  /**\n   * Pluralize or singularize a word based on the passed in count.\n   *\n   * @param  {string}  word\n   * @param  {number}  count\n   * @param  {boolean} inclusive\n   * @return {string}\n   */\n  function pluralize (word, count, inclusive) {\n    var pluralized = count === 1\n      ? pluralize.singular(word) : pluralize.plural(word);\n\n    return (inclusive ? count + ' ' : '') + pluralized;\n  }\n\n  /**\n   * Pluralize a word.\n   *\n   * @type {Function}\n   */\n  pluralize.plural = replaceWord(\n    irregularSingles, irregularPlurals, pluralRules\n  );\n\n  /**\n   * Check if a word is plural.\n   *\n   * @type {Function}\n   */\n  pluralize.isPlural = checkWord(\n    irregularSingles, irregularPlurals, pluralRules\n  );\n\n  /**\n   * Singularize a word.\n   *\n   * @type {Function}\n   */\n  pluralize.singular = replaceWord(\n    irregularPlurals, irregularSingles, singularRules\n  );\n\n  /**\n   * Check if a word is singular.\n   *\n   * @type {Function}\n   */\n  pluralize.isSingular = checkWord(\n    irregularPlurals, irregularSingles, singularRules\n  );\n\n  /**\n   * Add a pluralization rule to the collection.\n   *\n   * @param {(string|RegExp)} rule\n   * @param {string}          replacement\n   */\n  pluralize.addPluralRule = function (rule, replacement) {\n    pluralRules.push([sanitizeRule(rule), replacement]);\n  };\n\n  /**\n   * Add a singularization rule to the collection.\n   *\n   * @param {(string|RegExp)} rule\n   * @param {string}          replacement\n   */\n  pluralize.addSingularRule = function (rule, replacement) {\n    singularRules.push([sanitizeRule(rule), replacement]);\n  };\n\n  /**\n   * Add an uncountable word rule.\n   *\n   * @param {(string|RegExp)} word\n   */\n  pluralize.addUncountableRule = function (word) {\n    if (typeof word === 'string') {\n      uncountables[word.toLowerCase()] = true;\n      return;\n    }\n\n    // Set singular and plural references for the word.\n    pluralize.addPluralRule(word, '$0');\n    pluralize.addSingularRule(word, '$0');\n  };\n\n  /**\n   * Add an irregular word definition.\n   *\n   * @param {string} single\n   * @param {string} plural\n   */\n  pluralize.addIrregularRule = function (single, plural) {\n    plural = plural.toLowerCase();\n    single = single.toLowerCase();\n\n    irregularSingles[single] = plural;\n    irregularPlurals[plural] = single;\n  };\n\n  /**\n   * Irregular rules.\n   */\n  [\n    // Pronouns.\n    ['I', 'we'],\n    ['me', 'us'],\n    ['he', 'they'],\n    ['she', 'they'],\n    ['them', 'them'],\n    ['myself', 'ourselves'],\n    ['yourself', 'yourselves'],\n    ['itself', 'themselves'],\n    ['herself', 'themselves'],\n    ['himself', 'themselves'],\n    ['themself', 'themselves'],\n    ['is', 'are'],\n    ['was', 'were'],\n    ['has', 'have'],\n    ['this', 'these'],\n    ['that', 'those'],\n    // Words ending in with a consonant and `o`.\n    ['echo', 'echoes'],\n    ['dingo', 'dingoes'],\n    ['volcano', 'volcanoes'],\n    ['tornado', 'tornadoes'],\n    ['torpedo', 'torpedoes'],\n    // Ends with `us`.\n    ['genus', 'genera'],\n    ['viscus', 'viscera'],\n    // Ends with `ma`.\n    ['stigma', 'stigmata'],\n    ['stoma', 'stomata'],\n    ['dogma', 'dogmata'],\n    ['lemma', 'lemmata'],\n    ['schema', 'schemata'],\n    ['anathema', 'anathemata'],\n    // Other irregular rules.\n    ['ox', 'oxen'],\n    ['axe', 'axes'],\n    ['die', 'dice'],\n    ['yes', 'yeses'],\n    ['foot', 'feet'],\n    ['eave', 'eaves'],\n    ['goose', 'geese'],\n    ['tooth', 'teeth'],\n    ['quiz', 'quizzes'],\n    ['human', 'humans'],\n    ['proof', 'proofs'],\n    ['carve', 'carves'],\n    ['valve', 'valves'],\n    ['looey', 'looies'],\n    ['thief', 'thieves'],\n    ['groove', 'grooves'],\n    ['pickaxe', 'pickaxes'],\n    ['whiskey', 'whiskies']\n  ].forEach(function (rule) {\n    return pluralize.addIrregularRule(rule[0], rule[1]);\n  });\n\n  /**\n   * Pluralization rules.\n   */\n  [\n    [/s?$/i, 's'],\n    [/[^\\u0000-\\u007F]$/i, '$0'],\n    [/([^aeiou]ese)$/i, '$1'],\n    [/(ax|test)is$/i, '$1es'],\n    [/(alias|[^aou]us|tlas|gas|ris)$/i, '$1es'],\n    [/(e[mn]u)s?$/i, '$1s'],\n    [/([^l]ias|[aeiou]las|[emjzr]as|[iu]am)$/i, '$1'],\n    [/(alumn|syllab|octop|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, '$1i'],\n    [/(alumn|alg|vertebr)(?:a|ae)$/i, '$1ae'],\n    [/(seraph|cherub)(?:im)?$/i, '$1im'],\n    [/(her|at|gr)o$/i, '$1oes'],\n    [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|automat|quor)(?:a|um)$/i, '$1a'],\n    [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)(?:a|on)$/i, '$1a'],\n    [/sis$/i, 'ses'],\n    [/(?:(kni|wi|li)fe|(ar|l|ea|eo|oa|hoo)f)$/i, '$1$2ves'],\n    [/([^aeiouy]|qu)y$/i, '$1ies'],\n    [/([^ch][ieo][ln])ey$/i, '$1ies'],\n    [/(x|ch|ss|sh|zz)$/i, '$1es'],\n    [/(matr|cod|mur|sil|vert|ind|append)(?:ix|ex)$/i, '$1ices'],\n    [/(m|l)(?:ice|ouse)$/i, '$1ice'],\n    [/(pe)(?:rson|ople)$/i, '$1ople'],\n    [/(child)(?:ren)?$/i, '$1ren'],\n    [/eaux$/i, '$0'],\n    [/m[ae]n$/i, 'men'],\n    ['thou', 'you']\n  ].forEach(function (rule) {\n    return pluralize.addPluralRule(rule[0], rule[1]);\n  });\n\n  /**\n   * Singularization rules.\n   */\n  [\n    [/s$/i, ''],\n    [/(ss)$/i, '$1'],\n    [/(wi|kni|(?:after|half|high|low|mid|non|night|[^\\w]|^)li)ves$/i, '$1fe'],\n    [/(ar|(?:wo|[ae])l|[eo][ao])ves$/i, '$1f'],\n    [/ies$/i, 'y'],\n    [/\\b([pl]|zomb|(?:neck|cross)?t|coll|faer|food|gen|goon|group|lass|talk|goal|cut)ies$/i, '$1ie'],\n    [/\\b(mon|smil)ies$/i, '$1ey'],\n    [/(m|l)ice$/i, '$1ouse'],\n    [/(seraph|cherub)im$/i, '$1'],\n    [/(x|ch|ss|sh|zz|tto|go|cho|alias|[^aou]us|tlas|gas|(?:her|at|gr)o|ris)(?:es)?$/i, '$1'],\n    [/(analy|ba|diagno|parenthe|progno|synop|the|empha|cri)(?:sis|ses)$/i, '$1sis'],\n    [/(movie|twelve|abuse|e[mn]u)s$/i, '$1'],\n    [/(test)(?:is|es)$/i, '$1is'],\n    [/(alumn|syllab|octop|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, '$1us'],\n    [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|quor)a$/i, '$1um'],\n    [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)a$/i, '$1on'],\n    [/(alumn|alg|vertebr)ae$/i, '$1a'],\n    [/(cod|mur|sil|vert|ind)ices$/i, '$1ex'],\n    [/(matr|append)ices$/i, '$1ix'],\n    [/(pe)(rson|ople)$/i, '$1rson'],\n    [/(child)ren$/i, '$1'],\n    [/(eau)x?$/i, '$1'],\n    [/men$/i, 'man']\n  ].forEach(function (rule) {\n    return pluralize.addSingularRule(rule[0], rule[1]);\n  });\n\n  /**\n   * Uncountable rules.\n   */\n  [\n    // Singular words with no plurals.\n    'adulthood',\n    'advice',\n    'agenda',\n    'aid',\n    'alcohol',\n    'ammo',\n    'anime',\n    'athletics',\n    'audio',\n    'bison',\n    'blood',\n    'bream',\n    'buffalo',\n    'butter',\n    'carp',\n    'cash',\n    'chassis',\n    'chess',\n    'clothing',\n    'cod',\n    'commerce',\n    'cooperation',\n    'corps',\n    'debris',\n    'diabetes',\n    'digestion',\n    'elk',\n    'energy',\n    'equipment',\n    'excretion',\n    'expertise',\n    'flounder',\n    'fun',\n    'gallows',\n    'garbage',\n    'graffiti',\n    'headquarters',\n    'health',\n    'herpes',\n    'highjinks',\n    'homework',\n    'housework',\n    'information',\n    'jeans',\n    'justice',\n    'kudos',\n    'labour',\n    'literature',\n    'machinery',\n    'mackerel',\n    'mail',\n    'media',\n    'mews',\n    'moose',\n    'music',\n    'manga',\n    'news',\n    'pike',\n    'plankton',\n    'pliers',\n    'pollution',\n    'premises',\n    'rain',\n    'research',\n    'rice',\n    'salmon',\n    'scissors',\n    'series',\n    'sewage',\n    'shambles',\n    'shrimp',\n    'species',\n    'staff',\n    'swine',\n    'tennis',\n    'traffic',\n    'transporation',\n    'trout',\n    'tuna',\n    'wealth',\n    'welfare',\n    'whiting',\n    'wildebeest',\n    'wildlife',\n    'you',\n    // Regexes.\n    /[^aeiou]ese$/i, // \"chinese\", \"japanese\"\n    /deer$/i, // \"deer\", \"reindeer\"\n    /fish$/i, // \"fish\", \"blowfish\", \"angelfish\"\n    /measles$/i,\n    /o[iu]s$/i, // \"carnivorous\"\n    /pox$/i, // \"chickpox\", \"smallpox\"\n    /sheep$/i\n  ].forEach(pluralize.addUncountableRule);\n\n  return pluralize;\n});\n\n\n//# sourceURL=webpack://mispell/./node_modules/pluralize/pluralize.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n\n//# sourceURL=webpack://mispell/(webpack)/buildin/global.js?");

/***/ }),

/***/ "./res/finalDict.json":
/*!****************************!*\
  !*** ./res/finalDict.json ***!
  \****************************/
/*! exports provided: apennines, athenian, athenians, bernoulli, blitzkrieg, brazilian, britain, british, caesar, cambridge, caracas, caribbean, carthaginian, catalina, catiline, celsius, champagne, connecticut, cypriot, ellis, english, european, europeans, february, flemish, franciscan, franciscans, gael, galatians, gandhi, gauguin, guatemala, guatemalan, guinness, israelis, ithaca, jacques, japanese, joseph, judaism, libya, malcolm, maltese, mara_liasson, massachusetts, mediterranean, michigan, miranda, mississippi, missouri, muslim, muslims, nazareth, new_yorker, newfoundland, nuremberg, orignal, palestinian, philippine, philippines, portuguese, puccini, rockefeller, russian, saturday, saturdays, sistine, spanish, tim, ukrainian, valletta, wednesday, zionist, zionists, a_lot, abandon, abandoned, abandoning, abandons, aberration, about, absence, absorbed, absorption, abuts, acceptable, accessible, accession, accidentally, acclimatization, accommodate, accommodated, accommodates, accommodating, accommodation, accommodations, accompanied, accomplish, accomplished, accomplishment, accomplishments, according, accuracy, accused, accustom, accustomed, achieve, achieved, achievement, achievements, achieves, achieving, acquaintance, acquaintances, acquainted, acquire, acquired, acquires, acquiring, acquisition, acquitted, across, actually, adaptation, adaptations, adders, additionally, address, addressable, addressing, adequate, adhering, administrate, administration, administrative, admissibility, admissible, admission, adolescent, adopt, adopted, adoptive, advertisement, advertisements, advice, advised, aerial, aerials, afford, affords, aficionado, aficionados, again, aggravate, aggregate, aggregates, aggression, aggressive, aggressively, aggrieved, agree, agreed, agreeing, agreement, agriculturist, airborne, airports, alcohol, alcoholic, algebraic, algorithm, algorithms, allege, alleged, alleges, allegiance, alleviate, allophone, allophones, allot, allotted, allusion, almost, already, also, although, always, amateur, amend, amendment, among, anal, analogous, analytic, and, androgynous, androgyny, angina, annihilation, announced, annual, annulled, anoint, anointed, anointing, anoints, anomalies, anomalous, anomaly, anonymity, anything, anywhere, apart, apartment, apartments, apologetics, apologies, apology, appalling, apparent, appealing, appearance, appearances, application, appreciate, approaches, appropriate, approximately, apron, arbitrarily, arbitrary, archaeologist, archaeologists, archaeology, archeologist, archeologists, archeology, archetype, archetypes, architect, architects, architectural, architecturally, architecture, archive, archived, armature, arrangement, arrested, article, artificial, artificially, artillery, ascension, ascetic, aspects, assassin, assassinate, assassinated, assassinates, assassination, assassinations, assassins, assemble, assistant, associated, asteroid, asymmetric, atheistic, attainder, attained, attempt, attempted, attempting, attempts, attendance, attendant, attendants, attitude, attribute, attributes, audience, author, autobiographic, autobiography, auxiliary, available, averaged, aviation, away, awkward, back, backward, bandwidth, bankruptcy, barbecue, basically, beautiful, became, because, becoming, before, begging, begin, beginner, beginners, beginning, beginnings, behavior, behaviour, belief, beliefs, believe, believed, believes, believing, beneficial, beneficiary, benefit, benefits, besiege, besieged, besieging, bestiality, between, bilaterally, binomial, blame, blamed, blessing, boat, boundary, bout, breakthrough, brilliant, broadly, buffaloes, buffalos, bureaucracy, burin, burning, burying, business, businesses, caisson, calculate, calculated, calendar, calligraphy, campaign, campaigns, can't, candidate, canister, canisters, canonical, cant, capability, carcass, caring, carnivorous, cartilage, cartographer, cartridge, cassette, cassowary, casualties, casualty, categories, category, caterpillar, caterpillars, catholic, cemeteries, cemetery, censor, censure, census, centuries, century, ceremonial, ceremonies, ceremonious, ceremony, certain, certainty, cervical, chairman, character, characteristics, characterized, characters, charismatic, chase, chaser, cheat, chemical, chemically, chemistry, chief, childbirth, children's, chosen, church, circuit, civilian, claims, clear, clearance, clearer, clearly, clinical, clinically, cloud, coast, collateral, colleague, colleagues, collectible, colonies, colonnade, colony, coloration, colossal, colouration, comeback, coming, commandeer, commander, commando, commandos, commemorated, commemorative, commercial, commercially, commission, commissioned, commissioner, commissioning, commissions, committed, committee, committing, commonly, communication, comparative, comparison, compatibility, competence, competent, competition, competitive, compiler, completion, comprehensive, compromise, concentrate, concentrated, concentrates, concept, concern, concerned, concerning, condemned, condition, conditions, confidential, confidentially, conform, congressional, conjecture, connived, connotation, connotations, conqueror, conquerors, conscious, consciously, consciousness, consensus, consent, conservative, consider, considered, considers, consolidate, consolidated, consonant, consonants, consortium, constant, constantly, constituencies, constituency, constituent, constituents, constitution, constitutional, constraints, construction, consummate, consummated, contains, contaminate, contemporaneous, contemporaries, contemporary, continuing, continuous, continuously, contributor, contributors, control, controlled, controlling, controls, controversial, controversies, controversy, convenient, conventional, conversion, converted, converter, converters, conveyor, cooperation, coordination, copy, copyright, corporate, corporation, correspond, corresponded, correspondent, correspondents, corresponding, corresponds, corrosion, could, councillor, councillors, counsellor, counsellors, counselor, counselors, countries, country, courier, couturier, covenant, covered, coveted, coy, created, criterion, criticise, criticised, criticises, criticising, criticism, criticisms, criticize, criticized, criticizes, criticizing, critics, crucifixion, cruises, culminating, cumulative, currently, cyan, dahl, daub, de_rigueur, deal, debatable, deceived, decidable, decide, decidedly, deciduous, decipher, deciphered, decision, decisions, decompose, decomposed, decomposes, decomposing, defiance, define, defined, definite, definitely, deities, deity, demeanor, demeanour, demographic, denigrating, dependence, dependency, dependent, derived, derogatory, descendant, descendants, describe, described, describes, describing, desiccated, designed, desirable, despair, desperate, desperation, despicable, despite, destroy, destructive, detached, detailed, determining, detrimental, develop, developed, development, device, dial, didn't, die, different, difficulties, difficulty, dimension, dimensions, diphthong, diphthongs, directly, disagreement, disappear, disappeared, disappearing, disappears, disapproval, disaster, disastrous, discontent, discover, discovered, discovering, discovers, discovery, discuss, disintegrated, disintegration, disobedience, disobedient, disparagingly, disparate, dispense, dispensed, dispensing, dissatisfaction, dissatisfied, dissemination, dissolved, distinguish, distinguished, distinguishes, distinguishing, diverged, diverse, divide, divided, division, divisions, document, documented, documents, does, doesn't, doing, dominant, doubt, dram, dramatic, dream, dreams, dressing, drink, drumming, dukedom, during, dyeing, dying, earned, eclectic, eclipse, efficient, efficiently, effluence, effort, efforts, eighth, election, electric, electrical, electrically, electricity, electron, elementary, elephant, elicited, eligible, eliminated, eliminating, else, emanate, embarrass, embarrassed, embarrassing, embarrassment, embezzled, emigrant, emigrated, emigration, eminent, eminently, emissaries, emissary, emission, emitted, emitting, emotion, emphysema, empirical, enamored, enamoured, encryption, engineer, engineering, engineers, enlargement, enlargements, enlist, enmity, enormous, enormously, entertaining, entrepreneur, entrepreneurs, enumerable, environment, environmental, environmentalist, environmentally, environments, equatorial, equilibrium, equipment, equipped, erected, erratic, erratically, essence, essential, ethos, every, evidently, evil, exacerbate, exacerbated, exaggerate, exaggerated, exaggerates, exaggerating, exalted, example, exceeded, excel, excellent, excels, excerpt, excerpts, execute, executed, executes, executing, execution, exempt, exerted, exhibition, exhibitions, existence, existent, exoskeleton, expects, expel, expels, explain, exploitative, extant, external, extinct, extraordinarily, extraordinary, extraterrestrial, extravagant, eyas, facilitate, facilitated, famous, fanaticism, fascinated, feasible, feel, feels, fictitious, field, fields, filament, file, files, finally, financially, find, first, fled, flirts, flourish, fluorescent, forbade, forehead, foreign, foremost, forerunner, forfeit, form, formalize, formalized, forty, fought, found, foundries, foundry, freed, friend, friends, from, fundamental, fundamentals, fungi, further, gale, game, gases, genealogies, genealogy, generally, genitalia, goddess, goddesses, going, gourd, government, governmental, governor, graffiti, grammar, grammatically, grateful, gratefully, gratuitous, great, grief, group_sex, grow, guanine, guarantee, guaranteed, guarantees, guard, guerilla, guerillas, guerrilla, guerrillas, guidance, guttural, habeas, happen, happened, happening, harass, harassed, harasses, harassing, harassment, hare, have, having, heave, heritage, heroes, heterogeneous, holy, hydrophilic, hydrophobic, hygiene, hypocrisy, hypocrite, hypocrites, iconoclastic, idea, ideas, identical, ideologies, ideology, ides, idiosyncratic, illegitimacy, illegitimate, illogical, illusion, imagery, imaginary, imagine, imbalance, imitate, imitated, imitating, imitator, immanent, immediately, immense, immigrant, immigrants, immigrated, immigration, imminent, impeach, impedance, imperial, impolite, imprisonment, improvisation, in_spite, inaccessible, inappropriate, incompatibility, incompetence, incompetent, incorporation, incorruptible, incredible, incunabula, indefinitely, independence, independent, independently, indict, indispensable, indisputable, indisputably, indulge, industrial, inevitable, infectious, infiltrate, infiltrated, infinite, inflammation, influenced, influential, information, ingredients, inhabitant, inhabitants, inheritance, initiation, innocence, innumerable, insidious, insistence, instance, instead, institution, institutions, integrated, integration, intellectual, intelligence, intelligent, interbred, interbreed, interchangeably, interest, international, interpret, interregnum, interrelated, interrupt, into, introduce, introduced, intuitive, intuitively, inventor, invertebrates, involvement, ironically, irrelevant, irresistible, irresistibly, irritable, irritated, isn't, jeopardy, journeys, judicial, judiciary, just, keratin, kindergarten, know, knowledge, knowledgeable, knows, laboratory, laid, language, languages, larvae, last, lavatory, leaf, lean, leaner, learn, learns, led, legitimate, leisure, length, level, levitate, levitated, levitates, levitating, liable, liaison, libel, library, licence, license, licensed, licensing, lieutenant, life, light_year, like, liked, likelihood, linguistic, linguistics, liquefy, literature, little, lively, loneliness, lonely, losing, lot, love, lying, made, magnolia, maintenance, majority, make, makes, making, mammal, mammalian, management, maneuver, maneuverability, maneuverable, maneuvers, manoeuvrability, manoeuvrable, manoeuvre, manoeuvres, manufacture, manufactured, manufacturing, mare, marked, marketing, marriage, married, mass_media, mathematician, mathematicians, mathematics, mediaeval, medicine, medieval, member, mentioned, mere, messenger, metallic, metallurgic, metallurgical, metallurgy, metamorphosis, midwives, milieu, military, millennium, millipede, miniature, ministry, minuscule, miscellaneous, mischievous, misdemeanor, misdemeanors, misdemeanour, misdemeanours, misogynist, misogyny, missel, missile, misspelling, mizzen, model, moment, monasteries, monastery, monetary, money, monolithic, more, mortgage, most_famous, motivated, movie, mucous, municipalities, municipality, murder, murdering, muscles, mussels, myriad, myself, mysterious, mystery, natural, naturally, necessarily, necessary, need, negligible, negotiate, negotiation, neighbor, neighboring, neighbors, neighbour, neighbouring, neighbours, next, nice, nickel, niece, nineteenth, ninety, ninth, no_one, north, northeastern, northern, not, notable, notably, note, noticeable, noticing, notoriety, nouveau, nuclear, nuisance, nutrient, nutrients, obedience, obedient, obstacle, occasion, occasional, occasionally, occasioned, occasions, occur, occurred, occurrence, occurrences, occurring, octahedral, octahedron, official, officially, ogling, omission, omitted, omitting, omnivorous, omnivorously, one, only, ophthalmic, ophthalmologist, ophthalmology, opinion, opponent, opportunity, opposite, opposition, oppression, oppressive, optimism, orally, organ, organism, origin, original, originally, other, overshadowed, overwhelming, oxygen, oxymoron, paid, palace, pamphlet, pantomime, parakeets, parallel, paraphernalia, parenthesis, parliamentarian, particular, particularly, passed, pastime, pastoral, patented, peculiar, pejorative, penalty, peninsula, peninsular, people, perceived, performance, performed, performs, perhaps, peripatetic, perjury, permanent, permissible, permission, perpendicular, persistence, persistent, personal, personnel, persuade, persuaded, persuades, persuading, perturbation, perturbations, petition, phenomena, phenomenal, phenomenally, phenomenon, pheromone, phial, phials, philosopher, philosophical, philosophy, phonetic, phonograph, piece, pilgrimage, pilgrimages, pineapple, pitch, place, plaintiff, planned, playwright, playwrights, pleasant, poem, poems, poetry, pogrom, pogroms, poison, pollinator, pollute, polluted, pollutes, polluting, pollution, pomegranate, popularity, portrayed, position, positron, possess, possessed, possesses, possessing, possession, possibility, possible, possibly, power, powerful, practical, practically, practitioner, practitioners, prairie, preamble, precede, preceded, precedes, preceding, precursor, predecessor, predominately, preferably, preferred, preferring, pregnancies, premiere, premiered, preparation, prepare, prerogative, presence, presidential, prestigious, presumably, prevalent, previous, primitive, primitively, primitives, primordial, principal, principle, privilege, privileged, privileges, pro_tem, probability, probably, problem, procedure, proceed, proceeded, proceeding, proceedings, process, processing, proclaimed, proclaiming, proclamation, profession, professor, profusion, program, programmable, programs, prohibition, prolegomena, prolific, prominence, prominent, prominently, promiscuous, pronominal, pronunciation, propaganda, propagate, propagates, propeller, propellers, proper, prophecy, proportions, proprietary, proselytizing, protagonist, protagonists, protein, protuberance, provided, pseudonym, pseudonymous, psychic, psychology, publicly, pumpkin, purpose, purposely, pursue, pursuing, pursuit, putting, quantity, quarantine, quickly, quiet, quite, quizzes, rabbinical, rarefied, ratify, real, realised, realized, really, recall, receded, receding, receipt, receive, received, receiver, receivers, receives, receiving, recipient, recipients, recognize, recommend, recommended, recommending, recommends, reconciliation, reconnaissance, record, recreational, recurring, reevaluated, reference, referral, referred, referring, refers, refrigerator, refusal, regardless, regular, regularly, rehearsal, relationship, relatively, relevance, relevant, relieve, relieved, religious, remember, remembrance, reminiscent, remnant, renown, renowned, repartition, repentance, repentant, repetition, representative, representatives, required, resemblance, resemble, resembled, resembling, reside, resided, resident, residents, residing, resistance, resistant, resistible, response, responsibility, responsible, restaurant, restaurants, restoration, restraint, resurrecting, resurrection, retaliated, retaliation, reversible, revolutionary, rewrite, rhyme, rhythm, ridiculous, rigor, rigorous, rigour, ringing, rococo, room-mate, roommate, roughly, rule, sacrifice, safety, salary, same, sandwich, sassy, satellite, satellites, satyr, says, scalable, schedule, scholarly, scholastic, sclera, script, scroll, secede, seceded, secretary, seize, seized, seizing, seizure, seizures, sense, separate, separated, separately, separates, separating, separation, sepulcher, sepulchre, sergeant, serval, servile, several, severely, shadow, sheath, sheet, sheriff, shining, should, shouldn't, show, sidereal, siege, signatories, signatory, significantly, similar, similarity, similarly, simpler, simply, simultaneous, since, sincerely, sines, singsong, size, sized, sizing, sneeze, sold, soldiers, soliloquy, solitary, some, sophisticated, sophomore, sound, sounds, soup, south, southern, souvenir, souvenirs, sovereign, sovereignty, specialised, specialized, specific, specify, specimen, spectacular, speech, spermatozoa, spermatozoon, sponsor, sponsored, spontaneous, spread, start, statement, stop, stories, story, strand, strange, strata, strategic, strategies, strategy, strength, strengthen, strengthened, strengthening, strenuous, strictest, stringent, striven, strongest, strove, structure, structured, stubbornness, study, stylus, subpoena, subsidiary, substance, substantial, subterranean, subtract, subtracted, subtracting, subtraction, subtracts, succeed, succeeded, succeeding, succeeds, success, successes, successful, successfully, succession, successive, sufficient, sufficiently, suffrage, summary, superintendent, supersede, superseded, supplanted, support, suppose, supposed, supposedly, supposes, supposing, suppress, suppressed, suppresses, suppressing, surely, surly, surprise, surprised, surprising, surprisingly, surrendered, surreptitious, surreptitiously, surround, surrounded, surrounding, surroundings, surrounds, surveyor, survivors, susceptible, swear, swears, swimming, symmetric, symmetrical, symmetrically, symmetry, synonymous, syphilis, syrup, take, takes, taking, talked, talking, targeted, targeting, taste, tattoos, taught, taxonomic, taxonomy, technician, technicians, temperament, temperate, temperature, tendencies, tendency, tennis_player, tentacle, tentacles, terrestrial, territories, territory, terrorist, than, that, the, theater, theatre, their, themselves, then, theologian, there, these, they, thickening, thief, thieves, thing, things, think, thinking, thinks, third, this, thoroughly, those, three, threshold, through, throughout, time, tobacco, today, today's, tolerance, tomatoes, tome, tomorrow, tonight, torch, tornadoes, toroidal, touch, toward, town, traditionally, traffic, trafficked, transcendence, transcendent, transcendental, transcending, transcribing, transcription, transferred, transferring, translator, translators, transmissible, tremolo, trilogy, troops, troupes, truly, trunk, turnkey, tyranny, ubiquitous, uncertainty, unconscious, unconsciousness, unconventional, undecidable, unfortunately, unilateral, unilaterally, universities, university, unnecessarily, unnecessary, unpleasant, unrepentant, unsaid, unsubstantiated, unsuccessful, unsuccessfully, unsurprised, unsurprising, until, unusable, unused, unwieldy, upon, usable, usage, use, used, useful, usefully, using, usually, vacuum, vagina, valuable, varieties, variety, vegetable, vegetables, vengeance, venomous, veranda, verification, very, vicinity, vigor, vigorous, vigour, vilify, villain, villein, villi, visible, visibly, visiting, volcano, volcanoes, voluntary, volunteer, volunteered, volunteering, volunteers, want, want_to, wanted, wants, warrant, was, wasn't, weaponry, wear, weather, weird, what, when, wherever, whether, which, while, whole, wholly, wield, wielded, wife, wild, will, wintry, witch, with, withdraw, withdrawal, within, women's, won't, wont, work, working, worsened, would, write, writing, written, wrote, year, years, nevada, presbyterian, rsx, stephen, susan, ability, accord, adultery, alive, all_right, ambivalent, amorphous, amplification, anatomy, announce, announcement, anonymous, appreciated, arctic, asterisk, asymptote, at, attentively, automatically, bankrupt, battalion, better, bleat, boycott, broccoli, browse, buoyant, bureau, bush, butter, button, by_by, caller, came, caveats, changing, circle, circumstances, club, cockamamie, colloquialism, colon, column, combo, commercials, commitment, companies, complicated, computer, congratulations, consistent, continue, contribution, coolly, coping, cosmopolitan, court, crazy, credibility, critique, croak, crucified, customization, daily, dangerous, dangle, defence, defense, defiantly, dependable, description, desiccate, developments, dictionary, dinosaur, disagree, discussion, dissect, dissipate, distant, distort, distract, divulge, documentation, dog, download, draft, dramatically, drunkenness, due, dynamic, ecstasy, efficacy, elegant, embed, encapsulation, encyclopedia, engine, enhance, enlightenment, ennui, enough, epitome, error, espresso, etiology, evaluation, eventually, everything, exceed, except, exercise, exhilaration, expedient, explicitly, extensions, factorization, failure, fantasia, fantasy, favor, favour, fax, festival, fiery, flattering, flux, foresee, frustrating, function, gotten, graceful, gradually, guts, happily, height, hello, help, higher, hippopotamus, horse, housing, however, humanity, hyphen, hypothesis, hysterical, implements, in_case, in_depth, in_fact, inadvertent, incomplete, inconvenience, inconvenient, indent, inefficient, infamy, initial, initialized, inoculate, insistent, installation, interested, interface, interpreter, inventions, isotope, iterate, john, judgement, judgment, kilometer, kilometre, kipper, knowing, laser, latest, layer, leave, lesion, likely, madness, marshal, masks, maximum, media, memento, memory, metaphysical, mike, minimum, monkey, mosaic, most_likely, mouser, moving, naive, nickelodeon, not_in, noticeably, nuzzled, obfuscate, objects, occupied, octogenarian, old, opossum, organize, orient, oscilloscope, parameter, parameters, pattern, peremptory, permissive, phone, picturesque, police, politic, politician, polygamy, polypropylene, portray, pragmatism, precision, prefixed, prefixes, problematic, procedures, properly, psychologist, pursued, quiz, raccoon, radius, rampantly, rank, rectangle, redesign, replacement, respect, respectfully, room, rudimentary, running, sacrilegious, safely, salute, satisfy, scrabble, section, segments, sherbet, signal, simplicity, site, situation, smile, sneaked, sometimes, sonic, specifically, spell, spoke, steering, stomach, straitjacket, student, style_guide, subscribed, substitutions, sugar, superfluous, swimwear, sylph, synchronization, team, technically, test, tests, than_or, theoretical, theoretically, titillate, tough, tragedy, trouble, tunnel_like, turned, two, unconstitutional, under_ladder, unintelligible, unnatural, up_cast, uranium, utmost, version, vinaigrette, volley, voluntarism, voluptuous, wait, ward, warlord, wasting, weaken, wimp, yield, your, alexis, amanda, ashley, hannah, madison, are, breast, but, butt, doctor, dr, farther, fewer, female, large, less, is, you, were, woman, default */
/***/ (function(module) {

eval("module.exports = {\"apennines\":[\"apenine\",\"appenine\"],\"athenian\":[\"athenea\"],\"athenians\":[\"athenean\"],\"bernoulli\":[\"bernouill\"],\"blitzkrieg\":[\"blitzkrei\"],\"brazilian\":[\"brasillia\"],\"britain\":[\"britia\"],\"british\":[\"brittis\"],\"caesar\":[\"ceasa\"],\"cambridge\":[\"cambrig\"],\"caracas\":[\"carca\"],\"caribbean\":[\"carribea\"],\"carthaginian\":[\"carthagia\"],\"catalina\":[\"catalin\"],\"catiline\":[\"catalin\"],\"celsius\":[\"celciu\"],\"champagne\":[\"champang\"],\"connecticut\":[\"conneticu\"],\"cypriot\":[\"cypria\"],\"ellis\":[\"ele\"],\"english\":[\"enlis\"],\"european\":[\"europia\",\"eurpea\",\"eurpoea\"],\"europeans\":[\"europian\"],\"february\":[\"febuar\"],\"flemish\":[\"flemmis\"],\"franciscan\":[\"fransisca\"],\"franciscans\":[\"fransiscan\"],\"gael\":[\"ga\"],\"galatians\":[\"galation\"],\"gandhi\":[\"ghand\"],\"gauguin\":[\"gogi\"],\"guatemala\":[\"guatamal\"],\"guatemalan\":[\"guatamala\"],\"guinness\":[\"guines\"],\"israelis\":[\"israelie\"],\"ithaca\":[\"ihac\"],\"jacques\":[\"jaque\"],\"japanese\":[\"japane\"],\"joseph\":[\"jospe\"],\"judaism\":[\"juadais\",\"juadis\"],\"libya\":[\"lybi\"],\"malcolm\":[\"malco\"],\"maltese\":[\"maltesia\"],\"mara_liasson\":[\"liaso\"],\"massachusetts\":[\"massachusset\",\"massachussett\"],\"mediterranean\":[\"mediteranea\"],\"michigan\":[\"michaga\"],\"miranda\":[\"merand\"],\"mississippi\":[\"missisip\",\"missisipp\"],\"missouri\":[\"misour\"],\"muslim\":[\"mohammeda\",\"muhammada\"],\"muslims\":[\"mohammedan\"],\"nazareth\":[\"nazeret\"],\"new_yorker\":[\"newyorke\"],\"newfoundland\":[\"foundlan\"],\"nuremberg\":[\"nurembur\"],\"orignal\":[\"orgina\"],\"palestinian\":[\"palistia\",\"palistinia\"],\"philippine\":[\"phillipin\"],\"philippines\":[\"philipine\",\"phillipine\",\"phillippine\"],\"portuguese\":[\"portuges\"],\"puccini\":[\"pucin\"],\"rockefeller\":[\"rockerfelle\"],\"russian\":[\"russio\",\"russin\"],\"saturday\":[\"saterda\"],\"saturdays\":[\"saterday\"],\"sistine\":[\"sixti\"],\"spanish\":[\"spainis\"],\"tim\":[\"tie\"],\"ukrainian\":[\"ukrania\"],\"valletta\":[\"valett\"],\"wednesday\":[\"wendsa\",\"wensda\"],\"zionist\":[\"sionis\"],\"zionists\":[\"sionist\"],\"a_lot\":[\"alo\"],\"abandon\":[\"abondo\"],\"abandoned\":[\"abondone\"],\"abandoning\":[\"abondonin\"],\"abandons\":[\"abondon\"],\"aberration\":[\"aberatio\"],\"about\":[\"abat\",\"abaut\"],\"absence\":[\"absens\"],\"absorbed\":[\"asorbe\"],\"absorption\":[\"absorbsio\",\"absorbtio\",\"absorbtio\"],\"abuts\":[\"abutt\"],\"acceptable\":[\"acceptibl\"],\"accessible\":[\"accessabl\"],\"accession\":[\"accensio\"],\"accidentally\":[\"accidentl\",\"accidentl\"],\"acclimatization\":[\"acclimitizatio\"],\"accommodate\":[\"accomadat\",\"accomodat\",\"accomodat\",\"acommadat\"],\"accommodated\":[\"accomadate\",\"accomodate\"],\"accommodates\":[\"accomadate\",\"accomodate\"],\"accommodating\":[\"accomadatin\",\"accomodatin\"],\"accommodation\":[\"accomadatio\",\"accomodatio\"],\"accommodations\":[\"accomodation\"],\"accompanied\":[\"accompanye\"],\"accomplish\":[\"acomplis\"],\"accomplished\":[\"acomplishe\"],\"accomplishment\":[\"acomplishmen\"],\"accomplishments\":[\"acomplishment\"],\"according\":[\"acordin\"],\"accuracy\":[\"acurac\"],\"accused\":[\"accusse\"],\"accustom\":[\"acusto\"],\"accustomed\":[\"acustomme\"],\"achieve\":[\"acheiv\",\"achiv\"],\"achieved\":[\"acheive\",\"achive\"],\"achievement\":[\"acheivemen\",\"acheivmen\",\"achievmen\"],\"achievements\":[\"acheivement\",\"acheivment\",\"achievment\"],\"achieves\":[\"acheive\"],\"achieving\":[\"acheivin\"],\"acquaintance\":[\"acquaintenc\",\"acquiantenc\",\"aquaintanc\",\"aquiantanc\",\"aquantanc\"],\"acquaintances\":[\"acquaintence\",\"acquiantence\"],\"acquainted\":[\"aquainte\"],\"acquire\":[\"adquir\",\"aquir\",\"equir\"],\"acquired\":[\"adquire\",\"aquire\"],\"acquires\":[\"adquire\"],\"acquiring\":[\"adquirin\",\"aquirin\"],\"acquisition\":[\"aquisitio\"],\"acquitted\":[\"acquite\",\"aquitte\"],\"across\":[\"accros\"],\"actually\":[\"actualy\",\"actauly\",\"actuali\"],\"adaptation\":[\"adaptio\"],\"adaptations\":[\"adaption\"],\"adders\":[\"addre\"],\"additionally\":[\"additinall\"],\"address\":[\"addre\",\"adre\",\"adres\"],\"addressable\":[\"addresabl\",\"adresabl\",\"adressabl\"],\"addressing\":[\"addresin\",\"adresin\",\"adressin\"],\"adequate\":[\"adecuat\"],\"adhering\":[\"adhearin\"],\"administrate\":[\"adminstrat\"],\"administration\":[\"adminstratio\"],\"administrative\":[\"adminstrativ\"],\"admissibility\":[\"admissabilit\"],\"admissible\":[\"admissabl\"],\"admission\":[\"addmissio\"],\"adolescent\":[\"adolecen\"],\"adopt\":[\"addop\"],\"adopted\":[\"addopte\"],\"adoptive\":[\"addoptiv\"],\"advertisement\":[\"advertismen\"],\"advertisements\":[\"advertisment\"],\"advice\":[\"advice\"],\"advised\":[\"advice\"],\"aerial\":[\"aerie\"],\"aerials\":[\"aeriel\"],\"afford\":[\"affor\",\"effor\"],\"affords\":[\"efford\"],\"aficionado\":[\"afficionad\"],\"aficionados\":[\"afficionado\"],\"again\":[\"agia\",\"agin\"],\"aggravate\":[\"agravat\"],\"aggregate\":[\"agregat\"],\"aggregates\":[\"agregate\"],\"aggression\":[\"agressio\"],\"aggressive\":[\"agressiv\",\"aggresiv\"],\"aggressively\":[\"agressivel\"],\"aggrieved\":[\"agrieve\"],\"agree\":[\"agr\"],\"agreed\":[\"agre\"],\"agreeing\":[\"agrein\"],\"agreement\":[\"aggreemen\"],\"agriculturist\":[\"agriculturalis\"],\"airborne\":[\"airbourn\"],\"airports\":[\"airport\"],\"alcohol\":[\"alchoho\",\"alchoho\"],\"alcoholic\":[\"alcoholica\",\"alchoholi\"],\"algebraic\":[\"algebraica\"],\"algorithm\":[\"algorit\"],\"algorithms\":[\"algoritm\"],\"allege\":[\"aleg\",\"alledg\"],\"alleged\":[\"alege\",\"alledge\"],\"alleges\":[\"alledge\"],\"allegiance\":[\"alegienc\",\"allegienc\"],\"alleviate\":[\"alliviat\"],\"allophone\":[\"allopon\"],\"allophones\":[\"allopone\"],\"allot\":[\"alo\"],\"allotted\":[\"alotte\"],\"allusion\":[\"alusio\"],\"almost\":[\"almso\",\"aloms\"],\"already\":[\"alreay\"],\"also\":[\"also\",\"asl\"],\"although\":[\"alth\",\"although\",\"altoug\"],\"always\":[\"alwas\",\"alwya\"],\"amateur\":[\"amatur\",\"amatur\"],\"amend\":[\"ammen\"],\"amendment\":[\"admendmen\",\"amendman\",\"ammendmen\"],\"among\":[\"amoun\"],\"anal\":[\"anua\"],\"analogous\":[\"analagou\",\"analogeou\"],\"analytic\":[\"analiti\"],\"and\":[\"anb\"],\"androgynous\":[\"androgenou\"],\"androgyny\":[\"androgen\"],\"angina\":[\"agin\"],\"annihilation\":[\"anihilatio\"],\"announced\":[\"anounce\"],\"annual\":[\"anua\"],\"annulled\":[\"annule\"],\"anoint\":[\"annoin\",\"annoin\"],\"anointed\":[\"annointe\"],\"anointing\":[\"annointin\"],\"anoints\":[\"annoint\"],\"anomalies\":[\"anomolie\"],\"anomalous\":[\"anomolou\"],\"anomaly\":[\"anomol\"],\"anonymity\":[\"anonimit\"],\"anything\":[\"anytyin\"],\"anywhere\":[\"anyhwer\"],\"apart\":[\"appar\"],\"apartment\":[\"appartmen\"],\"apartments\":[\"appartment\"],\"apologetics\":[\"apolegetic\"],\"apologies\":[\"appologie\"],\"apology\":[\"appolog\"],\"appalling\":[\"appeallin\"],\"apparent\":[\"aparen\",\"apparan\"],\"appealing\":[\"appeallin\"],\"appearance\":[\"appearenc\"],\"appearances\":[\"appearence\"],\"application\":[\"aplicatio\"],\"appreciate\":[\"apprieciat\",\"appresteat\"],\"approaches\":[\"approach\"],\"appropriate\":[\"appropiat\"],\"approximately\":[\"approximitel\",\"aproximatel\"],\"apron\":[\"apo\"],\"arbitrarily\":[\"arbitaril\"],\"arbitrary\":[\"arbitar\"],\"archaeologist\":[\"archeaologis\"],\"archaeologists\":[\"archeaologist\"],\"archaeology\":[\"archaoelog\",\"archaolog\"],\"archeologist\":[\"archeaologis\"],\"archeologists\":[\"archeaologist\"],\"archeology\":[\"archaoelog\",\"archaolog\"],\"archetype\":[\"archtyp\",\"archeyp\"],\"archetypes\":[\"archtype\"],\"architect\":[\"archetec\"],\"architects\":[\"archetect\"],\"architectural\":[\"archetectura\"],\"architecturally\":[\"archetecturall\"],\"architecture\":[\"archetectur\",\"aratictatur\",\"aricticur\"],\"archive\":[\"achiv\"],\"archived\":[\"achive\"],\"armature\":[\"amatur\"],\"arrangement\":[\"arangemen\"],\"arrested\":[\"ereste\"],\"article\":[\"artica\",\"artice\"],\"artificial\":[\"artifica\"],\"artificially\":[\"artificall\"],\"artillery\":[\"artillar\"],\"ascension\":[\"accensio\"],\"ascetic\":[\"aseti\"],\"aspects\":[\"spect\"],\"assassin\":[\"assasi\"],\"assassinate\":[\"assasinat\"],\"assassinated\":[\"assasinate\"],\"assassinates\":[\"assasinate\"],\"assassination\":[\"assasinatio\"],\"assassinations\":[\"assasination\"],\"assassins\":[\"assasin\"],\"assemble\":[\"assempl\"],\"assistant\":[\"assitan\"],\"associated\":[\"asociate\"],\"asteroid\":[\"asterio\"],\"asymmetric\":[\"assymetri\",\"asymetri\"],\"atheistic\":[\"atheistica\"],\"attainder\":[\"attaindr\"],\"attained\":[\"attaindr\"],\"attempt\":[\"attem\"],\"attempted\":[\"attemte\"],\"attempting\":[\"attemtin\"],\"attempts\":[\"attemt\"],\"attendance\":[\"attendenc\"],\"attendant\":[\"attenden\"],\"attendants\":[\"attendent\"],\"attitude\":[\"attitid\"],\"attribute\":[\"atribut\"],\"attributes\":[\"atribute\"],\"audience\":[\"audeinc\"],\"author\":[\"auto\"],\"autobiographic\":[\"authobiographi\"],\"autobiography\":[\"authobiograph\"],\"auxiliary\":[\"auxilliar\"],\"available\":[\"avalabl\",\"avaliabl\"],\"averaged\":[\"averagee\"],\"aviation\":[\"avatio\"],\"away\":[\"awy\"],\"awkward\":[\"ackwar\"],\"back\":[\"bak\",\"bca\"],\"backward\":[\"ackwar\"],\"bandwidth\":[\"bandwit\"],\"bankruptcy\":[\"bankrupc\"],\"barbecue\":[\"barbequ\"],\"basically\":[\"basicaly\",\"basicly\",\"baesicly\"],\"beautiful\":[\"beatifu\",\"beautyful\"],\"became\":[\"becama\"],\"because\":[\"beacus\",\"becasu\",\"becous\",\"becuas\"],\"becoming\":[\"becommin\"],\"before\":[\"befoe\"],\"begging\":[\"beggi\"],\"begin\":[\"beggi\"],\"beginner\":[\"beggine\"],\"beginners\":[\"begginer\"],\"beginning\":[\"begginin\",\"beginin\",\"beginni\",\"begginin\",\"begin\",\"biggingin\"],\"beginnings\":[\"beggining\"],\"behavior\":[\"behavou\",\"behaviou\"],\"behaviour\":[\"behavou\",\"behavio\"],\"belief\":[\"belei\"],\"beliefs\":[\"belive\"],\"believe\":[\"beleiv\",\"beleiv\",\"beliv\"],\"believed\":[\"beleive\"],\"believes\":[\"beleive\",\"belive\"],\"believing\":[\"beleivin\"],\"beneficial\":[\"benificia\"],\"beneficiary\":[\"beneficar\"],\"benefit\":[\"benifi\"],\"benefits\":[\"benifit\",\"benidif\"],\"besiege\":[\"beseig\"],\"besieged\":[\"beseige\"],\"besieging\":[\"beseigin\"],\"bestiality\":[\"beastialit\"],\"between\":[\"vetwee\"],\"bilaterally\":[\"bilateral\"],\"binomial\":[\"binomina\"],\"blame\":[\"blai\"],\"blamed\":[\"blaime\"],\"blessing\":[\"blessur\"],\"boat\":[\"boau\"],\"boundary\":[\"bondar\",\"boundr\"],\"bout\":[\"baou\",\"boau\"],\"breakthrough\":[\"breakthoug\"],\"brilliant\":[\"brilian\"],\"broadly\":[\"broad\"],\"buffaloes\":[\"buffalo\"],\"buffalos\":[\"buffaloe\"],\"bureaucracy\":[\"beaurocrac\",\"beaurocrac\",\"buracrac\",\"burracrac\"],\"burin\":[\"burin\"],\"burning\":[\"burin\"],\"burying\":[\"burin\"],\"business\":[\"buisnes\",\"businese\",\"busnes\"],\"businesses\":[\"businese\"],\"caisson\":[\"casio\"],\"calculate\":[\"caluclat\",\"caluculat\",\"calulat\"],\"calculated\":[\"caluclate\",\"caluculate\",\"calulate\"],\"calendar\":[\"calende\"],\"calligraphy\":[\"caligraph\"],\"campaign\":[\"campai\"],\"campaigns\":[\"campain\"],\"can't\":[\"can\"],\"candidate\":[\"candadat\"],\"canister\":[\"canniste\"],\"canisters\":[\"cannister\"],\"canonical\":[\"cannonica\"],\"cant\":[\"can\"],\"capability\":[\"caperbilit\"],\"carcass\":[\"carca\"],\"caring\":[\"carein\"],\"carnivorous\":[\"carniverou\"],\"cartilage\":[\"cartileg\",\"cartilidg\"],\"cartographer\":[\"carthographe\"],\"cartridge\":[\"cartrig\"],\"cassette\":[\"casett\"],\"cassowary\":[\"cassawor\",\"cassowarr\"],\"casualties\":[\"casulatie\",\"causalitie\"],\"casualty\":[\"casulat\"],\"categories\":[\"catagorie\"],\"category\":[\"catagor\"],\"caterpillar\":[\"catterpila\"],\"caterpillars\":[\"catterpilar\"],\"catholic\":[\"cathli\"],\"cemeteries\":[\"cemetarie\"],\"cemetery\":[\"cemetare\",\"cemetar\",\"cemetar\"],\"censor\":[\"censu\"],\"censure\":[\"censu\",\"sensur\"],\"census\":[\"cencu\"],\"centuries\":[\"centruie\"],\"century\":[\"centru\"],\"ceremonial\":[\"cerimonia\"],\"ceremonies\":[\"cerimonie\"],\"ceremonious\":[\"cerimoniou\"],\"ceremony\":[\"cerimon\"],\"certain\":[\"cerati\"],\"certainty\":[\"certainit\"],\"cervical\":[\"cervia\"],\"chairman\":[\"charima\"],\"character\":[\"carachte\",\"charachte\"],\"characteristics\":[\"charistic\"],\"characterized\":[\"charaterize\"],\"characters\":[\"charachter\"],\"charismatic\":[\"carismati\"],\"chase\":[\"chas\"],\"chaser\":[\"chas\"],\"cheat\":[\"shea\",\"chee\"],\"chemical\":[\"chemcia\"],\"chemically\":[\"chemciall\",\"chemical\"],\"chemistry\":[\"chemestr\"],\"chief\":[\"chei\"],\"childbirth\":[\"childbir\"],\"children's\":[\"children\"],\"chosen\":[\"choose\"],\"church\":[\"curc\"],\"circuit\":[\"ciricui\"],\"civilian\":[\"civillia\"],\"claims\":[\"claime\"],\"clear\":[\"clae\",\"cler\"],\"clearance\":[\"cleareanc\"],\"clearer\":[\"claere\"],\"clearly\":[\"claerl\"],\"clinical\":[\"clincia\"],\"clinically\":[\"clinical\"],\"cloud\":[\"coud\"],\"coast\":[\"caos\"],\"collateral\":[\"colatera\"],\"colleague\":[\"collegu\",\"colleaqu\"],\"colleagues\":[\"collegue\"],\"collectible\":[\"collectabl\"],\"colonies\":[\"collonie\"],\"colonnade\":[\"collonad\"],\"colony\":[\"collon\"],\"coloration\":[\"colouratio\"],\"colossal\":[\"collosa\"],\"colouration\":[\"coloratio\"],\"comeback\":[\"combac\"],\"coming\":[\"commin\"],\"commandeer\":[\"comande\"],\"commander\":[\"comande\"],\"commando\":[\"comand\"],\"commandos\":[\"comando\",\"commandoe\"],\"commemorated\":[\"commmemorate\"],\"commemorative\":[\"commemerativ\"],\"commercial\":[\"commericia\"],\"commercially\":[\"commericiall\"],\"commission\":[\"comisio\",\"comissio\",\"commisio\"],\"commissioned\":[\"comisione\",\"comissione\",\"commisione\"],\"commissioner\":[\"comisione\",\"comissione\",\"commisione\"],\"commissioning\":[\"comisionin\",\"comissionin\",\"commisionin\"],\"commissions\":[\"comision\",\"comission\",\"commision\"],\"committed\":[\"comite\",\"comitte\",\"commite\",\"commite\"],\"committee\":[\"comitte\",\"commite\",\"committ\",\"comitt\",\"commite\"],\"committing\":[\"comitin\",\"comittin\",\"commitin\"],\"commonly\":[\"commongl\"],\"communication\":[\"communciatio\"],\"comparative\":[\"comparitiv\"],\"comparison\":[\"comparisio\"],\"compatibility\":[\"compatiblit\"],\"competence\":[\"competanc\"],\"competent\":[\"competan\",\"compiten\"],\"competition\":[\"competio\"],\"competitive\":[\"competiv\"],\"compiler\":[\"complie\",\"comile\"],\"completion\":[\"competio\"],\"comprehensive\":[\"comphrehensiv\"],\"compromise\":[\"comprimis\"],\"concentrate\":[\"consentrat\"],\"concentrated\":[\"consentrate\"],\"concentrates\":[\"consentrate\"],\"concept\":[\"consep\"],\"concern\":[\"conser\"],\"concerned\":[\"conserne\"],\"concerning\":[\"consernin\"],\"condemned\":[\"condemme\"],\"condition\":[\"condidtio\"],\"conditions\":[\"condidtion\"],\"confidential\":[\"confidenta\"],\"confidentially\":[\"confidentall\"],\"conform\":[\"cofor\"],\"congressional\":[\"congresiona\"],\"conjecture\":[\"conjecutr\"],\"connived\":[\"conive\"],\"connotation\":[\"cannotatio\"],\"connotations\":[\"cannotation\"],\"conqueror\":[\"conquere\"],\"conquerors\":[\"conquerer\"],\"conscious\":[\"conciou\"],\"consciously\":[\"conciousl\"],\"consciousness\":[\"conciousnes\"],\"consensus\":[\"concensu\",\"concensu\"],\"consent\":[\"conscen\"],\"conservative\":[\"conservitiv\"],\"consider\":[\"concide\",\"consdide\"],\"considered\":[\"concidere\",\"consdidere\",\"consider\"],\"considers\":[\"concider\"],\"consolidate\":[\"consolodat\"],\"consolidated\":[\"consolodate\"],\"consonant\":[\"consonen\",\"considen\"],\"consonants\":[\"consonent\"],\"consortium\":[\"consorciu\"],\"constant\":[\"constat\",\"contas\",\"contastan\"],\"constantly\":[\"constanl\"],\"constituencies\":[\"consituencie\"],\"constituency\":[\"consituenc\"],\"constituent\":[\"constituan\"],\"constituents\":[\"constituant\"],\"constitution\":[\"consitutio\",\"constituio\",\"costitutio\"],\"constitutional\":[\"consitutiona\",\"constituiona\"],\"constraints\":[\"constaint\"],\"construction\":[\"constuctio\"],\"consummate\":[\"consumat\"],\"consummated\":[\"consumate\"],\"contains\":[\"containe\",\"countain\"],\"contaminate\":[\"contaiminat\"],\"contemporaneous\":[\"contemporaneu\"],\"contemporaries\":[\"contamporarie\"],\"contemporary\":[\"contamporar\",\"contemporaneu\"],\"continuing\":[\"continuein\"],\"continuous\":[\"continou\"],\"continuously\":[\"continousl\"],\"contributor\":[\"contribute\"],\"contributors\":[\"contributer\"],\"control\":[\"control\"],\"controlled\":[\"controle\"],\"controlling\":[\"controlin\"],\"controls\":[\"controll\"],\"controversial\":[\"contravercia\",\"controvercia\"],\"controversies\":[\"controverie\"],\"controversy\":[\"contravers\",\"controverc\",\"controver\"],\"convenient\":[\"conveinen\",\"convienien\"],\"conventional\":[\"conventia\"],\"conversion\":[\"convertio\"],\"converted\":[\"coverte\"],\"converter\":[\"converto\"],\"converters\":[\"convertor\"],\"conveyor\":[\"conveye\"],\"cooperation\":[\"coorperatio\"],\"coordination\":[\"coordiantio\"],\"copy\":[\"cpo\"],\"copyright\":[\"copywrit\"],\"corporate\":[\"corparat\"],\"corporation\":[\"coorperatio\"],\"correspond\":[\"corrispon\"],\"corresponded\":[\"corrisponde\"],\"correspondent\":[\"correspondan\",\"corrispondan\"],\"correspondents\":[\"correspondant\",\"corrispondant\"],\"corresponding\":[\"correpondin\",\"correposdin\",\"corrispondin\"],\"corresponds\":[\"corrispond\"],\"corrosion\":[\"corosio\"],\"could\":[\"coud\",\"soul\"],\"councillor\":[\"councello\"],\"councillors\":[\"councellor\"],\"counsellor\":[\"councello\"],\"counsellors\":[\"councellor\"],\"counselor\":[\"councello\"],\"counselors\":[\"councellor\"],\"countries\":[\"ocuntrie\"],\"country\":[\"ocuntr\"],\"courier\":[\"coururie\"],\"couturier\":[\"coururie\"],\"covenant\":[\"convenan\"],\"covered\":[\"coverte\"],\"coveted\":[\"coverte\"],\"coy\":[\"cpo\"],\"created\":[\"creaete\"],\"criterion\":[\"critereo\"],\"criticise\":[\"critisiz\"],\"criticised\":[\"critisize\"],\"criticises\":[\"critisize\"],\"criticising\":[\"critisin\",\"critisizin\"],\"criticism\":[\"critisis\"],\"criticisms\":[\"critisism\"],\"criticize\":[\"critisiz\"],\"criticized\":[\"critisize\"],\"criticizes\":[\"critisize\"],\"criticizing\":[\"critisin\",\"critisizin\"],\"critics\":[\"criticist\"],\"crucifixion\":[\"crucifictio\",\"crucifictio\"],\"cruises\":[\"crusie\"],\"culminating\":[\"culiminatin\"],\"cumulative\":[\"cumulatativ\"],\"currently\":[\"currenl\"],\"cyan\":[\"cxa\"],\"dahl\":[\"dae\"],\"daub\":[\"dou\"],\"de_rigueur\":[\"de_rigeu\"],\"deal\":[\"dae\"],\"debatable\":[\"debateabl\"],\"deceived\":[\"decieve\"],\"decidable\":[\"decideabl\"],\"decide\":[\"desid\"],\"decidedly\":[\"decidel\"],\"deciduous\":[\"ecidiou\"],\"decipher\":[\"decyphe\"],\"deciphered\":[\"decyphere\"],\"decision\":[\"descisio\",\"disitio\"],\"decisions\":[\"descision\"],\"decompose\":[\"decomposi\"],\"decomposed\":[\"decomposite\"],\"decomposes\":[\"decomposit\"],\"decomposing\":[\"decompositin\"],\"defiance\":[\"definanc\"],\"define\":[\"deffin\"],\"defined\":[\"deffine\"],\"definite\":[\"definat\",\"defini\",\"definat\"],\"definitely\":[\"definatel\",\"definatl\",\"definetl\",\"definitl\",\"definatel\"],\"deities\":[\"dietie\",\"dietie\"],\"deity\":[\"diet\"],\"demeanor\":[\"dameno\",\"demeno\"],\"demeanour\":[\"dameno\",\"demeno\"],\"demographic\":[\"demographica\"],\"denigrating\":[\"denegratin\"],\"dependence\":[\"dependanc\"],\"dependency\":[\"dependanc\"],\"dependent\":[\"dependan\"],\"derived\":[\"deriviate\",\"dirive\"],\"derogatory\":[\"derogitor\"],\"descendant\":[\"decendan\",\"descenden\"],\"descendants\":[\"decendant\",\"decendent\",\"descendent\"],\"describe\":[\"decrib\",\"discrib\"],\"described\":[\"decribe\",\"discribe\"],\"describes\":[\"decribe\",\"discribe\"],\"describing\":[\"decribin\",\"discribin\"],\"desiccated\":[\"dessicate\"],\"designed\":[\"desgine\",\"dessigne\"],\"desirable\":[\"desireabl\"],\"despair\":[\"dispai\",\"dispai\"],\"desperate\":[\"desparat\",\"desparat\"],\"desperation\":[\"despiratio\"],\"despicable\":[\"dispicabl\"],\"despite\":[\"dispit\"],\"destroy\":[\"stro\",\"distro\"],\"destructive\":[\"distructiv\"],\"detached\":[\"detatche\"],\"detailed\":[\"detaille\"],\"determining\":[\"determininin\"],\"detrimental\":[\"detrementa\"],\"develop\":[\"develop\"],\"developed\":[\"developpe\"],\"development\":[\"delevopment\"],\"device\":[\"divic\"],\"dial\":[\"dae\"],\"didn't\":[\"didn\"],\"die\":[\"die\"],\"different\":[\"diferen\",\"diferren\",\"diffren\"],\"difficulties\":[\"dificultie\"],\"difficulty\":[\"dificult\"],\"dimension\":[\"dimentio\"],\"dimensions\":[\"dimenion\",\"dimention\"],\"diphthong\":[\"diphton\",\"dipthon\"],\"diphthongs\":[\"diphtong\",\"dipthong\"],\"directly\":[\"driectl\",\"direcyl\"],\"disagreement\":[\"dissagreemen\"],\"disappear\":[\"dissapea\",\"dissappea\"],\"disappeared\":[\"dissapeare\"],\"disappearing\":[\"dissapearin\"],\"disappears\":[\"dissapear\",\"dissappear\"],\"disapproval\":[\"disaprova\"],\"disaster\":[\"diaste\"],\"disastrous\":[\"disasterou\"],\"discontent\":[\"discontentmen\"],\"discover\":[\"dicove\"],\"discovered\":[\"dicovere\"],\"discovering\":[\"dicoverin\"],\"discovers\":[\"dicover\"],\"discovery\":[\"dicover\"],\"discuss\":[\"descus\",\"discues\"],\"disintegrated\":[\"desintegrate\"],\"disintegration\":[\"desintegratio\"],\"disobedience\":[\"disobedianc\",\"dissobedianc\",\"dissobedienc\"],\"disobedient\":[\"disobedian\",\"dissobedian\",\"dissobedien\"],\"disparagingly\":[\"disparingl\"],\"disparate\":[\"desparat\"],\"dispense\":[\"dispenc\"],\"dispensed\":[\"dispence\"],\"dispensing\":[\"dispencin\"],\"dissatisfaction\":[\"disatisfactio\"],\"dissatisfied\":[\"disatisfie\"],\"dissemination\":[\"diseminatio\"],\"dissolved\":[\"disolve\"],\"distinguish\":[\"distingis\"],\"distinguished\":[\"distingishe\"],\"distinguishes\":[\"distingishe\"],\"distinguishing\":[\"distingishin\"],\"diverged\":[\"diverse\"],\"diverse\":[\"diverse\"],\"divide\":[\"devid\"],\"divided\":[\"devide\"],\"division\":[\"diviso\"],\"divisions\":[\"divison\"],\"document\":[\"doccumen\"],\"documented\":[\"doccumente\"],\"documents\":[\"doccument\"],\"does\":[\"doen\"],\"doesn't\":[\"doesn\"],\"doing\":[\"doig\",\"doni\"],\"dominant\":[\"dominen\",\"dominian\"],\"doubt\":[\"dou\"],\"dram\":[\"dera\"],\"dramatic\":[\"dramti\"],\"dream\":[\"dera\"],\"dreams\":[\"dreas\"],\"dressing\":[\"adressin\"],\"drink\":[\"drni\"],\"drumming\":[\"drumin\"],\"dukedom\":[\"dukeshi\"],\"during\":[\"burin\",\"durrin\",\"dure\"],\"dyeing\":[\"diein\"],\"dying\":[\"diein\"],\"earned\":[\"earn\"],\"eclectic\":[\"electi\"],\"eclipse\":[\"eclisp\"],\"efficient\":[\"effecien\",\"efficen\",\"effica\"],\"efficiently\":[\"effecientl\",\"efficentl\"],\"effluence\":[\"effulenc\"],\"effort\":[\"affor\",\"effor\"],\"efforts\":[\"efford\",\"effot\"],\"eighth\":[\"eigt\"],\"election\":[\"electo\"],\"electric\":[\"electi\"],\"electrical\":[\"electria\"],\"electrically\":[\"electricl\"],\"electricity\":[\"electrict\"],\"electron\":[\"electo\"],\"elementary\":[\"elimentar\"],\"elephant\":[\"elphan\"],\"elicited\":[\"elicide\"],\"eligible\":[\"eligabl\"],\"eliminated\":[\"eleminate\"],\"eliminating\":[\"eleminatin\"],\"else\":[\"esl\"],\"emanate\":[\"eminat\"],\"embarrass\":[\"embaras\",\"embarra\",\"embaras\",\"embares\"],\"embarrassed\":[\"embarasse\",\"embarrase\"],\"embarrassing\":[\"embarassin\",\"embarrasin\"],\"embarrassment\":[\"embarassmen\",\"embarrasmen\",\"embarassmen\"],\"embezzled\":[\"embezelle\"],\"emigrant\":[\"imigran\"],\"emigrated\":[\"emmigrate\",\"imigrate\"],\"emigration\":[\"imigratio\"],\"eminent\":[\"emminen\",\"imanen\",\"iminen\"],\"eminently\":[\"emminentl\"],\"emissaries\":[\"emmisarie\",\"emmisarrie\"],\"emissary\":[\"emmisarr\",\"emmisar\"],\"emission\":[\"emisio\",\"emitio\",\"emmisio\"],\"emitted\":[\"emite\",\"emmite\",\"emmitte\"],\"emitting\":[\"emitin\",\"emmitin\",\"emmittin\"],\"emotion\":[\"emitio\"],\"emphysema\":[\"emphysym\"],\"empirical\":[\"emperica\",\"empiria\"],\"enamored\":[\"enamoure\"],\"enamoured\":[\"enamore\"],\"encryption\":[\"encryptiio\"],\"engineer\":[\"engenee\",\"engienee\"],\"engineering\":[\"engeneerin\"],\"engineers\":[\"engieneer\"],\"enlargement\":[\"enlargmen\"],\"enlargements\":[\"enlargment\"],\"enlist\":[\"enlis\"],\"enmity\":[\"emnit\"],\"enormous\":[\"enourmou\"],\"enormously\":[\"enourmousl\"],\"entertaining\":[\"intertainin\"],\"entrepreneur\":[\"entrepeneu\"],\"entrepreneurs\":[\"entrepeneur\"],\"enumerable\":[\"inumerabl\"],\"environment\":[\"enviormen\",\"enviornmen\",\"enviromen\",\"enviromen\"],\"environmental\":[\"enviormenta\",\"enviornmenta\",\"enviromenta\",\"envireminak\",\"invermeantia\"],\"environmentalist\":[\"enviornmentalis\",\"enviromentalis\"],\"environmentally\":[\"enviormentall\",\"enviornmentall\",\"enviromentall\"],\"environments\":[\"enviorment\",\"enviornment\",\"enviroment\"],\"equatorial\":[\"equitoria\"],\"equilibrium\":[\"equilibiu\",\"equilibru\"],\"equipment\":[\"equippmen\"],\"equipped\":[\"equipe\"],\"erected\":[\"ereste\"],\"erratic\":[\"erati\"],\"erratically\":[\"eraticl\"],\"essence\":[\"essens\"],\"essential\":[\"esentia\",\"essencia\",\"essentua\",\"essesita\"],\"ethos\":[\"ethos\"],\"every\":[\"evey\"],\"evidently\":[\"evidentall\"],\"evil\":[\"efe\"],\"exacerbate\":[\"exerbat\"],\"exacerbated\":[\"exerbate\"],\"exaggerate\":[\"exagerat\",\"exagerrat\"],\"exaggerated\":[\"exagerate\",\"exagerrate\"],\"exaggerates\":[\"exagerate\",\"exagerrate\"],\"exaggerating\":[\"exageratin\",\"exagerratin\"],\"exalted\":[\"exhalte\"],\"example\":[\"exempl\",\"exmapl\"],\"exceeded\":[\"excedde\"],\"excel\":[\"excel\"],\"excellent\":[\"exelen\"],\"excels\":[\"excell\"],\"excerpt\":[\"exerp\"],\"excerpts\":[\"exerpt\"],\"execute\":[\"excecut\"],\"executed\":[\"excecute\"],\"executes\":[\"excecute\"],\"executing\":[\"excecutin\"],\"execution\":[\"excecutio\",\"excutio\"],\"exempt\":[\"examp\"],\"exerted\":[\"extere\"],\"exhibition\":[\"exibitio\"],\"exhibitions\":[\"exibition\"],\"existence\":[\"existanc\",\"egsistenc\",\"existanc\"],\"existent\":[\"existan\"],\"exoskeleton\":[\"exoskelato\"],\"expects\":[\"spect\"],\"expel\":[\"expel\"],\"expels\":[\"expell\"],\"explain\":[\"expali\"],\"exploitative\":[\"exploititiv\"],\"extant\":[\"extin\"],\"external\":[\"exerterna\"],\"extinct\":[\"extin\"],\"extraordinarily\":[\"extrordinaril\"],\"extraordinary\":[\"extrordinar\"],\"extraterrestrial\":[\"extraterrestia\"],\"extravagant\":[\"extravagen\"],\"eyas\":[\"eyar\"],\"facilitate\":[\"faciliat\"],\"facilitated\":[\"faciliate\"],\"famous\":[\"famous\"],\"fanaticism\":[\"fanatis\"],\"fascinated\":[\"facinate\"],\"feasible\":[\"feasabl\"],\"feel\":[\"fie\"],\"feels\":[\"fiel\"],\"fictitious\":[\"ficticiou\",\"fictiou\"],\"field\":[\"fie\"],\"fields\":[\"fiel\"],\"filament\":[\"filiamen\"],\"file\":[\"fie\"],\"files\":[\"fiel\"],\"finally\":[\"fianll\",\"final\"],\"financially\":[\"financial\"],\"find\":[\"fid\"],\"first\":[\"firt\"],\"fled\":[\"flee\"],\"flirts\":[\"firt\"],\"flourish\":[\"fluoris\"],\"fluorescent\":[\"florescen\"],\"forbade\":[\"forba\"],\"forehead\":[\"forhea\"],\"foreign\":[\"forieg\"],\"foremost\":[\"formos\"],\"forerunner\":[\"forunne\"],\"forfeit\":[\"forfie\"],\"form\":[\"fom\"],\"formalize\":[\"formalliz\"],\"formalized\":[\"formallize\"],\"forty\":[\"fourt\"],\"fought\":[\"faugh\",\"fougt\"],\"found\":[\"foud\"],\"foundries\":[\"foundarie\"],\"foundry\":[\"foundar\"],\"freed\":[\"flee\"],\"friend\":[\"frein\"],\"friends\":[\"firend\"],\"from\":[\"fom\"],\"fundamental\":[\"fundameta\"],\"fundamentals\":[\"fundametal\"],\"fungi\":[\"funguse\"],\"further\":[{\"synonym\":\"farther\"}],\"gale\":[\"ga\"],\"game\":[\"ga\"],\"gases\":[\"gasse\"],\"genealogies\":[\"geneologie\"],\"genealogy\":[\"geneolog\"],\"generally\":[\"general\",\"generl\"],\"genitalia\":[\"geniali\"],\"goddess\":[\"godes\"],\"goddesses\":[\"godesse\"],\"going\":[\"gogi\",\"goig\",\"goni\",\"ogin\"],\"gourd\":[\"gaur\"],\"government\":[\"govermen\",\"govormen\",\"gobermen\",\"gobernemen\",\"gobernmen\"],\"governmental\":[\"govermenta\",\"govormenta\"],\"governor\":[\"gouvene\",\"governe\"],\"graffiti\":[\"grafitt\"],\"grammar\":[\"gramme\",\"gramme\"],\"grammatically\":[\"gramaticall\",\"grammatical\"],\"grateful\":[\"greatfu\"],\"gratefully\":[\"greatfull\"],\"gratuitous\":[\"gratuitiou\"],\"great\":[\"gera\",\"grae\",\"gra\"],\"grief\":[\"grei\"],\"group_sex\":[\"groupse\"],\"grow\":[\"grw\"],\"guanine\":[\"gunanin\"],\"guarantee\":[\"guarente\"],\"guaranteed\":[\"garantee\",\"guarentee\",\"gurantee\"],\"guarantees\":[\"guarentee\"],\"guard\":[\"gaur\",\"gaur\"],\"guerilla\":[\"guerril\"],\"guerillas\":[\"guerrila\"],\"guerrilla\":[\"guerril\"],\"guerrillas\":[\"guerrila\"],\"guidance\":[\"guidenc\"],\"guttural\":[\"guttara\",\"guttera\"],\"habeas\":[\"habaeu\",\"habeu\"],\"happen\":[\"ahppe\",\"hape\"],\"happened\":[\"hapene\",\"happende\"],\"happening\":[\"hapenin\"],\"harass\":[\"harra\",\"harrassin\",\"harras\"],\"harassed\":[\"harase\",\"harrase\"],\"harasses\":[\"harase\",\"harrase\"],\"harassing\":[\"harrasin\"],\"harassment\":[\"harasmen\",\"harrasmen\"],\"hare\":[\"hac\"],\"have\":[\"ahe\",\"ahv\",\"hae\",\"hva\",\"hve\",\"havn\"],\"having\":[\"hvain\"],\"heave\":[\"hae\",\"hve\"],\"heritage\":[\"inheritag\"],\"heroes\":[\"hero\"],\"heterogeneous\":[\"heterogenou\"],\"holy\":[\"whol\"],\"hydrophilic\":[\"hydropili\"],\"hydrophobic\":[\"hydropobi\"],\"hygiene\":[\"hygein\"],\"hypocrisy\":[\"hypocrac\",\"hypocras\",\"hypocric\"],\"hypocrite\":[\"hypocri\"],\"hypocrites\":[\"hypocrit\"],\"iconoclastic\":[\"iconclasti\"],\"idea\":[\"die\",\"ida\"],\"ideas\":[\"idae\",\"ides\"],\"identical\":[\"identicia\"],\"ideologies\":[\"idealogie\"],\"ideology\":[\"idealog\"],\"ides\":[\"ides\"],\"idiosyncratic\":[\"ideosyncrati\"],\"illegitimacy\":[\"illegimac\"],\"illegitimate\":[\"illegitmat\",\"illegitamen\"],\"illogical\":[\"ilogica\"],\"illusion\":[\"alusio\",\"illutio\"],\"imagery\":[\"imaginer\"],\"imaginary\":[\"imagenar\",\"imaginer\"],\"imagine\":[\"imagi\"],\"imbalance\":[\"inbalanc\"],\"imitate\":[\"immitat\"],\"imitated\":[\"immitate\"],\"imitating\":[\"immitatin\"],\"imitator\":[\"immitato\"],\"immanent\":[\"iminen\",\"immenan\"],\"immediately\":[\"emmediatel\",\"imediatel\",\"immediatle\",\"immidatel\",\"immidiatel\",\"imediaetl\"],\"immense\":[\"imens\"],\"immigrant\":[\"imigran\",\"inmigran\"],\"immigrants\":[\"inmigrant\"],\"immigrated\":[\"imigrate\"],\"immigration\":[\"imigratio\"],\"imminent\":[\"emminen\",\"imanen\",\"iminen\"],\"impeach\":[\"inpeac\"],\"impedance\":[\"impedenc\"],\"imperial\":[\"empiria\"],\"impolite\":[\"inpolit\"],\"imprisonment\":[\"inprisonmen\"],\"improvisation\":[\"improvisio\"],\"in_spite\":[\"inspit\"],\"inaccessible\":[\"inaccessabl\"],\"inappropriate\":[\"inappropiat\"],\"incompatibility\":[\"incompatiblit\"],\"incompetence\":[\"incompetanc\"],\"incompetent\":[\"incompetan\"],\"incorporation\":[\"incorperatio\"],\"incorruptible\":[\"incorruptabl\"],\"incredible\":[\"increadibl\",\"incredabl\"],\"incunabula\":[\"incunabl\"],\"indefinitely\":[\"indefinatel\",\"indefinitl\"],\"independence\":[\"independanc\",\"independec\"],\"independent\":[\"independan\",\"indipenden\",\"indpenden\",\"independan\",\"independenen\",\"indepnend\"],\"independently\":[\"indepedantl\",\"independantl\",\"indipendentl\",\"indpendentl\"],\"indict\":[\"indit\"],\"indispensable\":[\"indispensibl\",\"indispensibl\"],\"indisputable\":[\"indisputibl\"],\"indisputably\":[\"indisputibl\"],\"indulge\":[\"indulgu\"],\"industrial\":[\"indutria\"],\"inevitable\":[\"inevatibl\",\"inevitibl\"],\"infectious\":[\"infectuou\"],\"infiltrate\":[\"infilitrat\"],\"infiltrated\":[\"infilitrate\"],\"infinite\":[\"infini\"],\"inflammation\":[\"inflamatio\"],\"influenced\":[\"influente\"],\"influential\":[\"influencia\",\"influencia\"],\"information\":[\"infomatio\"],\"ingredients\":[\"ingreediant\"],\"inhabitant\":[\"habitan\"],\"inhabitants\":[\"habitant\"],\"inheritance\":[\"inheritag\"],\"initiation\":[\"initatio\"],\"innocence\":[\"inocenc\"],\"innumerable\":[\"inumerabl\"],\"insidious\":[\"ecidiou\",\"incediou\"],\"insistence\":[\"insistanc\"],\"instance\":[\"instatanc\"],\"instead\":[\"instad\"],\"institution\":[\"insitutio\"],\"institutions\":[\"insitution\"],\"integrated\":[\"intergrate\"],\"integration\":[\"intergratio\"],\"intellectual\":[\"intelectua\"],\"intelligence\":[\"inteligenc\"],\"intelligent\":[\"inteligen\",\"intealign\",\"intejilen\",\"intelegen\",\"intelegnen\",\"intelejen\",\"inteligen\",\"intelign\",\"intellagan\",\"intellegen\",\"intellegin\",\"intellgn\"],\"interbred\":[\"interbrea\"],\"interbreed\":[\"interbrea\"],\"interchangeably\":[\"interchangabl\"],\"interest\":[\"intres\"],\"international\":[\"internatio\",\"internatio\"],\"interpret\":[\"interpe\",\"interpretat\"],\"interregnum\":[\"interrugu\"],\"interrelated\":[\"interelate\"],\"interrupt\":[\"interup\"],\"into\":[\"ino\"],\"introduce\":[\"inctroduc\"],\"introduced\":[\"inctroduce\"],\"intuitive\":[\"intutiv\"],\"intuitively\":[\"intutivel\"],\"inventor\":[\"invente\"],\"invertebrates\":[\"invertibrate\"],\"involvement\":[\"involvmen\"],\"ironically\":[\"ironicl\"],\"irrelevant\":[\"ireleven\"],\"irresistible\":[\"iresistabl\",\"iresistibl\",\"irresistabl\",\"irresistabl\"],\"irresistibly\":[\"iresistabl\",\"iresistibl\",\"irresistabl\"],\"irritable\":[\"iritabl\",\"irritibl\"],\"irritated\":[\"iritate\"],\"isn't\":[\"isn\"],\"jeopardy\":[\"jeapard\"],\"journeys\":[\"journie\"],\"judicial\":[\"judica\"],\"judiciary\":[\"judisuar\"],\"just\":[\"jst\",\"jsu\"],\"keratin\":[\"cerati\"],\"kindergarten\":[\"kindergarde\"],\"know\":[\"knw\",\"konw\",\"nkow\"],\"knowledge\":[\"knowleg\"],\"knowledgeable\":[\"knowledgabl\",\"knowlegeabl\"],\"knows\":[\"knwo\",\"konw\"],\"laboratory\":[\"labrator\"],\"laid\":[\"laye\"],\"language\":[\"laguag\"],\"languages\":[\"laguage\"],\"larvae\":[\"lava\"],\"last\":[\"lsa\"],\"lavatory\":[\"labator\"],\"leaf\":[\"lie\"],\"lean\":[\"lean\"],\"leaner\":[\"lean\"],\"learn\":[\"lean\",\"lera\"],\"learns\":[\"leran\"],\"led\":[\"leade\"],\"legitimate\":[\"legitamat\"],\"leisure\":[\"liesur\",\"lesur\"],\"length\":[\"lengh\"],\"level\":[\"levl\"],\"levitate\":[\"levetat\"],\"levitated\":[\"levetate\"],\"levitates\":[\"levetate\"],\"levitating\":[\"levetatin\"],\"liable\":[\"libl\"],\"liaison\":[\"liaso\",\"liaso\"],\"libel\":[\"libel\",\"libl\"],\"library\":[\"libary\"],\"licence\":[\"lisenc\",\"lisens\"],\"license\":[\"lisenc\",\"lisens\"],\"licensed\":[\"licence\"],\"licensing\":[\"licencin\"],\"lieutenant\":[\"leutenan\"],\"life\":[\"lie\"],\"light_year\":[\"lightyea\",\"lightyear\"],\"like\":[\"like\"],\"liked\":[\"liek\"],\"likelihood\":[\"likelyhoo\"],\"linguistic\":[\"libguisti\"],\"linguistics\":[\"libguistic\"],\"liquefy\":[\"liquif\",\"liquif\"],\"literature\":[\"litatur\",\"litertur\"],\"little\":[\"litte\"],\"lively\":[\"livle\"],\"loneliness\":[\"lonelynes\"],\"lonely\":[\"lonle\",\"lonl\"],\"losing\":[\"loosin\",\"lossin\"],\"lot\":[\"alo\"],\"love\":[\"loe\",\"lve\",\"<3\"],\"lying\":[\"liein\"],\"made\":[\"make\"],\"magnolia\":[\"magoli\"],\"maintenance\":[\"maintainanc\",\"maintainenc\",\"maintanc\",\"maintenenc\",\"maintanenc\"],\"majority\":[\"marjorit\",\"majaerl\",\"majoral\"],\"make\":[\"amk\",\"mka\",\"mke\"],\"makes\":[\"maks\",\"mkae\"],\"making\":[\"amkin\",\"mkain\"],\"mammal\":[\"mama\"],\"mammalian\":[\"mamalia\"],\"management\":[\"managmen\"],\"maneuver\":[\"manouve\",\"manueve\"],\"maneuverability\":[\"manoeuverabilit\",\"manouverabilit\"],\"maneuverable\":[\"manouverabl\"],\"maneuvers\":[\"manouver\",\"manuever\"],\"manoeuvrability\":[\"manoeuverabilit\",\"manouverabilit\"],\"manoeuvrable\":[\"manouverabl\"],\"manoeuvre\":[\"manouve\",\"manueve\"],\"manoeuvres\":[\"manouver\",\"manuever\"],\"manufacture\":[\"manufatur\"],\"manufactured\":[\"manufature\"],\"manufacturing\":[\"manufaturin\"],\"mare\":[\"mea\"],\"marked\":[\"make\"],\"marketing\":[\"markettin\"],\"marriage\":[\"marrag\",\"marraig\"],\"married\":[\"marryie\"],\"mass_media\":[\"massmedi\"],\"mathematician\":[\"mathmaticia\"],\"mathematicians\":[\"mathetician\",\"mathmatician\"],\"mathematics\":[\"mathamatic\"],\"mediaeval\":[\"medeiva\"],\"medicine\":[\"medacin\"],\"medieval\":[\"medeiva\"],\"member\":[\"memebe\"],\"mentioned\":[\"maintione\"],\"mere\":[\"mea\"],\"messenger\":[\"messange\"],\"metallic\":[\"metali\"],\"metallurgic\":[\"metalurgi\"],\"metallurgical\":[\"metalurgica\"],\"metallurgy\":[\"metalurg\"],\"metamorphosis\":[\"metamorphysi\"],\"midwives\":[\"midwife\"],\"milieu\":[\"milea\",\"mile\"],\"military\":[\"millitar\"],\"millennium\":[\"milenniu\",\"milleniu\",\"milleniu\"],\"millipede\":[\"milleped\"],\"miniature\":[\"minatur\"],\"ministry\":[\"minister\"],\"minuscule\":[\"miniscul\",\"miniscul\"],\"miscellaneous\":[\"miscelaneou\",\"miscellaniou\",\"miscellanou\",\"misilou\"],\"mischievous\":[\"mischeivou\",\"mischeviou\",\"mischieviou\",\"mischieviou\"],\"misdemeanor\":[\"misdameano\",\"misdemeno\"],\"misdemeanors\":[\"misdameanor\",\"misdemenor\"],\"misdemeanour\":[\"misdameano\",\"misdemeno\"],\"misdemeanours\":[\"misdameanor\",\"misdemenor\"],\"misogynist\":[\"mysogynis\"],\"misogyny\":[\"mysogyn\"],\"missel\":[\"missl\"],\"missile\":[\"misil\",\"missl\"],\"misspelling\":[\"mispellin\"],\"mizzen\":[\"misse\"],\"model\":[\"modl\"],\"moment\":[\"moen\"],\"monasteries\":[\"monestarie\"],\"monastery\":[\"monestar\"],\"monetary\":[\"monestar\"],\"money\":[\"moen\"],\"monolithic\":[\"monolit\"],\"more\":[\"mro\",\"omr\",\"mro\"],\"mortgage\":[\"morgag\"],\"most_famous\":[\"famous\"],\"motivated\":[\"motiviate\"],\"movie\":[\"move\"],\"mucous\":[\"mucuou\"],\"municipalities\":[\"muncipalitie\"],\"municipality\":[\"muncipalit\"],\"murder\":[\"mude\"],\"murdering\":[\"muderin\"],\"muscles\":[\"muscel\"],\"mussels\":[\"muscel\"],\"myriad\":[\"myrai\"],\"myself\":[\"myse\"],\"mysterious\":[\"misteriou\",\"misteryou\",\"mysterou\"],\"mystery\":[\"mister\"],\"natural\":[\"naturua\"],\"naturally\":[\"natural\",\"naturel\",\"naturuall\"],\"necessarily\":[\"neccesaril\",\"neccessaril\",\"necesaril\",\"nessasaril\"],\"necessary\":[\"neccesar\",\"neccessar\",\"necesar\",\"neccessar\",\"necesar\",\"necesse\"],\"need\":[\"ene\"],\"negligible\":[\"neglibl\",\"negligabl\"],\"negotiate\":[\"negociat\"],\"negotiation\":[\"negociatio\",\"negotatio\"],\"neighbor\":[\"neigbou\",\"neighbou\"],\"neighboring\":[\"neigbourin\"],\"neighbors\":[\"neigbour\"],\"neighbour\":[\"neigbou\",\"neighbo\"],\"neighbouring\":[\"neigbourin\"],\"neighbours\":[\"neigbour\"],\"next\":[\"nex\",\"enxt\"],\"nice\":[\"neic\"],\"nickel\":[\"nickl\"],\"niece\":[\"neic\",\"neic\"],\"nineteenth\":[\"ninteent\"],\"ninety\":[\"nint\"],\"ninth\":[\"ninet\"],\"no_one\":[\"noon\",\"noon\"],\"north\":[\"not\"],\"northeastern\":[\"northereaster\"],\"northern\":[\"northe\",\"nother\"],\"not\":[\"nt\",\"ono\"],\"notable\":[\"noteabl\"],\"notably\":[\"noteabl\"],\"note\":[\"ono\"],\"noticeable\":[\"noticabl\",\"noticibl\"],\"noticing\":[\"noticein\"],\"notoriety\":[\"noteriet\"],\"nouveau\":[\"novea\"],\"nuclear\":[\"nucula\",\"nuculea\"],\"nuisance\":[\"nuisans\",\"nusanc\"],\"nutrient\":[\"nutriten\"],\"nutrients\":[\"nutritent\"],\"obedience\":[\"obedianc\"],\"obedient\":[\"obedian\"],\"obstacle\":[\"obstaca\"],\"occasion\":[\"ocasio\",\"ocassio\",\"occassio\",\"ocassio\"],\"occasional\":[\"ocasiona\",\"ocassiona\",\"occassiona\"],\"occasionally\":[\"ocasionall\",\"ocasional\",\"ocassionall\",\"occassionall\",\"occassional\",\"accosinl\",\"occusional\"],\"occasioned\":[\"ocasione\",\"ocassione\",\"occassione\"],\"occasions\":[\"ocasion\",\"ocassion\",\"occassion\"],\"occur\":[\"occur\",\"ocur\"],\"occurred\":[\"occure\",\"ocurre\"],\"occurrence\":[\"occuranc\",\"occurenc\",\"occurranc\",\"ocurranc\",\"ocurrenc\",\"occurenc\"],\"occurrences\":[\"occurance\",\"occurence\",\"occurrance\"],\"occurring\":[\"occurin\"],\"octahedral\":[\"octohedra\"],\"octahedron\":[\"octohedro\"],\"official\":[\"offica\"],\"officially\":[\"officall\",\"offical\",\"official\"],\"ogling\":[\"ogin\"],\"omission\":[\"omisio\",\"ommisio\"],\"omitted\":[\"omite\",\"ommite\",\"ommitte\"],\"omitting\":[\"omitin\",\"ommitin\",\"ommittin\"],\"omnivorous\":[\"omniverou\"],\"omnivorously\":[\"omniverousl\"],\"one\":[\"noon\"],\"only\":[\"lonl\",\"ony\"],\"ophthalmic\":[\"opthalmi\"],\"ophthalmologist\":[\"opthalmologis\",\"opthamologis\"],\"ophthalmology\":[\"opthalmolog\"],\"opinion\":[\"oppinio\"],\"opponent\":[\"oponen\"],\"opportunity\":[\"oportunit\"],\"opposite\":[\"oposit\"],\"opposition\":[\"opositio\"],\"oppression\":[\"opressio\"],\"oppressive\":[\"opressiv\"],\"optimism\":[\"optomis\"],\"orally\":[\"erall\"],\"organ\":[\"orgi\"],\"organism\":[\"organi\"],\"origin\":[\"orgi\"],\"original\":[\"orgina\",\"origiona\"],\"originally\":[\"original\",\"originnall\",\"orignall\"],\"other\":[\"oteh\"],\"overshadowed\":[\"overshaddowe\"],\"overwhelming\":[\"overwelmin\"],\"oxygen\":[\"oxige\"],\"oxymoron\":[\"oximoro\"],\"paid\":[\"paid\",\"paye\"],\"palace\":[\"palc\"],\"pamphlet\":[\"pample\"],\"pantomime\":[\"pantomin\"],\"parakeets\":[\"parrakeet\"],\"parallel\":[\"parale\",\"paralel\",\"parrale\",\"parralle\",\"parrallel\"],\"paraphernalia\":[\"paraphenali\"],\"parenthesis\":[\"paranthesi\"],\"parliamentarian\":[\"paliamentaria\"],\"particular\":[\"paritucla\",\"partruca\"],\"particularly\":[\"particularil\"],\"passed\":[\"pase\"],\"pastime\":[\"pasttim\"],\"pastoral\":[\"pastura\"],\"patented\":[\"pattente\"],\"peculiar\":[\"peculur\"],\"pejorative\":[\"perjorativ\"],\"penalty\":[\"penatl\"],\"peninsula\":[\"penninsul\",\"penninsula\",\"pennisul\"],\"peninsular\":[\"penninsula\"],\"people\":[\"peope\"],\"perceived\":[\"percepte\",\"percieve\"],\"performance\":[\"performenc\"],\"performed\":[\"performe\"],\"performs\":[\"performe\"],\"perhaps\":[\"perhas\",\"perheap\",\"perhpa\",\"perpha\"],\"peripatetic\":[\"peripatheti\"],\"perjury\":[\"perjer\"],\"permanent\":[\"permenan\"],\"permissible\":[\"permissabl\",\"permissabl\"],\"permission\":[\"premissio\",\"permitio\"],\"perpendicular\":[\"perpindicula\"],\"persistence\":[\"persistanc\"],\"persistent\":[\"persistan\"],\"personal\":[\"persone\"],\"personnel\":[\"persone\",\"personel\",\"personnel\"],\"persuade\":[\"pursuad\"],\"persuaded\":[\"pursuade\"],\"persuades\":[\"pursuade\"],\"persuading\":[\"pususadin\"],\"perturbation\":[\"pertubatio\"],\"perturbations\":[\"pertubation\"],\"petition\":[\"petetio\"],\"phenomena\":[\"phenonmen\"],\"phenomenal\":[\"phenomenona\",\"phenomenonl\",\"phenomina\"],\"phenomenally\":[\"phenomenonl\"],\"phenomenon\":[\"phenomoneno\"],\"pheromone\":[\"feromon\"],\"phial\":[\"fie\"],\"phials\":[\"fiel\"],\"philosopher\":[\"philisophe\"],\"philosophical\":[\"philisophica\"],\"philosophy\":[\"philisoph\"],\"phonetic\":[\"foneti\",\"funeti\"],\"phonograph\":[\"phongrap\"],\"piece\":[\"peic\"],\"pilgrimage\":[\"pilgrimmag\"],\"pilgrimages\":[\"pilgrimmage\"],\"pineapple\":[\"pinappl\",\"pinnapl\"],\"pitch\":[\"pic\"],\"place\":[\"palc\"],\"plaintiff\":[\"plantif\"],\"planned\":[\"plane\"],\"playwright\":[\"playwrit\",\"playwrit\"],\"playwrights\":[\"playwrite\"],\"pleasant\":[\"plesan\"],\"poem\":[\"peo\"],\"poems\":[\"peom\"],\"poetry\":[\"peotr\"],\"pogrom\":[\"progro\"],\"pogroms\":[\"progrom\"],\"poison\":[\"poisi\"],\"pollinator\":[\"polinato\"],\"pollute\":[\"polut\"],\"polluted\":[\"polute\"],\"pollutes\":[\"polute\"],\"polluting\":[\"polutin\"],\"pollution\":[\"polutio\"],\"pomegranate\":[\"pomegranit\"],\"popularity\":[\"popularat\"],\"portrayed\":[\"protraye\"],\"position\":[\"posito\",\"possitio\",\"postio\"],\"positron\":[\"posito\"],\"possess\":[\"poses\"],\"possessed\":[\"posesse\"],\"possesses\":[\"posesse\",\"possese\"],\"possessing\":[\"posessin\",\"possesin\"],\"possession\":[\"posessio\",\"possesio\"],\"possibility\":[\"possibilt\"],\"possible\":[\"possabl\",\"possabl\"],\"possibly\":[\"possabl\"],\"power\":[\"pwoe\"],\"powerful\":[\"powerful\"],\"practical\":[\"practia\",\"practicl\"],\"practically\":[\"practiall\",\"practical\",\"practicl\"],\"practitioner\":[\"practicione\"],\"practitioners\":[\"practicioner\"],\"prairie\":[\"prair\"],\"preamble\":[\"preampl\"],\"precede\":[\"precee\"],\"preceded\":[\"preceede\"],\"precedes\":[\"preceed\"],\"preceding\":[\"preceedin\",\"preceedin\"],\"precursor\":[\"precurse\"],\"predecessor\":[\"precedesso\"],\"predominately\":[\"prominatel\"],\"preferably\":[\"preferrabl\"],\"preferred\":[\"prefere\"],\"preferring\":[\"preferin\"],\"pregnancies\":[\"pregancie\"],\"premiere\":[\"premeir\"],\"premiered\":[\"premeire\"],\"preparation\":[\"prepartio\"],\"prepare\":[\"prepai\"],\"prerogative\":[\"perogativ\",\"perogativ\"],\"presence\":[\"presens\"],\"presidential\":[\"presidenta\"],\"prestigious\":[\"prestigeou\",\"prestigou\"],\"presumably\":[\"presumibl\"],\"prevalent\":[\"prevelan\"],\"previous\":[\"previvou\"],\"primitive\":[\"primativ\"],\"primitively\":[\"primativel\"],\"primitives\":[\"primative\"],\"primordial\":[\"primorda\"],\"principal\":[\"pricipa\"],\"principle\":[\"pricipl\"],\"privilege\":[\"priveleg\",\"privelig\",\"privilag\",\"priviledg\",\"privledg\",\"privielag\",\"priviledg\"],\"privileged\":[\"privelege\",\"privelige\"],\"privileges\":[\"priveledge\",\"privelege\",\"privelige\",\"priviledge\"],\"pro_tem\":[\"prote\"],\"probability\":[\"probalibit\"],\"probably\":[\"probly\",\"prolly\"],\"problem\":[\"probel\"],\"procedure\":[\"procedge\",\"proceedur\"],\"proceed\":[\"proced\"],\"proceeded\":[\"procede\"],\"proceeding\":[\"procedin\"],\"proceedings\":[\"proceding\"],\"process\":[\"procces\"],\"processing\":[\"proccessin\"],\"proclaimed\":[\"proclame\"],\"proclaiming\":[\"proclamin\"],\"proclamation\":[\"proclomatio\"],\"profession\":[\"profesio\",\"proffesio\"],\"professor\":[\"profeso\",\"proffeso\"],\"profusion\":[\"profesio\"],\"program\":[\"progro\"],\"programmable\":[\"programabl\"],\"programs\":[\"progrom\"],\"prohibition\":[\"prohabitio\"],\"prolegomena\":[\"prologomen\"],\"prolific\":[\"profili\"],\"prominence\":[\"prominanc\"],\"prominent\":[\"prominan\"],\"prominently\":[\"prominantl\",\"prominatel\"],\"promiscuous\":[\"promiscou\"],\"pronominal\":[\"pronomia\"],\"pronunciation\":[\"pronounciatio\",\"pronensiatio\",\"pronisatio\",\"pronounciatio\"],\"propaganda\":[\"propogand\"],\"propagate\":[\"propogat\"],\"propagates\":[\"propogate\"],\"propeller\":[\"propello\"],\"propellers\":[\"propellor\"],\"proper\":[\"proppe\"],\"prophecy\":[\"prophac\"],\"proportions\":[\"propotion\"],\"proprietary\":[\"propietar\",\"proprietor\"],\"proselytizing\":[\"proseletyzin\"],\"protagonist\":[\"protaganis\"],\"protagonists\":[\"protaganist\"],\"protein\":[\"prote\"],\"protuberance\":[\"protruberanc\"],\"provided\":[\"provde\"],\"pseudonym\":[\"pseudony\"],\"pseudonymous\":[\"pseudononymou\"],\"psychic\":[\"psyhi\",\"pysci\"],\"psychology\":[\"psycolog\"],\"publicly\":[\"publicall\"],\"pumpkin\":[\"pumki\"],\"purpose\":[\"perpha\"],\"purposely\":[\"purposedl\"],\"pursue\":[\"persu\",\"persu\",\"presu\"],\"pursuing\":[\"persuin\"],\"pursuit\":[\"persui\"],\"putting\":[\"putin\"],\"quantity\":[\"quantat\",\"quantiti\"],\"quarantine\":[\"quarantain\"],\"quickly\":[\"quickly\"],\"quiet\":[\"qtui\",\"quti\"],\"quite\":[\"qtui\",\"quti\"],\"quizzes\":[\"quize\"],\"rabbinical\":[\"rabinnica\"],\"rarefied\":[\"rarifie\"],\"ratify\":[\"radif\"],\"real\":[\"rel\"],\"realised\":[\"relize\"],\"realized\":[\"relize\"],\"really\":[\"erall\",\"raell\",\"real\",\"realy\",\"relal\"],\"recall\":[\"reacl\"],\"receded\":[\"receede\"],\"receding\":[\"receedin\"],\"receipt\":[\"reciep\"],\"receive\":[\"reciev\",\"reciev\"],\"received\":[\"recieve\"],\"receiver\":[\"recieve\"],\"receivers\":[\"reciever\"],\"receives\":[\"recieve\"],\"receiving\":[\"recievin\"],\"recipient\":[\"recepien\",\"recipian\"],\"recipients\":[\"recepient\",\"recipiant\"],\"recognize\":[\"recogiz\",\"reconis\"],\"recommend\":[\"reccomen\",\"reccommen\",\"recomen\",\"reccomen\"],\"recommended\":[\"reccomende\",\"reccommende\",\"recomende\"],\"recommending\":[\"reccomendin\",\"reccommendin\",\"recomendin\"],\"recommends\":[\"recomend\"],\"reconciliation\":[\"reconcilatio\"],\"reconnaissance\":[\"reconaissanc\",\"reconnaissenc\"],\"record\":[\"recro\"],\"recreational\":[\"recrationa\"],\"recurring\":[\"reccurin\",\"reoccurrin\"],\"reevaluated\":[\"revaluate\"],\"reference\":[\"referrenc\",\"refferenc\"],\"referral\":[\"refera\"],\"referred\":[\"refere\",\"reffere\"],\"referring\":[\"referin\"],\"refers\":[\"referr\"],\"refrigerator\":[\"refridgerato\"],\"refusal\":[\"refusl\"],\"regardless\":[\"irregardles\",\"irregardles\"],\"regular\":[\"reglua\"],\"regularly\":[\"reguarl\",\"regularil\"],\"rehearsal\":[\"rehersa\"],\"relationship\":[\"relatiopnshi\"],\"relatively\":[\"relativl\"],\"relevance\":[\"relevenc\"],\"relevant\":[\"releven\"],\"relieve\":[\"releiv\"],\"relieved\":[\"releive\"],\"religious\":[\"religeou\",\"religou\"],\"remember\":[\"remebe\"],\"remembrance\":[\"rememberanc\",\"remembrenc\"],\"reminiscent\":[\"reminescen\"],\"remnant\":[\"reminen\"],\"renown\":[\"reknow\"],\"renowned\":[\"reknowne\"],\"repartition\":[\"repatitio\"],\"repentance\":[\"repentenc\"],\"repentant\":[\"repenten\"],\"repetition\":[\"repatitio\",\"repetio\",\"repititio\"],\"representative\":[\"representiv\"],\"representatives\":[\"representive\"],\"required\":[\"recquire\"],\"resemblance\":[\"resemblenc\",\"ressemblanc\",\"ressemblenc\",\"reseblenc\"],\"resemble\":[\"ressembl\"],\"resembled\":[\"ressemble\"],\"resembling\":[\"ressemblin\"],\"reside\":[\"recid\"],\"resided\":[\"recide\"],\"resident\":[\"reciden\"],\"residents\":[\"recident\"],\"residing\":[\"recidin\"],\"resistance\":[\"resistenc\"],\"resistant\":[\"resisten\"],\"resistible\":[\"resistabl\"],\"response\":[\"repons\",\"responc\"],\"responsibility\":[\"responnsibilt\"],\"responsible\":[\"reponsibl\",\"reposabl\"],\"restaurant\":[\"restaraun\",\"resteraun\",\"restraun\"],\"restaurants\":[\"restaraunt\",\"resteraunt\"],\"restoration\":[\"restauratio\"],\"restraint\":[\"restraun\"],\"resurrecting\":[\"resurectin\"],\"resurrection\":[\"ressurectio\"],\"retaliated\":[\"retalitate\"],\"retaliation\":[\"retalitatio\"],\"reversible\":[\"reversabl\"],\"revolutionary\":[\"revolutiona\"],\"rewrite\":[\"rewrie\"],\"rhyme\":[\"rhymm\"],\"rhythm\":[\"rhythe\",\"rhythi\",\"rythe\",\"rythi\",\"ryth\"],\"ridiculous\":[\"rediculou\"],\"rigor\":[\"rigeu\"],\"rigorous\":[\"rigourou\"],\"rigour\":[\"rigeu\"],\"ringing\":[\"riningin\"],\"rococo\":[\"rococc\"],\"room-mate\":[\"roomat\"],\"roommate\":[\"roomat\"],\"roughly\":[\"rougl\",\"rough\"],\"rule\":[\"rull\"],\"sacrifice\":[\"sacrafic\"],\"safety\":[\"safte\"],\"salary\":[\"saler\"],\"same\":[\"sma\"],\"sandwich\":[\"sandwhic\"],\"sassy\":[\"sas\"],\"satellite\":[\"satelit\",\"sattelit\"],\"satellites\":[\"satelite\",\"sattelite\"],\"satyr\":[\"soty\"],\"says\":[\"sas\",\"sya\"],\"scalable\":[\"scaleabl\"],\"schedule\":[\"schedua\"],\"scholarly\":[\"scholarsti\"],\"scholastic\":[\"scholarsti\"],\"sclera\":[\"cler\"],\"script\":[\"scirp\",\"scripo\"],\"scroll\":[\"scol\"],\"secede\":[\"secee\"],\"seceded\":[\"secceede\",\"seceede\"],\"secretary\":[\"secratar\",\"secreter\"],\"seize\":[\"siez\",\"siez\"],\"seized\":[\"sieze\"],\"seizing\":[\"siezin\"],\"seizure\":[\"siezur\"],\"seizures\":[\"siezure\"],\"sense\":[\"senc\",\"senc\"],\"separate\":[\"seperat\",\"seperat\"],\"separated\":[\"seperate\"],\"separately\":[\"seperatel\"],\"separates\":[\"seperate\"],\"separating\":[\"seperatin\"],\"separation\":[\"seperatio\"],\"sepulcher\":[\"sepulchur\",\"sepulcr\"],\"sepulchre\":[\"sepulchur\",\"sepulcr\"],\"sergeant\":[\"sargan\"],\"serval\":[\"cervia\"],\"servile\":[\"cervia\"],\"several\":[\"severea\",\"sefera\"],\"severely\":[\"severle\"],\"shadow\":[\"shaddo\"],\"sheath\":[\"shea\"],\"sheet\":[\"shea\"],\"sheriff\":[\"sheri\"],\"shining\":[\"shinein\"],\"should\":[\"shoud\",\"shoudl\",\"soul\"],\"shouldn't\":[\"shoudl\",\"shouldn\"],\"show\":[\"soh\"],\"sidereal\":[\"sederea\",\"sidera\"],\"siege\":[\"seig\"],\"signatories\":[\"signitorie\"],\"signatory\":[\"signitor\"],\"significantly\":[\"signifantl\",\"significentl\"],\"similar\":[\"similia\",\"simmila\"],\"similarity\":[\"similiarit\"],\"similarly\":[\"similaril\"],\"simpler\":[\"simplie\"],\"simply\":[\"simple\",\"simply\"],\"simultaneous\":[\"simultanou\"],\"since\":[\"sicn\",\"sins\"],\"sincerely\":[\"sincerle\"],\"sines\":[\"sins\"],\"singsong\":[\"singso\"],\"size\":[\"siez\"],\"sized\":[\"sieze\"],\"sizing\":[\"siezin\"],\"sneeze\":[\"snes\"],\"sold\":[\"soul\"],\"soldiers\":[\"solider\"],\"soliloquy\":[\"soliliqu\"],\"solitary\":[\"solatar\"],\"some\":[\"smo\",\"soe\"],\"sophisticated\":[\"sophicate\",\"suphisticate\"],\"sophomore\":[\"sophmor\"],\"sound\":[\"soud\"],\"sounds\":[\"soudn\"],\"soup\":[\"suo\"],\"south\":[\"sourt\"],\"southern\":[\"sourther\"],\"souvenir\":[\"souvenie\"],\"souvenirs\":[\"souvenier\"],\"sovereign\":[\"soverig\"],\"sovereignty\":[\"sovereignit\",\"soverignit\"],\"specialised\":[\"speciallize\"],\"specialized\":[\"speciallize\"],\"specific\":[\"speci\"],\"specify\":[\"speci\"],\"specimen\":[\"specima\"],\"spectacular\":[\"spectaucla\"],\"speech\":[\"speac\"],\"spermatozoa\":[\"spermatozoa\"],\"spermatozoon\":[\"spermatozoa\"],\"sponsor\":[\"sponse\"],\"sponsored\":[\"sponzore\",\"sponsere\"],\"spontaneous\":[\"spontanou\"],\"spread\":[\"spreade\"],\"start\":[\"stra\"],\"statement\":[\"statmen\"],\"stop\":[\"stp\"],\"stories\":[\"storei\",\"storis\"],\"story\":[\"sotr\",\"soty\",\"stopr\",\"stoy\",\"stro\"],\"strand\":[\"strna\"],\"strange\":[\"stang\"],\"strata\":[\"stra\"],\"strategic\":[\"startegi\"],\"strategies\":[\"startegie\",\"stradegie\"],\"strategy\":[\"starteg\",\"stradeg\"],\"strength\":[\"strengh\"],\"strengthen\":[\"strenghe\",\"strenghte\"],\"strengthened\":[\"strenghene\",\"strenghtene\"],\"strengthening\":[\"strenghenin\",\"strenghtenin\"],\"strenuous\":[\"strenou\"],\"strictest\":[\"strictis\"],\"stringent\":[\"stingen\"],\"striven\":[\"strive\"],\"strongest\":[\"stornegs\"],\"strove\":[\"strive\"],\"structure\":[\"stuctur\"],\"structured\":[\"stucture\"],\"stubbornness\":[\"stubbornes\"],\"study\":[\"studd\"],\"stylus\":[\"stilu\"],\"subpoena\":[\"sepin\",\"subpen\"],\"subsidiary\":[\"subsidar\",\"subsiduar\"],\"substance\":[\"substac\"],\"substantial\":[\"substatia\"],\"subterranean\":[\"subterrania\"],\"subtract\":[\"substrac\"],\"subtracted\":[\"substracte\"],\"subtracting\":[\"substractin\"],\"subtraction\":[\"substractio\"],\"subtracts\":[\"substract\"],\"succeed\":[\"secee\",\"sucee\"],\"succeeded\":[\"secceede\",\"seceede\",\"suceede\"],\"succeeding\":[\"suceedin\"],\"succeeds\":[\"suceed\"],\"success\":[\"suces\"],\"successes\":[\"sucesse\"],\"successful\":[\"succesfu\",\"successful\",\"sucesfu\",\"sucessful\"],\"successfully\":[\"succesfull\",\"succesful\",\"sucesfull\",\"sucesful\",\"sucessfull\",\"sucessful\"],\"succession\":[\"succesio\",\"sucesio\",\"sucessio\"],\"successive\":[\"succesiv\",\"sucessiv\"],\"sufficient\":[\"sufficen\"],\"sufficiently\":[\"sufficentl\"],\"suffrage\":[\"sufferag\"],\"summary\":[\"sumar\"],\"superintendent\":[\"superintendan\"],\"supersede\":[\"superced\",\"superced\"],\"superseded\":[\"supercede\"],\"supplanted\":[\"surplante\"],\"support\":[\"wuppor\"],\"suppose\":[\"supos\"],\"supposed\":[\"supose\"],\"supposedly\":[\"suposedl\"],\"supposes\":[\"supose\"],\"supposing\":[\"suposin\"],\"suppress\":[\"supres\"],\"suppressed\":[\"supresse\",\"surpresse\"],\"suppresses\":[\"supresse\"],\"suppressing\":[\"supressin\"],\"surely\":[\"surle\"],\"surly\":[\"surle\"],\"surprise\":[\"supris\",\"supriz\",\"surpriz\"],\"surprised\":[\"suprise\",\"suprize\",\"surprize\"],\"surprising\":[\"suprisin\",\"suprizin\",\"surprizin\"],\"surprisingly\":[\"suprisingl\",\"suprizingl\",\"surprizingl\"],\"surrendered\":[\"surrende\"],\"surreptitious\":[\"surrepetitiou\",\"surreptiou\"],\"surreptitiously\":[\"surrepetitiousl\",\"surreptiousl\"],\"surround\":[\"suroun\"],\"surrounded\":[\"surounde\",\"surrende\"],\"surrounding\":[\"suroundin\"],\"surroundings\":[\"surounding\"],\"surrounds\":[\"suround\"],\"surveyor\":[\"surveye\"],\"survivors\":[\"surviver\"],\"susceptible\":[\"suseptibl\"],\"swear\":[\"swae\"],\"swears\":[\"swaer\"],\"swimming\":[\"swimin\"],\"symmetric\":[\"symmetra\"],\"symmetrical\":[\"symetrica\"],\"symmetrically\":[\"symetricall\",\"symmetrical\"],\"symmetry\":[\"symetr\"],\"synonymous\":[\"synonomou\"],\"syphilis\":[\"syphylli\"],\"syrup\":[\"syra\"],\"take\":[\"tak\",\"taek\"],\"takes\":[\"tkae\"],\"taking\":[\"tkain\"],\"talked\":[\"talek\"],\"talking\":[\"tlakin\"],\"targeted\":[\"targette\"],\"targeting\":[\"targettin\"],\"taste\":[\"tas\"],\"tattoos\":[\"tattooe\",\"tatto\"],\"taught\":[\"teache\"],\"taxonomic\":[\"taxanomi\"],\"taxonomy\":[\"taxanom\"],\"technician\":[\"techicia\"],\"technicians\":[\"techician\"],\"temperament\":[\"tempermen\"],\"temperate\":[\"temparat\"],\"temperature\":[\"tempertur\"],\"tendencies\":[\"tendancie\"],\"tendency\":[\"tendanc\"],\"tennis_player\":[\"tennisplaye\"],\"tentacle\":[\"tenacl\"],\"tentacles\":[\"tenacle\"],\"terrestrial\":[\"terrestia\"],\"territories\":[\"terriorie\"],\"territory\":[\"terrior\"],\"terrorist\":[\"territoris\"],\"than\":[\"than\",\"then\"],\"that\":[\"taht\",\"tht\",\"dat\",\"daht\",\"taht\"],\"the\":[{\"spelling\":\"the\",\"weight\":2},{\"spelling\":\"thi\",\"weight\":1},{\"spelling\":\"dee\",\"weight\":1},{\"spelling\":\"de\",\"weight\":1}],\"theater\":[\"theathe\"],\"theatre\":[\"theathe\"],\"their\":[\"the\",\"ther\",\"thie\"],\"themselves\":[\"themself\",\"theirselve\"],\"then\":[{\"synonym\":\"than\"}],\"theologian\":[\"theologis\"],\"there\":[\"the\"],\"these\":[\"thees\"],\"they\":[\"teh\",\"tyh\"],\"thickening\":[\"thiknin\"],\"thief\":[\"thei\"],\"thieves\":[\"theive\"],\"thing\":[\"thig\",\"thni\"],\"things\":[\"thign\",\"thigs\",\"thnig\"],\"think\":[\"thik\",\"thiun\",\"tihk\"],\"thinking\":[\"thiknin\"],\"thinks\":[\"thikn\"],\"third\":[\"thri\"],\"this\":[\"ths\",\"tih\",\"th\"],\"thoroughly\":[\"throughl\"],\"those\":[\"ethos\",\"thso\"],\"three\":[\"three\"],\"threshold\":[\"threshhol\"],\"through\":[\"through\",\"thr\"],\"throughout\":[\"through\",\"thruou\"],\"time\":[\"tie\",\"timn\",\"tiom\"],\"tobacco\":[\"tobbac\"],\"today\":[\"tody\"],\"today's\":[\"today\"],\"tolerance\":[\"tolerenc\"],\"tomatoes\":[\"tomato\"],\"tome\":[\"tiom\"],\"tomorrow\":[\"tommoro\",\"tommorro\",\"tommorro\",\"tomoro\"],\"tonight\":[\"tongih\"],\"torch\":[\"tourc\"],\"tornadoes\":[\"tornado\"],\"toroidal\":[\"torioda\"],\"touch\":[\"tourc\"],\"toward\":[\"towra\"],\"town\":[\"two\"],\"traditionally\":[\"traditional\"],\"traffic\":[\"trafi\"],\"trafficked\":[\"traffice\"],\"transcendence\":[\"transcendanc\"],\"transcendent\":[\"trancenden\",\"transcendan\"],\"transcendental\":[\"transcendentationa\"],\"transcending\":[\"trancendin\",\"transendin\"],\"transcribing\":[\"transcriptin\"],\"transcription\":[\"transcriptin\"],\"transferred\":[\"transfere\"],\"transferring\":[\"transferin\"],\"translator\":[\"translate\"],\"translators\":[\"translater\"],\"transmissible\":[\"transmissabl\"],\"tremolo\":[\"tremel\"],\"trilogy\":[\"triolog\"],\"troops\":[\"troup\"],\"troupes\":[\"troup\"],\"truly\":[\"truel\"],\"trunk\":[\"turn\"],\"turnkey\":[\"turn\"],\"tyranny\":[\"tyran\",\"tyrran\",\"tyrran\"],\"ubiquitous\":[\"ubiquitiou\"],\"uncertainty\":[\"uncertainit\"],\"unconscious\":[\"unconciou\",\"unconscienc\"],\"unconsciousness\":[\"unconciousnes\"],\"unconventional\":[\"unconventia\"],\"undecidable\":[\"undecideabl\"],\"unfortunately\":[\"unforetunatel\",\"unfortunatl\",\"unformanll\",\"unfortall\",\"unfortunentl\"],\"unilateral\":[\"unilatrea\"],\"unilaterally\":[\"unilatreall\"],\"universities\":[\"univeristie\",\"univesitie\"],\"university\":[\"univerist\",\"univesit\"],\"unnecessarily\":[\"unneccesaril\",\"unneccessaril\",\"unnecesaril\"],\"unnecessary\":[\"unecessar\",\"unneccessar\",\"unnecesar\"],\"unpleasant\":[\"unplesan\"],\"unrepentant\":[\"unrepenten\"],\"unsaid\":[\"unse\"],\"unsubstantiated\":[\"unsubstanciate\"],\"unsuccessful\":[\"unsuccessful\",\"unsucesfu\",\"unsucessful\"],\"unsuccessfully\":[\"unsucesful\",\"unsucessfull\"],\"unsurprised\":[\"unsuprise\",\"unsuprize\",\"unsurprize\"],\"unsurprising\":[\"unsuprisin\",\"unsuprizin\",\"unsurprizin\"],\"until\":[\"until\"],\"unusable\":[\"unuseabl\"],\"unused\":[\"unse\"],\"unwieldy\":[\"unweildl\",\"unwieldl\"],\"upon\":[\"apo\"],\"usable\":[\"useabl\"],\"usage\":[\"useag\"],\"use\":[\"uis\",\"useag\"],\"used\":[\"unse\"],\"useful\":[\"useful\"],\"usefully\":[\"useful\"],\"using\":[\"usein\"],\"usually\":[\"usall\",\"usual\"],\"vacuum\":[\"vaccu\",\"vaccum\"],\"vagina\":[\"agin\"],\"valuable\":[\"valubl\",\"valueabl\"],\"varieties\":[\"varitie\"],\"variety\":[\"varit\"],\"vegetable\":[\"vegitabl\"],\"vegetables\":[\"vegitable\"],\"vengeance\":[\"venganc\"],\"venomous\":[\"venemou\"],\"veranda\":[\"merand\"],\"verification\":[\"verficatio\"],\"very\":[\"vey\",\"vre\",\"vye\",\"vyr\"],\"vicinity\":[\"vacinit\"],\"vigor\":[\"vigeu\"],\"vigorous\":[\"vigourou\"],\"vigour\":[\"vigeu\"],\"vilify\":[\"villif\"],\"villain\":[\"villia\",\"villi\"],\"villein\":[\"villi\"],\"villi\":[\"villi\"],\"visible\":[\"visabl\"],\"visibly\":[\"visabl\"],\"visiting\":[\"vistin\"],\"volcano\":[\"volcano\"],\"volcanoes\":[\"volcano\"],\"voluntary\":[\"volontar\"],\"volunteer\":[\"volontee\",\"volountee\"],\"volunteered\":[\"volonteere\",\"volounteere\"],\"volunteering\":[\"volonteerin\",\"volounteerin\"],\"volunteers\":[\"volonteer\",\"volounteer\"],\"want\":[\"wat\",\"wna\",\"man\"],\"want_to\":[\"wann\"],\"wanted\":[\"wnate\"],\"wants\":[\"wnat\"],\"warrant\":[\"warren\"],\"was\":[\"were\"],\"wasn't\":[\"wasn\"],\"weaponry\":[\"weaponar\"],\"wear\":[\"mea\"],\"weather\":[\"wethe\"],\"weird\":[\"wier\",\"wier\"],\"what\":[\"wah\",\"wht\",\"whaaa\"],\"when\":[\"weh\"],\"wherever\":[\"whereeve\"],\"whether\":[\"wethe\"],\"which\":[\"hwih\",\"whci\",\"whi\",\"whih\",\"wic\"],\"while\":[\"hwil\"],\"whole\":[\"hwol\",\"wohl\"],\"wholly\":[\"whol\"],\"wield\":[\"weil\"],\"wielded\":[\"weilde\"],\"wife\":[\"wie\"],\"wild\":[\"weil\"],\"will\":[\"iwl\",\"wiul\"],\"wintry\":[\"winter\"],\"witch\":[\"wic\"],\"with\":[\"iwt\",\"wih\",\"with\",\"wti\"],\"withdraw\":[\"withdraw\"],\"withdrawal\":[\"withdraw\"],\"within\":[\"within\"],\"women's\":[\"women\"],\"won't\":[\"won\",\"wan'\"],\"wont\":[\"won\"],\"work\":[\"owr\",\"wok\",\"wro\"],\"working\":[\"wokrin\",\"wrokin\"],\"worsened\":[\"worstene\"],\"would\":[\"owud\",\"woud\"],\"write\":[\"rwit\",\"wrie\"],\"writing\":[\"wirtin\",\"writtin\"],\"written\":[\"write\"],\"wrote\":[\"wroe\"],\"year\":[\"eya\",\"yer\"],\"years\":[\"eyar\",\"eyas\",\"yeas\",\"yera\",\"yers\",\"\"],\"nevada\":[\"nevad\"],\"presbyterian\":[\"presbyteria\"],\"rsx\":[\"rs\"],\"stephen\":[\"steffe\"],\"susan\":[\"susa\"],\"ability\":[\"abilite\"],\"accord\":[\"acor\"],\"adultery\":[\"adultr\"],\"alive\":[\"alliev\"],\"all_right\":[\"alrigh\"],\"ambivalent\":[\"ambivilan\"],\"amorphous\":[\"amourfou\"],\"amplification\":[\"amificatio\"],\"anatomy\":[\"anonom\",\"anotom\"],\"announce\":[\"annunci\"],\"announcement\":[\"annonsmen\"],\"anonymous\":[\"anynomou\"],\"appreciated\":[\"appreceiate\"],\"arctic\":[\"arti\"],\"asterisk\":[\"asteric\"],\"asymptote\":[\"asentot\"],\"at\":[\"as\"],\"attentively\":[\"atentivel\"],\"automatically\":[\"autoamll\"],\"bankrupt\":[\"bankro\"],\"battalion\":[\"batallio\"],\"better\":[\"mette\"],\"bleat\":[\"blai\"],\"boycott\":[\"boygo\"],\"broccoli\":[\"brocoll\"],\"browse\":[\"bbros\"],\"buoyant\":[\"bouyan\"],\"bureau\":[\"beaur\"],\"bush\":[\"buc\"],\"butter\":[\"bude\",\"bud\",\"budte\"],\"button\":[\"buto\"],\"by_by\":[\"byb\"],\"caller\":[\"caule\"],\"came\":[\"gamn\"],\"caveats\":[\"cravet\"],\"changing\":[\"changein\"],\"circle\":[\"cicl\",\"circu\"],\"circumstances\":[\"circumstace\"],\"club\":[\"clo\"],\"cockamamie\":[\"cocamen\"],\"colloquialism\":[\"colloquilis\"],\"colon\":[\"coal\"],\"column\":[\"column\"],\"combo\":[\"cumb\"],\"commercials\":[\"commercias\"],\"commitment\":[\"comitmmen\",\"comittme\",\"comittmen\"],\"companies\":[\"company\"],\"complicated\":[\"compicate\"],\"computer\":[\"cumputer\",\"cumputr\",\"comptuer\"],\"congratulations\":[\"congradulation\"],\"consistent\":[\"considen\"],\"continue\":[\"contuni\"],\"contribution\":[\"conibatio\"],\"coolly\":[\"cool\"],\"coping\":[\"coppin\"],\"cosmopolitan\":[\"cosmoplyto\"],\"court\":[\"cours\"],\"crazy\":[\"cras\"],\"credibility\":[\"credetabilit\"],\"critique\":[\"criqitu\",\"ctitiqu\"],\"croak\":[\"crok\"],\"crucified\":[\"crusife\"],\"customization\":[\"custamisatio\"],\"daily\":[\"dal\"],\"dangerous\":[\"danguage\"],\"dangle\":[\"dongl\"],\"defence\":[\"defens\"],\"defense\":[\"defenc\"],\"defiantly\":[\"defenl\"],\"dependable\":[\"dependebl\"],\"description\":[\"descrptio\",\"descrpt\"],\"desiccate\":[\"dessicat\"],\"developments\":[\"develepmen\"],\"dictionary\":[\"ductioneer\"],\"dinosaur\":[\"dinasau\",\"dinasou\"],\"disagree\":[\"diagre\"],\"discussion\":[\"disssicio\"],\"dissect\":[\"disec\"],\"dissipate\":[\"disippat\"],\"distant\":[\"destin\"],\"distort\":[\"distar\"],\"distract\":[\"distarc\"],\"divulge\":[\"devulg\"],\"documentation\":[\"documtation\"],\"dog\":[\"da\",\"doo\"],\"download\":[\"doenloa\"],\"draft\":[\"deaf\"],\"dramatically\":[\"dramaticl\"],\"drunkenness\":[\"drunkenes\"],\"due\":[\"du\"],\"dynamic\":[\"dymati\",\"dynai\"],\"ecstasy\":[\"ecstac\"],\"efficacy\":[\"efficit\"],\"elegant\":[\"elagen\",\"elligi\"],\"embed\":[\"imbe\"],\"encapsulation\":[\"encapsualtio\"],\"encyclopedia\":[\"encyclapidi\",\"encyclopi\"],\"engine\":[\"engin\"],\"enhance\":[\"enhenc\"],\"enlightenment\":[\"enligtmen\"],\"ennui\":[\"ennuu\"],\"enough\":[\"enough\"],\"epitome\":[\"epitom\"],\"error\":[\"errar\",\"err\"],\"espresso\":[\"express\"],\"etiology\":[\"eitiolog\"],\"evaluation\":[\"evaualtio\"],\"eventually\":[\"evtuall\"],\"everything\":[\"evethin\"],\"exceed\":[\"exced\"],\"except\":[\"excp\"],\"exercise\":[\"excercis\"],\"exhilaration\":[\"exhileratio\"],\"expedient\":[\"exspidien\"],\"explicitly\":[\"expleyl\",\"explit\"],\"extensions\":[\"extion\"],\"factorization\":[\"factontio\"],\"failure\":[\"faile\"],\"fantasia\":[\"phantasi\"],\"fantasy\":[\"famdas\"],\"favor\":[\"fave\"],\"favour\":[\"fave\"],\"fax\":[\"fax\"],\"festival\":[\"fistiva\"],\"fiery\":[\"fire\"],\"flattering\":[\"flatterrin\"],\"flux\":[\"flu\",\"fluks\"],\"foresee\":[\"forse\"],\"frustrating\":[\"frustartaio\"],\"function\":[\"fuctio\"],\"gotten\":[\"gotto\"],\"graceful\":[\"graceful\"],\"gradually\":[\"gradual\"],\"guts\":[\"fut\"],\"happily\":[\"hapil\"],\"height\":[\"height\"],\"hello\":[\"hall\",\"hel\",\"herl\"],\"help\":[\"heell\",\"hell\",\"hl\"],\"higher\":[\"hige\"],\"hippopotamus\":[\"hippopotamou\"],\"horse\":[\"hours\"],\"housing\":[\"houssin\"],\"however\":[\"howave\",\"howve\"],\"humanity\":[\"humanit\"],\"hyphen\":[\"hifi\",\"hifin\",\"hiphin\",\"hyfi\"],\"hypothesis\":[\"hypotathe\",\"hypotathes\"],\"hysterical\":[\"hystrica\"],\"implements\":[\"implemte\"],\"in_case\":[\"incas\"],\"in_depth\":[\"indept\"],\"in_fact\":[\"infac\"],\"inadvertent\":[\"inadvertan\"],\"incomplete\":[\"incomplee\",\"incomplo\"],\"inconvenience\":[\"inconvienc\"],\"inconvenient\":[\"inconvenan\"],\"indent\":[\"iden\"],\"inefficient\":[\"inefficit\"],\"infamy\":[\"imfam\"],\"initial\":[\"inita\"],\"initialized\":[\"initinize\",\"initize\"],\"inoculate\":[\"innoculat\"],\"insistent\":[\"insistan\",\"insistene\"],\"installation\":[\"instulatio\"],\"interested\":[\"interte\",\"intertes\"],\"interface\":[\"inerfac\"],\"interpreter\":[\"interprette\"],\"inventions\":[\"envention\"],\"isotope\":[\"isotro\"],\"iterate\":[\"interat\"],\"john\":[\"johh\"],\"judgement\":[\"judgmen\"],\"judgment\":[\"judgemen\"],\"kilometer\":[\"lilomete\"],\"kilometre\":[\"lilomete\"],\"kipper\":[\"kippu\"],\"knowing\":[\"knawin\"],\"laser\":[\"luse\"],\"latest\":[\"latex\"],\"layer\":[\"lloye\"],\"leave\":[\"leasv\"],\"lesion\":[\"liasio\"],\"likely\":[\"likl\"],\"madness\":[\"maddnes\"],\"marshal\":[\"marshal\"],\"masks\":[\"mak\"],\"maximum\":[\"maxiu\"],\"media\":[\"midi\"],\"memento\":[\"moment\"],\"memory\":[\"meor\"],\"metaphysical\":[\"pataphysica\"],\"mike\":[\"mi\"],\"minimum\":[\"minu\"],\"monkey\":[\"minka\",\"monka\"],\"mosaic\":[\"mosai\"],\"most_likely\":[\"mostlikel\"],\"mouser\":[\"mous\"],\"moving\":[\"ovin\"],\"naive\":[\"niev\"],\"nickelodeon\":[\"nickleodeo\"],\"not_in\":[\"noti\"],\"noticeably\":[\"noticabl\"],\"nuzzled\":[\"nozle\"],\"obfuscate\":[\"obsfuscat\"],\"objects\":[\"objectsio\"],\"occupied\":[\"occuppie\"],\"octogenarian\":[\"octagenaria\"],\"old\":[\"ol\"],\"opossum\":[\"opposi\"],\"organize\":[\"organis\",\"organi\"],\"orient\":[\"orientat\"],\"oscilloscope\":[\"oscilascop\"],\"parameter\":[\"parameti\"],\"parameters\":[\"paramer\",\"paranet\"],\"pattern\":[\"patte\"],\"peremptory\":[\"preemptor\"],\"permissive\":[\"permmasivi\"],\"phone\":[\"fon\"],\"picturesque\":[\"picaresqu\"],\"police\":[\"pollic\"],\"politic\":[\"politic\"],\"politician\":[\"polatio\"],\"polygamy\":[\"poligam\"],\"polypropylene\":[\"polypropalen\"],\"portray\":[\"protra\"],\"pragmatism\":[\"pragmaticis\"],\"precision\":[\"precio\",\"precio\"],\"prefixed\":[\"prefix\"],\"prefixes\":[\"prefice\"],\"problematic\":[\"proplemati\"],\"procedures\":[\"proceedure\"],\"properly\":[\"properall\"],\"psychologist\":[\"pscolgs\",\"psicolages\",\"psycolages\",\"sicolages\"],\"pursued\":[\"presue\"],\"quiz\":[\"quo\"],\"raccoon\":[\"reccon\"],\"radius\":[\"radiou\"],\"rampantly\":[\"ramplil\"],\"rank\":[\"wran\"],\"rectangle\":[\"rectangele\"],\"redesign\":[\"redig\"],\"replacement\":[\"replasment\"],\"respect\":[\"respc\"],\"respectfully\":[\"respecall\"],\"room\":[{\"spelling\":\"room\",\"weight\":10},{\"spelling\":\"roo\",\"weight\":1}],\"rudimentary\":[\"rudemtr\"],\"running\":[\"runnun\"],\"sacrilegious\":[\"sacreligiou\"],\"safely\":[\"saftl\"],\"salute\":[\"salu\"],\"satisfy\":[\"satifl\"],\"scrabble\":[\"scrabdl\"],\"section\":[\"secio\"],\"segments\":[\"segement\"],\"sherbet\":[\"sherber\"],\"signal\":[\"singa\"],\"simplicity\":[\"cimplicit\",\"simpfilt\"],\"site\":[\"sitt\"],\"situation\":[\"situratio\"],\"smile\":[\"smi\"],\"sneaked\":[\"snuc\"],\"sometimes\":[\"sometme\"],\"sonic\":[\"soone\"],\"specifically\":[\"specificial\"],\"spell\":[\"spe\"],\"spoke\":[\"spoa\"],\"steering\":[\"sterin\"],\"stomach\":[\"stumac\"],\"straitjacket\":[\"straightjacke\"],\"student\":[\"stuten\"],\"style_guide\":[\"styleguid\"],\"subscribed\":[\"subjecribe\"],\"substitutions\":[\"subisition\",\"substation\"],\"sugar\":[\"suge\"],\"superfluous\":[\"superfulou\"],\"swimwear\":[\"swim_wea\"],\"sylph\":[\"slyp\"],\"synchronization\":[\"syncorizatio\"],\"team\":[\"te\"],\"technically\":[\"techniquel\"],\"test\":[\"tess\",\"ttes\"],\"tests\":[\"tet\"],\"than_or\":[\"thano\"],\"theoretical\":[\"teridica\",\"theridicall\"],\"theoretically\":[\"thredicall\"],\"titillate\":[\"titalat\"],\"tough\":[\"taf\"],\"tragedy\":[\"tradeg\"],\"trouble\":[\"trubbe\"],\"tunnel_like\":[\"tunnellik\"],\"turned\":[\"ture\"],\"two\":[\"te\"],\"unconstitutional\":[\"unconisitiona\"],\"under_ladder\":[\"underladde\"],\"unintelligible\":[\"unentelegibl\"],\"unnatural\":[\"unatourra\",\"unaturra\",\"unnaturra\"],\"up_cast\":[\"upcas\"],\"uranium\":[\"uranisiu\"],\"utmost\":[\"upmos\"],\"version\":[\"veriso\"],\"vinaigrette\":[\"vinagarett\"],\"volley\":[\"voly\"],\"voluntarism\":[\"volunteeris\"],\"voluptuous\":[\"volumptuou\"],\"wait\":[\"wait\"],\"ward\":[\"whar\"],\"warlord\":[\"warloor\"],\"wasting\":[\"wadtin\"],\"weaken\":[\"wicke\"],\"wimp\":[\"whim\"],\"yield\":[\"yeil\"],\"your\":[\"you\",\"\"],\"alexis\":[\"alaska\"],\"amanda\":[\"amber\"],\"ashley\":[\"assley\"],\"hannah\":[\"honey\"],\"madison\":[\"missi\"],\"are\":[{\"spelling\":\"is\",\"weight\":1},{\"spelling\":\"are\",\"weight\":1}],\"breast\":[\"boob\",\"tit\"],\"but\":[\"butt\"],\"butt\":[\"ass\"],\"doctor\":[\"doc\"],\"dr\":[\"doc\"],\"farther\":[\"further\",\"farther\"],\"fewer\":[\"less\",\"fewer\"],\"female\":[{\"synonym\":\"woman\"}],\"large\":[\"huge\",\"big\",\"ginormous\"],\"less\":[{\"synonym\":\"fewer\"}],\"is\":[{\"spelling\":\"is\",\"weight\":1},{\"spelling\":\"are\",\"weight\":1}],\"you\":[{\"spelling\":\"ya\",\"weight\":1},{\"spelling\":\"yah\",\"weight\":1},{\"spelling\":\"u\",\"weight\":1}],\"were\":[\"was\"],\"woman\":[{\"spelling\":\"bimbo\",\"weight\":1},{\"spelling\":\"chick\",\"weight\":0.4},{\"spelling\":\"girl\",\"weight\":1},{\"spelling\":\"pussycat\",\"weight\":0.7},{\"spelling\":\"pussygirl\",\"weight\":0.4},{\"spelling\":\"fuckdoll\",\"weight\":0.4},{\"spelling\":\"doll\",\"weight\":0.4}]};\n\n//# sourceURL=webpack://mispell/./res/finalDict.json?");

/***/ }),

/***/ "./src/data.js":
/*!*********************!*\
  !*** ./src/data.js ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports.dict = __webpack_require__(/*! ../res/finalDict.json */ \"./res/finalDict.json\")\n\n\n//# sourceURL=webpack://mispell/./src/data.js?");

/***/ }),

/***/ "./src/main.js":
/*!*********************!*\
  !*** ./src/main.js ***!
  \*********************/
/*! exports provided: bimbofy */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"bimbofy\", function() { return bimbofy; });\n//import data from './data.js'\n//import nearly from 'nearly'\nconst data = __webpack_require__(/*! ./data.js */ \"./src/data.js\")\nconst dict = data.dict\nconst pluralize = __webpack_require__(/*! pluralize */ \"./node_modules/pluralize/pluralize.js\")\nconst nlp = __webpack_require__(/*! compromise */ \"./node_modules/compromise/builds/compromise.js\")\n\n//console.log(dict)\n\n/**\n * @param {double} bf - BimboFactor, a value between 0 and 1 describing the current level of bimbofication.\n */\nfunction bimbofy(text, bf) {\n   // Replace curly quotes in text\n   text = text.replace(/[\\u2018\\u2019]/g, \"'\").replace(/[\\u201C\\u201D]/g, '\"');\n\n   // NATURAL LANGUAGE PROCESSING LIBRARY\n   // Spell out numbers\n   let doc = nlp(text)\n   if (bf > 0.5) {\n      //doc.values().toText()\n   }\n   if (bf > 0.5) {\n      doc.contractions().contract()\n   }\n   {\n      let rand = Math.random()\n      // Of everything that is not a verb at end of sentence, pick all verbs\n      doc.not('#Verb$').match('#Verb').forEach((match) => {\n         if (Math.random() < 0.4 * bf) {\n            let rw = pickRandomWeighted([\n               {spelling: ', like,', weight: 1.5},\n               {spelling: ', like whatever,', weight: 0.1}\n            ]).spelling\n            match.setPunctuation(rw)//.insertAfter(rw);\n         }\n      })\n      doc.not('^#Adjective').match('#Adjective').forEach((match) => {\n         // Don't insert before words beginning with quotation marks\n         // Words might start with a space, so checking for any quotations\n         if (!match.data()[0].text.includes('\"')) {\n            //console.log(\"Adj:\", match.data()[0].text);\n            let rw = pickRandomWeighted([\n               {spelling: 'literally', weight: 0.5},\n               {spelling: 'totally', weight: 1},\n               {spelling: 'actually', weight: 0.5},\n               {spelling: 'basically', weight: 1},\n               {spelling: 'absolutely', weight: 1},\n               {spelling: 'you know,', weight: 1}\n            ]).spelling\n            let rw2 = pickRandomWeighted([\n               {spelling: 'um', weight: 0.4},\n               {spelling: 'uh,', weight: 1}\n            ]).spelling\n            let rw3 = pickRandomWeighted([\n               {spelling: 'kinda', weight: 1},\n               {spelling: 'sorta', weight: 1},\n            ]).spelling\n\n            if (Math.random() < 0.2 * bf) {\n               match.insertBefore(rw2);\n            }\n            if (Math.random() < 0.3 * bf) {\n               match.insertBefore(rw3);\n            }\n            if (Math.random() < 0.6 * bf) {\n               match.insertBefore(rw);\n            }\n\n         }\n      })\n      /*doc.adjectives().filter(() => {\n         return Math.random() < 0.25 * bf}).insertBefore('literally')*/\n      //console.log(doc.verbs().data());\n   }\n   text = doc.out('text')\n\n   // MANUAL PROCESSING\n   // Split text on word boundaries\n   let words = text.split(/\\b/g)\n\n   // Iterate over all words\n   for (let i = 0; i < words.length; i++){\n      // PREPARATION\n      let word = words[i]\n\n      /*if (word === \"'\" && words[i+1] == \"s\") {\n         words[i] = \" \"\n         words[i+1] = \"is\"\n         continue\n      }*/\n\n      // Remove capitalization. Save it for later.\n      let capitalLetter = false\n      let capitalAll = false\n      if (word[0] === word[0].toUpperCase()) capitalLetter = true\n      if (word.slice(-1) === word.slice(-1).toUpperCase()) capitalAll = true\n      word = word.toLowerCase()\n\n      // Remove plural form\n      let isSingular = false;\n      let singular = pluralize(word, 1)\n      if (singular === word) isSingular = true\n      if (word !== \"s\") word = singular //Ignore lonely 's or they are removed\n\n      // If there is a misspelling, maybe misspell it\n      if (Math.random() < 0.5 * bf) {\n         // DICTIONARY MISSPELLING\n         let spelling = pickSpelling(word)\n\n         // Replace underscores in dict with spaces\n         if (spelling !== word) {\n            word = spelling.replace('_', ' ')\n         }\n      }\n      if (Math.random() < 0.5 * bf) {\n         // REGEXP MISSPELLING\n         word = misspellByRule(word)\n      }\n\n      // RESTORE\n      // Restore capital letter if any\n      if (capitalLetter) word = word.charAt(0).toUpperCase() + word.slice(1)\n      if (capitalAll) word = word.toUpperCase()\n      // Restore pluralization\n      if (!isSingular) word = pluralize(word, 2)\n\n      // Write back\n      words[i] = word\n   }\n   //console.log(misspellByRule(\"summation\"));\n\n   return words.join('')\n}\n\nfunction pickSpelling(word) {\n   if (!(word in dict)) return word\n   let entry = dict[word]\n\n   if (entry[0].constructor == Object) {\n      let picked = pickRandomWeighted(entry)\n      if ('synonym' in picked) {\n         return pickSpelling(picked.synonym)\n      }\n      return picked.spelling\n   } else { // Or not weighted, if word.constructor == String\n      let index = Math.floor(Math.random() * dict[word].length)\n      return entry[index]\n   }\n}\n\nfunction pickRandomWeighted(weightedList) {\n   let totalWeight = 0;\n   for (let i = 0; i < weightedList.length; i++) {\n      if (!(\"weight\" in weightedList[i])) weightedList[i].weight = 1\n      totalWeight += weightedList[i].weight\n   }\n   let rand = Math.random() * totalWeight\n   for (let i = 0; i < weightedList.length; i++) {\n      rand -= weightedList[i].weight\n      if (rand < 0) return weightedList[i]\n   }\n   throw(\"Error picking a random weighted element.\")\n}\n\nfunction pickRandom(list) {\n   return list[Math.floor(Math.random()*list.length)];\n}\n\nfunction misspellByRule(string) {\n   let lastChar = \"\"\n   let output = \"\"\n   //console.log(string);\n   string = string.replace(/bility\\b/, \"ilty\")\n   string = string.replace(/tible\\b/, \"tidle\")\n   string = string.replace(/tes\\b/, \"ties\")\n   string = string.replace(/ces\\b/, \"cies\")\n   string = string.replace(/ges\\b/, \"gies\")\n   string = string.replace(/uter\\b/, \"tuer\")\n   //console.log(string);\n   for (let i = 0; i < string.length; i++) {\n      let c = string.charAt(i);\n      if (c === \".\" || c === \".\" || c === \"!\" || c === \"?\") {\n         // Do nothing\n      } else if (lastChar === \"t\" && c === \"h\") { // th\n         output = output.slice(0, -1) + \"d\"\n         lastChar = \"d\"\n         continue\n      } else if (lastChar === \"e\" && c === \"e\") { // ee\n         output = output.slice(0, -1) + \"i\"\n         lastChar = \"i\"\n         continue\n      } if (lastChar === \"o\" && c === \"u\") { // ou\n         output = output.slice(0, -1) + \"u\"\n         lastChar = \"u\"\n         continue\n      } else if (c === lastChar) { // Repeated character\n         lastChar = c\n         continue\n      }\n      lastChar = c\n      output += c\n   }\n   //console.log(string, \"->\", output);\n   return output\n}\n\n/* Unneccessary words to add\nactually\nlike\nhonestly\nliterally\nreally\ntotally\nuh\num\nwhatever\nyou know\n\nfabulous\n*/\n\n\n//# sourceURL=webpack://mispell/./src/main.js?");

/***/ })

/******/ });